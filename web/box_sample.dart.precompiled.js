// Generated by dart2js, the Dart to JavaScript compiler.
// The code supports the following hooks:
// dartPrint(message)   - if this function is defined it is called
//                        instead of the Dart [print] method.
// dartMainRunner(main) - if this function is defined, the Dart [main]
//                        method will not be invoked directly.
//                        Instead, a closure that will invoke [main] is
//                        passed to [dartMainRunner].
(function($) {
var A = {};
delete A.x;
var B = {};
delete B.x;
var C = {};
delete C.x;
var D = {};
delete D.x;
var E = {};
delete E.x;
var F = {};
delete F.x;
var G = {};
delete G.x;
var H = {};
delete H.x;
var J = {};
delete J.x;
var K = {};
delete K.x;
var L = {};
delete L.x;
var M = {};
delete M.x;
var N = {};
delete N.x;
var O = {};
delete O.x;
var P = {};
delete P.x;
var Q = {};
delete Q.x;
var R = {};
delete R.x;
var S = {};
delete S.x;
var T = {};
delete T.x;
var U = {};
delete U.x;
var V = {};
delete V.x;
var W = {};
delete W.x;
var X = {};
delete X.x;
var Y = {};
delete Y.x;
var Z = {};
delete Z.x;
function Isolate() {}
init();

$ = Isolate.$isolateProperties;
var $$ = {};

// Native classes
// Method closures
$$.BoundClosure$i1 = [P, {"": "BoundClosure;_self,__js_helper$_target,_receiver,__js_helper$_name",
  call$1: function(p0) {
    return this.__js_helper$_target.call(this._self, this._receiver, p0);
  },
  $is_args1: true
}];

$$.BoundClosure$i0 = [H, {"": "BoundClosure;_self,__js_helper$_target,_receiver,__js_helper$_name",
  call$0: function() {
    return this.__js_helper$_target.call(this._self, this._receiver);
  }
}];

$$.BoundClosure$1 = [H, {"": "BoundClosure;_self,__js_helper$_target,_receiver,__js_helper$_name",
  call$1: function(p0) {
    return this.__js_helper$_target.call(this._self, p0);
  },
  $is_args1: true
}];

$$.BoundClosure$0 = [P, {"": "BoundClosure;_self,__js_helper$_target,_receiver,__js_helper$_name",
  call$0: function() {
    return this.__js_helper$_target.call(this._self);
  }
}];

$$.BoundClosure$2 = [P, {"": "BoundClosure;_self,__js_helper$_target,_receiver,__js_helper$_name",
  call$2: function(p0, p1) {
    return this.__js_helper$_target.call(this._self, p0, p1);
  },
  call$1: function(p0) {
    return this.call$2(p0, null);
  },
  $is_args2: true,
  $is_args1: true
}];

$$.BoundClosure$3 = [N, {"": "BoundClosure;_self,__js_helper$_target,_receiver,__js_helper$_name",
  call$3: function(p0, p1, p2) {
    return this.__js_helper$_target.call(this._self, p0, p1, p2);
  }
}];

$$.BoundClosure$i2 = [T, {"": "BoundClosure;_self,__js_helper$_target,_receiver,__js_helper$_name",
  call$2: function(p0, p1) {
    return this.__js_helper$_target.call(this._self, this._receiver, p0, p1);
  },
  $is_args2: true
}];

$$.Closure$2 = [H, {"": "Closure;call$2,$name", $is_args2: true}];

$$.Closure$0 = [H, {"": "Closure;call$0,$name"}];

$$.Closure$7 = [H, {"": "Closure;call$7,$name"}];

$$.Closure$1 = [A, {"": "Closure;call$1,$name", $is_args1: true}];

$$.Closure$21 = [P, {"": "Closure;call$2,$name",
  call$1: function(p0) {
    return this.call$2(p0, null);
  },
  $is_args2: true,
  $is_args1: true
}];

(function (reflectionData) {
  function map(x){x={x:x};delete x.x;return x}
  if (!init.libraries) init.libraries = [];
  if (!init.mangledNames) init.mangledNames = map();
  if (!init.mangledGlobalNames) init.mangledGlobalNames = map();
  if (!init.statics) init.statics = map();
  if (!init.typeInformation) init.typeInformation = map();
  if (!init.globalFunctions) init.globalFunctions = map();
  var libraries = init.libraries;
  var mangledNames = init.mangledNames;
  var mangledGlobalNames = init.mangledGlobalNames;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var length = reflectionData.length;
  for (var i = 0; i < length; i++) {
    var data = reflectionData[i];
    var name = data[0];
    var uri = data[1];
    var metadata = data[2];
    var globalObject = data[3];
    var descriptor = data[4];
    var isRoot = !!data[5];
    var fields = descriptor && descriptor[""];
    var classes = [];
    var functions = [];
    function processStatics(descriptor) {
      for (var property in descriptor) {
        if (!hasOwnProperty.call(descriptor, property)) continue;
        if (property === "") continue;
        var element = descriptor[property];
        var firstChar = property.substring(0, 1);
        var previousProperty;
        if (firstChar === "+") {
          mangledGlobalNames[previousProperty] = property.substring(1);
          if (descriptor[property] == 1) descriptor[previousProperty].$reflectable = 1;
          if (element && element.length) init.typeInformation[previousProperty] = element;
        } else if (firstChar === "@") {
          property = property.substring(1);
          $[property]["@"] = element;
        } else if (firstChar === "*") {
          globalObject[previousProperty].$defaultValues = element;
          var optionalMethods = descriptor.$methodsWithOptionalArguments;
          if (!optionalMethods) {
            descriptor.$methodsWithOptionalArguments = optionalMethods = {}
          }
          optionalMethods[property] = previousProperty;
        } else if (typeof element === "function") {
          globalObject[previousProperty = property] = element;
          functions.push(property);
          init.globalFunctions[property] = element;
        } else {
          previousProperty = property;
          var newDesc = {};
          var previousProp;
          for (var prop in element) {
            if (!hasOwnProperty.call(element, prop)) continue;
            firstChar = prop.substring(0, 1);
            if (prop === "static") {
              processStatics(init.statics[property] = element[prop]);
            } else if (firstChar === "+") {
              mangledNames[previousProp] = prop.substring(1);
              if (element[prop] == 1) element[previousProp].$reflectable = 1;
            } else if (firstChar === "@" && prop !== "@") {
              newDesc[prop.substring(1)]["@"] = element[prop];
            } else if (firstChar === "*") {
              newDesc[previousProp].$defaultValues = element[prop];
              var optionalMethods = newDesc.$methodsWithOptionalArguments;
              if (!optionalMethods) {
                newDesc.$methodsWithOptionalArguments = optionalMethods={}
              }
              optionalMethods[prop] = previousProp;
            } else {
              newDesc[previousProp = prop] = element[prop];
            }
          }
          $$[property] = [globalObject, newDesc];
          classes.push(property);
        }
      }
    }
    processStatics(descriptor);
    libraries.push([name, uri, classes, functions, metadata, fields, isRoot,
                    globalObject]);
  }
})([
["_foreign_helper", "dart:_foreign_helper", , H, {
JS_CONST: {"": "Object;code"}}],
["_interceptors", "dart:_interceptors", , J, {
getInterceptor: function(object) {
  return void 0;
},

makeDispatchRecord: function(interceptor, proto, extension, indexability) {
  return {i: interceptor, p: proto, e: extension, x: indexability};
},

getNativeInterceptor: function(object) {
  var record, proto, objectProto, interceptor;
  record = object[init.dispatchPropertyName];
  if (record == null)
    if ($.initNativeDispatchFlag == null) {
      H.initNativeDispatch();
      record = object[init.dispatchPropertyName];
    }
  if (record != null) {
    proto = record.p;
    if (false === proto)
      return record.i;
    if (true === proto)
      return object;
    objectProto = Object.getPrototypeOf(object);
    if (proto === objectProto)
      return record.i;
    if (record.e === objectProto)
      throw H.wrapException(P.UnimplementedError$("Return interceptor for " + H.S(proto(object, record))));
  }
  interceptor = H.lookupAndCacheInterceptor(object);
  if (interceptor == null)
    return C.UnknownJavaScriptObject_methods;
  return interceptor;
},

Interceptor: {"": "Object;",
  $eq: function(receiver, other) {
    return receiver === other;
  },
  get$hashCode: function(receiver) {
    return H.Primitives_objectHashCode(receiver);
  },
  toString$0: function(receiver) {
    return H.Primitives_objectToString(receiver);
  },
  "%": "ANGLEInstancedArrays|AbstractWorker|ArrayBuffer|AudioListener|BarProp|CSS|Canvas2DContextAttributes|CanvasGradient|CanvasPattern|Clipboard|Composition|ConsoleBase|Coordinates|Counter|Crypto|DOMFileSystemSync|DOMImplementation|DOMParser|Database|DatabaseSync|DeviceRotationRate|DirectoryEntrySync|DirectoryReader|DirectoryReaderSync|EXTFragDepth|EXTTextureFilterAnisotropic|EntrySync|FileEntrySync|FileReaderSync|FileWriterSync|FontFace|FormData|Geolocation|Geoposition|HTMLAllCollection|IDBAny|IDBFactory|IDBKeyRange|ImageBitmap|ImageData|InputMethodContext|KeyPair|MIDIAccessPromise|MediaError|MediaKeyError|MediaKeys|MediaQueryList|MemoryInfo|MessageChannel|MutationObserver|Navigator|NodeFilter|NodeIterator|NotificationCenter|OESElementIndexUint|OESStandardDerivatives|OESTextureFloat|OESTextureFloatLinear|OESTextureHalfFloat|OESTextureHalfFloatLinear|OESVertexArrayObject|PagePopupController|Path|PerformanceTiming|PeriodicWave|PositionError|Promise|RGBColor|RTCIceCandidate|RTCStatsResponse|Rect|SQLError|SQLResultSet|SQLTransaction|SQLTransactionSync|SVGAnimatedAngle|SVGAnimatedBoolean|SVGAnimatedEnumeration|SVGAnimatedInteger|SVGAnimatedLength|SVGAnimatedLengthList|SVGAnimatedNumber|SVGAnimatedNumberList|SVGAnimatedPreserveAspectRatio|SVGAnimatedRect|SVGAnimatedString|SVGAnimatedTransformList|SVGColor|SVGMatrix|SVGPaint|SVGPreserveAspectRatio|SVGRenderingIntent|SVGUnitTypes|SVGViewSpec|Screen|SecurityPolicy|ServiceWorker|SourceInfo|SpeechRecognitionAlternative|SpeechSynthesis|StorageInfo|StorageQuota|SubtleCrypto|TextMetrics|TreeWalker|URL|ValidityState|WebGLBuffer|WebGLCompressedTextureATC|WebGLCompressedTexturePVRTC|WebGLCompressedTextureS3TC|WebGLDebugRendererInfo|WebGLDebugShaders|WebGLDepthTexture|WebGLDrawBuffers|WebGLExtensionLoseContext|WebGLFramebuffer|WebGLLoseContext|WebGLProgram|WebGLRenderbuffer|WebGLShader|WebGLShaderPrecisionFormat|WebGLTexture|WebGLUniformLocation|WebGLVertexArrayObjectOES|WebKitCSSMatrix|WebKitMutationObserver|WebKitSourceBuffer|WorkerConsole|WorkerCrypto|WorkerLocation|WorkerNavigator|WorkerPerformance|XMLSerializer|XPathEvaluator|XPathExpression|XPathNSResolver|XPathResult|XSLTProcessor|mozRTCIceCandidate"
},

JSBool: {"": "bool/Interceptor;",
  toString$0: function(receiver) {
    return String(receiver);
  },
  get$hashCode: function(receiver) {
    return receiver ? 519018 : 218159;
  },
  $isbool: true
},

JSNull: {"": "Interceptor;",
  $eq: function(receiver, other) {
    return null == other;
  },
  toString$0: function(receiver) {
    return "null";
  },
  get$hashCode: function(receiver) {
    return 0;
  }
},

JavaScriptObject: {"": "Interceptor;",
  get$hashCode: function(_) {
    return 0;
  }
},

PlainJavaScriptObject: {"": "JavaScriptObject;"},

UnknownJavaScriptObject: {"": "JavaScriptObject;"},

JSArray: {"": "List/Interceptor;",
  removeAt$1: function(receiver, index) {
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw H.wrapException(new P.ArgumentError(index));
    if (index < 0 || index >= receiver.length)
      throw H.wrapException(P.RangeError$value(index));
    if (!!receiver.fixed$length)
      H.throwExpression(P.UnsupportedError$("removeAt"));
    return receiver.splice(index, 1)[0];
  },
  remove$1: function(receiver, element) {
    var i;
    if (!!receiver.fixed$length)
      H.throwExpression(P.UnsupportedError$("remove"));
    for (i = 0; i < receiver.length; ++i)
      if (J.$eq(receiver[i], element)) {
        receiver.splice(i, 1);
        return true;
      }
    return false;
  },
  clear$0: function(receiver) {
    this.set$length(receiver, 0);
  },
  forEach$1: function(receiver, f) {
    return H.IterableMixinWorkaround_forEach(receiver, f);
  },
  elementAt$1: function(receiver, index) {
    if (index < 0 || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  removeRange$2: function(receiver, start, end) {
    var receiverLength;
    if (!!receiver.fixed$length)
      H.throwExpression(P.UnsupportedError$("removeRange"));
    receiverLength = receiver.length;
    if (start < 0 || start > receiverLength)
      throw H.wrapException(P.RangeError$range(start, 0, receiverLength));
    if (end < start || end > receiverLength)
      throw H.wrapException(P.RangeError$range(end, start, receiverLength));
    H.Arrays_copy(receiver, end, receiver, start, receiverLength - end);
    this.set$length(receiver, receiverLength - (end - start));
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  toString$0: function(receiver) {
    return H.IterableMixinWorkaround_toStringIterable(receiver, "[", "]");
  },
  toList$1$growable: function(receiver, growable) {
    return P.List_List$from(receiver, growable, H.getRuntimeTypeArgument(receiver, "JSArray", 0));
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$iterator: function(receiver) {
    var t1 = new H.ListIterator(receiver, receiver.length, 0, null);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(receiver, "JSArray", 0)]);
    return t1;
  },
  get$hashCode: function(receiver) {
    return H.Primitives_objectHashCode(receiver);
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  set$length: function(receiver, newLength) {
    if (typeof newLength !== "number" || Math.floor(newLength) !== newLength)
      throw H.wrapException(P.ArgumentError$(newLength));
    if (newLength < 0)
      throw H.wrapException(P.RangeError$value(newLength));
    if (!!receiver.fixed$length)
      H.throwExpression(P.UnsupportedError$("set length"));
    receiver.length = newLength;
  },
  $index: function(receiver, index) {
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw H.wrapException(new P.ArgumentError(index));
    if (index >= receiver.length || index < 0)
      throw H.wrapException(P.RangeError$value(index));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    if (!!receiver.immutable$list)
      H.throwExpression(P.UnsupportedError$("indexed set"));
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw H.wrapException(new P.ArgumentError(index));
    if (index >= receiver.length || index < 0)
      throw H.wrapException(P.RangeError$value(index));
    receiver[index] = value;
  },
  $isList: true,
  $asList: null,
  $isList: true,
  $isEfficientLength: true
},

JSMutableArray: {"": "JSArray;", $isJSMutableArray: true,
  $asJSArray: function() {
    return [null];
  },
  $asList: function() {
    return [null];
  }
},

JSFixedArray: {"": "JSMutableArray;"},

JSExtendableArray: {"": "JSMutableArray;", $isJSExtendableArray: true},

JSNumber: {"": "num/Interceptor;",
  remainder$1: function(receiver, b) {
    return receiver % b;
  },
  abs$0: function(receiver) {
    return Math.abs(receiver);
  },
  toInt$0: function(receiver) {
    var t1;
    if (receiver >= -2147483648 && receiver <= 2147483647)
      return receiver | 0;
    if (isFinite(receiver)) {
      t1 = receiver < 0 ? Math.ceil(receiver) : Math.floor(receiver);
      return t1 + 0;
    }
    throw H.wrapException(P.UnsupportedError$('' + receiver));
  },
  ceil$0: function(receiver) {
    return this.toInt$0(Math.ceil(receiver));
  },
  floor$0: function(receiver) {
    return this.toInt$0(Math.floor(receiver));
  },
  roundToDouble$0: function(receiver) {
    if (receiver < 0)
      return -Math.round(-receiver);
    else
      return Math.round(receiver);
  },
  toDouble$0: function(receiver) {
    return receiver;
  },
  toString$0: function(receiver) {
    if (receiver === 0 && 1 / receiver < 0)
      return "-0.0";
    else
      return "" + receiver;
  },
  get$hashCode: function(receiver) {
    return receiver & 0x1FFFFFFF;
  },
  $add: function(receiver, other) {
    if (typeof other !== "number")
      throw H.wrapException(new P.ArgumentError(other));
    return receiver + other;
  },
  $sub: function(receiver, other) {
    if (typeof other !== "number")
      throw H.wrapException(new P.ArgumentError(other));
    return receiver - other;
  },
  $div: function(receiver, other) {
    if (typeof other !== "number")
      throw H.wrapException(new P.ArgumentError(other));
    return receiver / other;
  },
  $mul: function(receiver, other) {
    if (typeof other !== "number")
      throw H.wrapException(new P.ArgumentError(other));
    return receiver * other;
  },
  $mod: function(receiver, other) {
    var result = receiver % other;
    if (result === 0)
      return 0;
    if (result > 0)
      return result;
    if (other < 0)
      return result - other;
    else
      return result + other;
  },
  $tdiv: function(receiver, other) {
    if ((receiver | 0) === receiver && (other | 0) === other && 0 !== other && -1 !== other)
      return receiver / other | 0;
    else
      return this._slowTdiv$1(receiver, other);
  },
  _slowTdiv$1: function(receiver, other) {
    return this.toInt$0(receiver / other);
  },
  $shr: function(receiver, other) {
    if (other < 0)
      throw H.wrapException(P.ArgumentError$(other));
    if (receiver > 0) {
      if (other > 31)
        return 0;
      return receiver >>> other;
    }
    if (other > 31)
      other = 31;
    return receiver >> other >>> 0;
  },
  $lt: function(receiver, other) {
    if (typeof other !== "number")
      throw H.wrapException(P.ArgumentError$(other));
    return receiver < other;
  },
  $gt: function(receiver, other) {
    if (typeof other !== "number")
      throw H.wrapException(new P.ArgumentError(other));
    return receiver > other;
  },
  $le: function(receiver, other) {
    if (typeof other !== "number")
      throw H.wrapException(new P.ArgumentError(other));
    return receiver <= other;
  },
  $ge: function(receiver, other) {
    if (typeof other !== "number")
      throw H.wrapException(P.ArgumentError$(other));
    return receiver >= other;
  },
  $isnum: true,
  static: {
"": "JSNumber__MIN_INT32,JSNumber__MAX_INT32",
}

},

JSInt: {"": "int/JSNumber;", $isdouble: true, $isnum: true, $isint: true},

JSDouble: {"": "double/JSNumber;", $isdouble: true, $isnum: true},

JSString: {"": "String/Interceptor;",
  codeUnitAt$1: function(receiver, index) {
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw H.wrapException(P.ArgumentError$(index));
    if (index < 0)
      throw H.wrapException(P.RangeError$value(index));
    if (index >= receiver.length)
      throw H.wrapException(P.RangeError$value(index));
    return receiver.charCodeAt(index);
  },
  $add: function(receiver, other) {
    if (typeof other !== "string")
      throw H.wrapException(new P.ArgumentError(other));
    return receiver + other;
  },
  startsWith$2: function(receiver, pattern, index) {
    var endIndex;
    if (index < 0 || index > receiver.length)
      throw H.wrapException(P.RangeError$range(index, 0, receiver.length));
    endIndex = index + pattern.length;
    if (endIndex > receiver.length)
      return false;
    return pattern === receiver.substring(index, endIndex);
  },
  startsWith$1: function($receiver, pattern) {
    return this.startsWith$2($receiver, pattern, 0);
  },
  substring$2: function(receiver, startIndex, endIndex) {
    if (typeof startIndex !== "number" || Math.floor(startIndex) !== startIndex)
      H.throwExpression(P.ArgumentError$(startIndex));
    if (endIndex == null)
      endIndex = receiver.length;
    if (typeof endIndex !== "number" || Math.floor(endIndex) !== endIndex)
      H.throwExpression(P.ArgumentError$(endIndex));
    if (startIndex < 0)
      throw H.wrapException(P.RangeError$value(startIndex));
    if (typeof endIndex !== "number")
      throw H.iae(endIndex);
    if (startIndex > endIndex)
      throw H.wrapException(P.RangeError$value(startIndex));
    if (endIndex > receiver.length)
      throw H.wrapException(P.RangeError$value(endIndex));
    return receiver.substring(startIndex, endIndex);
  },
  substring$1: function($receiver, startIndex) {
    return this.substring$2($receiver, startIndex, null);
  },
  indexOf$2: function(receiver, pattern, start) {
    if (typeof start !== "number" || Math.floor(start) !== start)
      throw H.wrapException(new P.ArgumentError(start));
    if (start < 0 || start > receiver.length)
      throw H.wrapException(P.RangeError$range(start, 0, receiver.length));
    return receiver.indexOf(pattern, start);
  },
  lastIndexOf$2: function(receiver, pattern, start) {
    var t1, t2;
    start = receiver.length;
    t1 = pattern.length;
    if (typeof start !== "number")
      throw start.$add();
    t2 = receiver.length;
    if (start + t1 > t2)
      start = t2 - t1;
    return receiver.lastIndexOf(pattern, start);
  },
  lastIndexOf$1: function($receiver, pattern) {
    return this.lastIndexOf$2($receiver, pattern, null);
  },
  contains$2: function(receiver, other, startIndex) {
    if (startIndex < 0 || startIndex > receiver.length)
      throw H.wrapException(P.RangeError$range(startIndex, 0, receiver.length));
    return H.stringContainsUnchecked(receiver, other, startIndex);
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  toString$0: function(receiver) {
    return receiver;
  },
  get$hashCode: function(receiver) {
    var t1, hash, i;
    for (t1 = receiver.length, hash = 0, i = 0; i < t1; ++i) {
      hash = 536870911 & hash + receiver.charCodeAt(i);
      hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
      hash ^= hash >> 6;
    }
    hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
    hash ^= hash >> 11;
    return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw H.wrapException(new P.ArgumentError(index));
    if (index >= receiver.length || index < 0)
      throw H.wrapException(P.RangeError$value(index));
    return receiver[index];
  },
  $isString: true
}}],
["_isolate_helper", "dart:_isolate_helper", , H, {
_callInIsolate: function(isolate, $function) {
  var result = isolate.eval$1($function);
  $globalState.topEventLoop.run$0();
  return result;
},

startRootIsolate: function(entry) {
  var rootContext;
  $globalState = H._Manager$(entry);
  if ($globalState.isWorker === true)
    return;
  rootContext = H._IsolateContext$();
  $globalState.rootContext = rootContext;
  $globalState.currentContext = rootContext;
  if (!!entry.$is_args1)
    rootContext.eval$1(new H.startRootIsolate_closure(entry));
  else if (!!entry.$is_args2)
    rootContext.eval$1(new H.startRootIsolate_closure0(entry));
  else
    rootContext.eval$1(entry);
  $globalState.topEventLoop.run$0();
},

IsolateNatives_computeThisScript: function() {
  var currentScript = init.currentScript;
  if (currentScript != null)
    return String(currentScript.src);
  if (typeof version == "function" && typeof os == "object" && "system" in os)
    return H.IsolateNatives_computeThisScriptD8();
  if (typeof version == "function" && typeof system == "function")
    return thisFilename();
  return;
},

IsolateNatives_computeThisScriptD8: function() {
  var stack, matches;
  stack = new Error().stack;
  if (stack == null) {
    stack = (function() {try { throw new Error() } catch(e) { return e.stack }})();
    if (stack == null)
      throw H.wrapException(P.UnsupportedError$("No stack trace"));
  }
  matches = stack.match(new RegExp("^ *at [^(]*\\((.*):[0-9]*:[0-9]*\\)$", "m"));
  if (matches != null)
    return matches[1];
  matches = stack.match(new RegExp("^[^@]*@(.*):[0-9]*$", "m"));
  if (matches != null)
    return matches[1];
  throw H.wrapException(P.UnsupportedError$("Cannot extract URI from \"" + stack + "\""));
},

IsolateNatives__processWorkerMessage: function(sender, e) {
  var msg, t1, functionName, entryPoint, args, message, isSpawnUri, replyTo, context, t2;
  msg = H._deserializeMessage(e.data);
  t1 = J.getInterceptor$asx(msg);
  switch (t1.$index(msg, "command")) {
    case "start":
      $globalState.currentManagerId = t1.$index(msg, "id");
      functionName = t1.$index(msg, "functionName");
      entryPoint = functionName == null ? $globalState.entry : init.globalFunctions[functionName];
      args = t1.$index(msg, "args");
      message = H._deserializeMessage(t1.$index(msg, "msg"));
      isSpawnUri = t1.$index(msg, "isSpawnUri");
      replyTo = H._deserializeMessage(t1.$index(msg, "replyTo"));
      context = H._IsolateContext$();
      t1 = $globalState.topEventLoop.events;
      t1._add$1(t1, new H._IsolateEvent(context, new H.IsolateNatives__processWorkerMessage_closure(entryPoint, args, message, isSpawnUri, replyTo), "worker-start"));
      $globalState.currentContext = context;
      $globalState.topEventLoop.run$0();
      break;
    case "spawn-worker":
      H.IsolateNatives__spawnWorker(t1.$index(msg, "functionName"), t1.$index(msg, "uri"), t1.$index(msg, "args"), t1.$index(msg, "msg"), t1.$index(msg, "isSpawnUri"), t1.$index(msg, "replyPort"));
      break;
    case "message":
      if (t1.$index(msg, "port") != null)
        J.send$1$x(t1.$index(msg, "port"), t1.$index(msg, "msg"));
      $globalState.topEventLoop.run$0();
      break;
    case "close":
      t1 = $globalState.managers;
      t2 = $.get$IsolateNatives_workerIds();
      t1.remove$1(t1, t2.$index(t2, sender));
      sender.terminate();
      $globalState.topEventLoop.run$0();
      break;
    case "log":
      H.IsolateNatives__log(t1.$index(msg, "msg"));
      break;
    case "print":
      if ($globalState.isWorker === true) {
        t1 = $globalState.mainManager;
        t2 = H._serializeMessage(H.fillLiteralMap(["command", "print", "msg", msg], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
        t1.toString;
        self.postMessage(t2);
      } else
        P.print(t1.$index(msg, "msg"));
      break;
    case "error":
      throw H.wrapException(t1.$index(msg, "msg"));
    default:
  }
},

IsolateNatives__log: function(msg) {
  var trace, t1, t2, exception;
  if ($globalState.isWorker === true) {
    t1 = $globalState.mainManager;
    t2 = H._serializeMessage(H.fillLiteralMap(["command", "log", "msg", msg], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
    t1.toString;
    self.postMessage(t2);
  } else
    try {
      $.get$globalThis().console.log(msg);
    } catch (exception) {
      H.unwrapException(exception);
      trace = new H._StackTrace(exception, null);
      throw H.wrapException(P.Exception_Exception(trace));
    }

},

IsolateNatives__startIsolate: function(topLevel, args, message, isSpawnUri, replyTo) {
  var t1;
  H.Primitives_initializeStatics($globalState.currentContext.id);
  $.lazyPort = H.ReceivePortImpl$();
  t1 = $.lazyPort;
  t1.toString;
  J.send$1$x(replyTo, ["spawned", new H._NativeJsSendPort(t1, $globalState.currentContext.id)]);
  if (isSpawnUri !== true)
    topLevel.call$1(message);
  else {
    t1 = J.getInterceptor(topLevel);
    if (!!t1.$is_args2)
      topLevel.call$2(args, message);
    else if (!!t1.$is_args1)
      topLevel.call$1(args);
    else
      topLevel.call$0();
  }
},

IsolateNatives__spawnWorker: function(functionName, uri, args, message, isSpawnUri, replyPort) {
  var worker, t1, workerId;
  if (uri == null)
    uri = $.get$IsolateNatives_thisScript();
  worker = new Worker(uri);
  worker.onmessage = function(e) { H.IsolateNatives__processWorkerMessage$closure.call$2(worker, e); };
  t1 = $globalState;
  workerId = t1.nextManagerId;
  t1.nextManagerId = workerId + 1;
  t1 = $.get$IsolateNatives_workerIds();
  t1.$indexSet(t1, worker, workerId);
  t1 = $globalState.managers;
  t1.$indexSet(t1, workerId, worker);
  worker.postMessage(H._serializeMessage(H.fillLiteralMap(["command", "start", "id", workerId, "replyTo", H._serializeMessage(replyPort), "args", args, "msg", H._serializeMessage(message), "isSpawnUri", isSpawnUri, "functionName", functionName], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null))));
},

_waitForPendingPorts: function(message, callback) {
  var finder, t1;
  finder = H._PendingSendPortFinder$();
  finder.traverse$1(message);
  t1 = P.Future_wait(finder.ports);
  t1.then$1(t1, new H._waitForPendingPorts_closure(callback));
},

_serializeMessage: function(message) {
  var t1;
  if ($globalState.supportsWorkers === true) {
    t1 = new H._JsSerializer(0, new H._MessageTraverserVisitedMap());
    t1._visited = new H._JsVisitedMap(null);
    return t1.traverse$1(message);
  } else {
    t1 = new H._JsCopier(new H._MessageTraverserVisitedMap());
    t1._visited = new H._JsVisitedMap(null);
    return t1.traverse$1(message);
  }
},

_deserializeMessage: function(message) {
  if ($globalState.supportsWorkers === true)
    return new H._JsDeserializer(null).deserialize$1(message);
  else
    return message;
},

_MessageTraverser_isPrimitive: function(x) {
  return x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean";
},

_Deserializer_isPrimitive: function(x) {
  return x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean";
},

startRootIsolate_closure: {"": "Closure;entry_0",
  call$0: function() {
    this.entry_0.call$1([]);
  }
},

startRootIsolate_closure0: {"": "Closure;entry_1",
  call$0: function() {
    this.entry_1.call$2([], null);
  }
},

_Manager: {"": "Object;nextIsolateId,currentManagerId,nextManagerId,currentContext,rootContext,topEventLoop,fromCommandLine,isWorker,supportsWorkers,isolates,mainManager,managers,entry",
  _nativeDetectEnvironment$0: function() {
    var t1, t2;
    t1 = $.get$globalWindow() == null;
    t2 = $.get$globalWorker();
    this.isWorker = t1 && $.get$globalPostMessageDefined() === true;
    if (this.isWorker !== true)
      t2 = t2 != null && $.get$IsolateNatives_thisScript() != null;
    else
      t2 = true;
    this.supportsWorkers = t2;
    this.fromCommandLine = t1 && this.isWorker !== true;
  },
  _nativeInitWorkerMessageHandler$0: function() {
    var $function = function (e) { H.IsolateNatives__processWorkerMessage$closure.call$2(this.mainManager, e); };
    $.get$globalThis().onmessage = $function;
    $.get$globalThis().dartPrint = function (object) {};
  },
  _Manager$1: function(entry) {
    this._nativeDetectEnvironment$0();
    this.topEventLoop = new H._EventLoop(P.ListQueue$(null, H._IsolateEvent), 0);
    this.isolates = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSInt, H._IsolateContext);
    this.managers = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSInt, null);
    if (this.isWorker === true) {
      this.mainManager = new H._MainManagerStub();
      this._nativeInitWorkerMessageHandler$0();
    }
  },
  static: {
_Manager$: function(entry) {
  var t1 = new H._Manager(0, 0, 1, null, null, null, null, null, null, null, null, null, entry);
  t1._Manager$1(entry);
  return t1;
}}

},

_IsolateContext: {"": "Object;id,ports,isolateStatics<",
  eval$1: function(code) {
    var old, result;
    old = $globalState.currentContext;
    $globalState.currentContext = this;
    $ = this.isolateStatics;
    result = null;
    try {
      result = code.call$0();
    } finally {
      $globalState.currentContext = old;
      if (old != null)
        $ = old.get$isolateStatics();
    }
    return result;
  },
  lookup$1: function(portId) {
    var t1 = this.ports;
    return t1.$index(t1, portId);
  },
  register$2: function(_, portId, port) {
    var t1 = this.ports;
    if (t1.containsKey$1(t1, portId))
      throw H.wrapException(P.Exception_Exception("Registry: ports must be registered only once."));
    t1 = this.ports;
    t1.$indexSet(t1, portId, port);
    t1 = $globalState.isolates;
    t1.$indexSet(t1, this.id, this);
  },
  unregister$1: function(portId) {
    var t1 = this.ports;
    t1.remove$1(t1, portId);
    if (this.ports._collection$_length === 0) {
      t1 = $globalState.isolates;
      t1.remove$1(t1, this.id);
    }
  },
  _IsolateContext$0: function() {
    var t1, t2;
    t1 = $globalState;
    t2 = t1.nextIsolateId;
    t1.nextIsolateId = t2 + 1;
    this.id = t2;
    this.ports = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSInt, P.ReceivePort);
    this.isolateStatics = new Isolate();
  },
  static: {
_IsolateContext$: function() {
  var t1 = new H._IsolateContext(null, null, null);
  t1._IsolateContext$0();
  return t1;
}}

},

_EventLoop: {"": "Object;events,activeTimerCount",
  dequeue$0: function() {
    var t1 = this.events;
    if (t1._head === t1._tail)
      return;
    return t1.removeFirst$0();
  },
  checkOpenReceivePortsFromCommandLine$0: function() {
    if ($globalState.rootContext != null) {
      var t1 = $globalState.isolates;
      t1 = t1.containsKey$1(t1, $globalState.rootContext.id) && $globalState.fromCommandLine === true && $globalState.rootContext.ports._collection$_length === 0;
    } else
      t1 = false;
    if (t1)
      throw H.wrapException(P.Exception_Exception("Program exited with open ReceivePorts."));
  },
  runIteration$0: function() {
    var $event, t1, t2;
    $event = this.dequeue$0();
    if ($event == null) {
      this.checkOpenReceivePortsFromCommandLine$0();
      t1 = $globalState;
      if (t1.isWorker === true && t1.isolates._collection$_length === 0 && t1.topEventLoop.activeTimerCount === 0) {
        t1 = t1.mainManager;
        t2 = H._serializeMessage(H.fillLiteralMap(["command", "close"], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
        t1.toString;
        self.postMessage(t2);
      }
      return false;
    }
    $event.process$0();
    return true;
  },
  _runHelper$0: function() {
    if ($.get$globalWindow() != null)
      new H._EventLoop__runHelper_next(this).call$0();
    else
      for (; this.runIteration$0();)
        ;
  },
  run$0: function() {
    var e, trace, exception, t1, t2;
    if ($globalState.isWorker !== true)
      this._runHelper$0();
    else
      try {
        this._runHelper$0();
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        trace = new H._StackTrace(exception, null);
        t1 = $globalState.mainManager;
        t2 = H._serializeMessage(H.fillLiteralMap(["command", "error", "msg", H.S(e) + "\n" + H.S(trace)], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
        t1.toString;
        self.postMessage(t2);
      }

  }
},

_EventLoop__runHelper_next: {"": "Closure;this_0",
  call$0: function() {
    if (!this.this_0.runIteration$0())
      return;
    P.Timer_Timer(C.Duration_0, this);
  }
},

_IsolateEvent: {"": "Object;isolate,fn,message",
  process$0: function() {
    this.isolate.eval$1(this.fn);
  }
},

_MainManagerStub: {"": "Object;"},

IsolateNatives__processWorkerMessage_closure: {"": "Closure;entryPoint_0,args_1,message_2,isSpawnUri_3,replyTo_4",
  call$0: function() {
    H.IsolateNatives__startIsolate(this.entryPoint_0, this.args_1, this.message_2, this.isSpawnUri_3, this.replyTo_4);
  }
},

_BaseSendPort: {"": "Object;", $isSendPort: true},

_NativeJsSendPort: {"": "_BaseSendPort;_receivePort,_isolateId",
  send$1: function(_, message) {
    H._waitForPendingPorts(message, new H._NativeJsSendPort_send_closure(this, message));
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = J.getInterceptor(other);
    return typeof other === "object" && other !== null && !!t1.$is_NativeJsSendPort && J.$eq(this._receivePort, other._receivePort);
  },
  get$hashCode: function(_) {
    return this._receivePort.get$__isolate_helper$_id();
  },
  $is_NativeJsSendPort: true,
  $isSendPort: true
},

_NativeJsSendPort_send_closure: {"": "Closure;this_1,message_2",
  call$0: function() {
    var t1, t2, t3, t4, isolate, shouldSerialize, msg;
    t1 = {};
    t2 = $globalState.isolates;
    t3 = this.this_1;
    t4 = t3._isolateId;
    isolate = t2.$index(t2, t4);
    if (isolate == null)
      return;
    if ((t3._receivePort.get$__isolate_helper$_controller()._state & 4) !== 0)
      return;
    shouldSerialize = $globalState.currentContext != null && $globalState.currentContext.id !== t4;
    msg = this.message_2;
    t1.msg_0 = msg;
    if (shouldSerialize)
      t1.msg_0 = H._serializeMessage(t1.msg_0);
    t2 = $globalState.topEventLoop;
    t4 = "receive " + H.S(msg);
    t2 = t2.events;
    t2._add$1(t2, new H._IsolateEvent(isolate, new H._NativeJsSendPort_send__closure(t1, t3, shouldSerialize), t4));
  }
},

_NativeJsSendPort_send__closure: {"": "Closure;box_0,this_3,shouldSerialize_4",
  call$0: function() {
    var t1, t2;
    t1 = this.this_3._receivePort;
    if ((t1.get$__isolate_helper$_controller()._state & 4) === 0) {
      if (this.shouldSerialize_4) {
        t2 = this.box_0;
        t2.msg_0 = H._deserializeMessage(t2.msg_0);
      }
      t1 = t1.__isolate_helper$_controller;
      t2 = this.box_0.msg_0;
      if (t1._state >= 4)
        H.throwExpression(t1._badEventState$0());
      t1._async$_add$1(t1, t2);
    }
  }
},

_WorkerSendPort: {"": "_BaseSendPort;_workerId,_receivePortId,_isolateId",
  send$1: function(_, message) {
    H._waitForPendingPorts(message, new H._WorkerSendPort_send_closure(this, message));
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = J.getInterceptor(other);
    return typeof other === "object" && other !== null && !!t1.$is_WorkerSendPort && J.$eq(this._workerId, other._workerId) && J.$eq(this._isolateId, other._isolateId) && J.$eq(this._receivePortId, other._receivePortId);
  },
  get$hashCode: function(_) {
    var t1, t2, t3;
    t1 = this._workerId;
    if (typeof t1 !== "number")
      throw t1.$shl();
    t2 = this._isolateId;
    if (typeof t2 !== "number")
      throw t2.$shl();
    t3 = this._receivePortId;
    if (typeof t3 !== "number")
      throw H.iae(t3);
    return (t1 << 16 ^ t2 << 8 ^ t3) >>> 0;
  },
  $is_WorkerSendPort: true,
  $isSendPort: true
},

_WorkerSendPort_send_closure: {"": "Closure;this_0,message_1",
  call$0: function() {
    var t1, workerMessage, t2, manager;
    t1 = this.this_0;
    workerMessage = H._serializeMessage(H.fillLiteralMap(["command", "message", "port", t1, "msg", this.message_1], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
    if ($globalState.isWorker === true) {
      $globalState.mainManager.toString;
      self.postMessage(workerMessage);
    } else {
      t2 = $globalState.managers;
      manager = t2.$index(t2, t1._workerId);
      if (manager != null)
        manager.postMessage(workerMessage);
    }
  }
},

ReceivePortImpl: {"": "Stream;__isolate_helper$_id<,__isolate_helper$_controller<",
  listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
    var t1 = this.__isolate_helper$_controller;
    t1.toString;
    t1 = new P._ControllerStream(t1);
    H.setRuntimeTypeInfo(t1, [null]);
    return t1.listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, onError);
  },
  close$0: function(_) {
    var t1 = this.__isolate_helper$_controller;
    if ((t1._state & 4) !== 0)
      return;
    t1.close$0(t1);
    $globalState.currentContext.unregister$1(this.__isolate_helper$_id);
  },
  get$close: function(_receiver) {
    return new H.BoundClosure$i0(this, H.ReceivePortImpl.prototype.close$0, _receiver, "close$0");
  },
  ReceivePortImpl$0: function() {
    this.__isolate_helper$_controller = P.StreamController_StreamController(this.get$close(this), null, null, null, true, null);
    var t1 = $globalState.currentContext;
    t1.register$2(t1, this.__isolate_helper$_id, this);
  },
  $asStream: function() {
    return [null];
  },
  static: {
"": "ReceivePortImpl__nextFreeId",
ReceivePortImpl$: function() {
  var t1 = $.ReceivePortImpl__nextFreeId;
  $.ReceivePortImpl__nextFreeId = t1 + 1;
  t1 = new H.ReceivePortImpl(t1, null);
  t1.ReceivePortImpl$0();
  return t1;
}}

},

_waitForPendingPorts_closure: {"": "Closure;callback_0",
  call$1: function(_) {
    return this.callback_0.call$0();
  },
  $is_args1: true
},

_PendingSendPortFinder: {"": "_MessageTraverser;ports,_visited",
  visitPrimitive$1: function(x) {
  },
  visitList$1: function(list) {
    var t1 = this._visited;
    if (t1.$index(t1, list) != null)
      return;
    t1 = this._visited;
    t1.$indexSet(t1, list, true);
    J.forEach$1$ax(list, this.get$_dispatch());
  },
  visitMap$1: function(map) {
    var t1 = this._visited;
    if (t1.$index(t1, map) != null)
      return;
    t1 = this._visited;
    t1.$indexSet(t1, map, true);
    J.forEach$1$ax(J.get$values$x(map), this.get$_dispatch());
  },
  visitSendPort$1: function(port) {
  },
  _PendingSendPortFinder$0: function() {
    this._visited = new H._JsVisitedMap(null);
  },
  static: {
_PendingSendPortFinder$: function() {
  var t1 = new H._PendingSendPortFinder([], new H._MessageTraverserVisitedMap());
  t1._PendingSendPortFinder$0();
  return t1;
}}

},

_JsSerializer: {"": "_Serializer;_nextFreeRefId,_visited",
  visitSendPort$1: function(x) {
    if (!!x.$is_NativeJsSendPort)
      return ["sendport", $globalState.currentManagerId, x._isolateId, x._receivePort.get$__isolate_helper$_id()];
    if (!!x.$is_WorkerSendPort)
      return ["sendport", x._workerId, x._isolateId, x._receivePortId];
    throw H.wrapException("Illegal underlying port " + H.S(x));
  }
},

_JsCopier: {"": "_Copier;_visited",
  visitSendPort$1: function(x) {
    if (!!x.$is_NativeJsSendPort)
      return new H._NativeJsSendPort(x._receivePort, x._isolateId);
    if (!!x.$is_WorkerSendPort)
      return new H._WorkerSendPort(x._workerId, x._receivePortId, x._isolateId);
    throw H.wrapException("Illegal underlying port " + H.S(x));
  }
},

_JsDeserializer: {"": "_Deserializer;_deserialized",
  deserializeSendPort$1: function(list) {
    var t1, managerId, isolateId, receivePortId, isolate, receivePort;
    t1 = J.getInterceptor$asx(list);
    managerId = t1.$index(list, 1);
    isolateId = t1.$index(list, 2);
    receivePortId = t1.$index(list, 3);
    if (J.$eq(managerId, $globalState.currentManagerId)) {
      t1 = $globalState.isolates;
      isolate = t1.$index(t1, isolateId);
      if (isolate == null)
        return;
      receivePort = isolate.lookup$1(receivePortId);
      if (receivePort == null)
        return;
      return new H._NativeJsSendPort(receivePort, isolateId);
    } else
      return new H._WorkerSendPort(managerId, receivePortId, isolateId);
  }
},

_JsVisitedMap: {"": "Object;tagged",
  $index: function(_, object) {
    return object.__MessageTraverser__attached_info__;
  },
  $indexSet: function(_, object, info) {
    this.tagged.push(object);
    object.__MessageTraverser__attached_info__ = info;
  },
  reset$0: function(_) {
    this.tagged = P.List_List(null, null);
  },
  cleanup$0: function() {
    var $length, i, t1;
    for ($length = this.tagged.length, i = 0; i < $length; ++i) {
      t1 = this.tagged;
      if (i >= t1.length)
        throw H.ioore(t1, i);
      t1[i].__MessageTraverser__attached_info__ = null;
    }
    this.tagged = null;
  }
},

_MessageTraverserVisitedMap: {"": "Object;",
  $index: function(_, object) {
    return;
  },
  $indexSet: function(_, object, info) {
  },
  reset$0: function(_) {
  },
  cleanup$0: function() {
  }
},

_MessageTraverser: {"": "Object;",
  traverse$1: function(x) {
    var result, t1;
    if (H._MessageTraverser_isPrimitive(x))
      return this.visitPrimitive$1(x);
    t1 = this._visited;
    t1.reset$0(t1);
    result = null;
    try {
      result = this._dispatch$1(x);
    } finally {
      this._visited.cleanup$0();
    }
    return result;
  },
  _dispatch$1: function(x) {
    var t1;
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return this.visitPrimitive$1(x);
    t1 = J.getInterceptor(x);
    if (typeof x === "object" && x !== null && (x.constructor === Array || !!t1.$isList))
      return this.visitList$1(x);
    if (typeof x === "object" && x !== null && !!t1.$isMap)
      return this.visitMap$1(x);
    if (typeof x === "object" && x !== null && !!t1.$isSendPort)
      return this.visitSendPort$1(x);
    return this.visitObject$1(x);
  },
  get$_dispatch: function() {
    return new H.BoundClosure$1(this, H._MessageTraverser.prototype._dispatch$1, null, "_dispatch$1");
  },
  visitObject$1: function(x) {
    throw H.wrapException("Message serialization: Illegal value " + H.S(x) + " passed");
  }
},

_Copier: {"": "_MessageTraverser;",
  visitPrimitive$1: function(x) {
    return x;
  },
  visitList$1: function(list) {
    var t1, copy, len, t2, i, t3;
    t1 = this._visited;
    copy = t1.$index(t1, list);
    if (copy != null)
      return copy;
    t1 = J.getInterceptor$asx(list);
    len = t1.get$length(list);
    copy = P.List_List(len, null);
    t2 = this._visited;
    t2.$indexSet(t2, list, copy);
    if (typeof len !== "number")
      throw H.iae(len);
    t2 = copy.length;
    i = 0;
    for (; i < len; ++i) {
      t3 = this._dispatch$1(t1.$index(list, i));
      if (i >= t2)
        throw H.ioore(copy, i);
      copy[i] = t3;
    }
    return copy;
  },
  visitMap$1: function(map) {
    var t1, t2;
    t1 = {};
    t2 = this._visited;
    t1.copy_0 = t2.$index(t2, map);
    t2 = t1.copy_0;
    if (t2 != null)
      return t2;
    t1.copy_0 = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
    t2 = this._visited;
    t2.$indexSet(t2, map, t1.copy_0);
    J.forEach$1$ax(map, new H._Copier_visitMap_closure(t1, this));
    return t1.copy_0;
  }
},

_Copier_visitMap_closure: {"": "Closure;box_0,this_1",
  call$2: function(key, val) {
    var t1 = this.this_1;
    J.$indexSet$ax(this.box_0.copy_0, t1._dispatch$1(key), t1._dispatch$1(val));
  },
  $is_args2: true
},

_Serializer: {"": "_MessageTraverser;",
  visitPrimitive$1: function(x) {
    return x;
  },
  visitList$1: function(list) {
    var t1, copyId, id;
    t1 = this._visited;
    copyId = t1.$index(t1, list);
    if (copyId != null)
      return ["ref", copyId];
    id = this._nextFreeRefId;
    this._nextFreeRefId = id + 1;
    t1 = this._visited;
    t1.$indexSet(t1, list, id);
    return ["list", id, this._serializeList$1(list)];
  },
  visitMap$1: function(map) {
    var t1, copyId, id;
    t1 = this._visited;
    copyId = t1.$index(t1, map);
    if (copyId != null)
      return ["ref", copyId];
    id = this._nextFreeRefId;
    this._nextFreeRefId = id + 1;
    t1 = this._visited;
    t1.$indexSet(t1, map, id);
    t1 = J.getInterceptor$x(map);
    return ["map", id, this._serializeList$1(J.toList$0$ax(t1.get$keys(map))), this._serializeList$1(J.toList$0$ax(t1.get$values(map)))];
  },
  _serializeList$1: function(list) {
    var t1, len, result, t2, i, t3;
    t1 = J.getInterceptor$asx(list);
    len = t1.get$length(list);
    result = P.List_List(len, null);
    if (typeof len !== "number")
      throw H.iae(len);
    t2 = result.length;
    i = 0;
    for (; i < len; ++i) {
      t3 = this._dispatch$1(t1.$index(list, i));
      if (i >= t2)
        throw H.ioore(result, i);
      result[i] = t3;
    }
    return result;
  }
},

_Deserializer: {"": "Object;",
  deserialize$1: function(x) {
    if (H._Deserializer_isPrimitive(x))
      return x;
    this._deserialized = P.HashMap_HashMap(null, null, null, null, null);
    return this._deserializeHelper$1(x);
  },
  _deserializeHelper$1: function(x) {
    var t1, id;
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return x;
    t1 = J.getInterceptor$asx(x);
    switch (t1.$index(x, 0)) {
      case "ref":
        id = t1.$index(x, 1);
        t1 = this._deserialized;
        return t1.$index(t1, id);
      case "list":
        return this._deserializeList$1(x);
      case "map":
        return this._deserializeMap$1(x);
      case "sendport":
        return this.deserializeSendPort$1(x);
      default:
        return this.deserializeObject$1(x);
    }
  },
  _deserializeList$1: function(x) {
    var t1, id, dartList, len, i;
    t1 = J.getInterceptor$asx(x);
    id = t1.$index(x, 1);
    dartList = t1.$index(x, 2);
    t1 = this._deserialized;
    t1.$indexSet(t1, id, dartList);
    t1 = J.getInterceptor$asx(dartList);
    len = t1.get$length(dartList);
    if (typeof len !== "number")
      throw H.iae(len);
    i = 0;
    for (; i < len; ++i)
      t1.$indexSet(dartList, i, this._deserializeHelper$1(t1.$index(dartList, i)));
    return dartList;
  },
  _deserializeMap$1: function(x) {
    var result, t1, id, t2, keys, values, len, i;
    result = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
    t1 = J.getInterceptor$asx(x);
    id = t1.$index(x, 1);
    t2 = this._deserialized;
    t2.$indexSet(t2, id, result);
    keys = t1.$index(x, 2);
    values = t1.$index(x, 3);
    t1 = J.getInterceptor$asx(keys);
    len = t1.get$length(keys);
    if (typeof len !== "number")
      throw H.iae(len);
    t2 = J.getInterceptor$asx(values);
    i = 0;
    for (; i < len; ++i)
      result.$indexSet(result, this._deserializeHelper$1(t1.$index(keys, i)), this._deserializeHelper$1(t2.$index(values, i)));
    return result;
  },
  deserializeObject$1: function(x) {
    throw H.wrapException("Unexpected serialized object");
  }
},

TimerImpl: {"": "Object;_once,_inEventLoop,_handle",
  TimerImpl$2: function(milliseconds, callback) {
    var t1, t2;
    if (milliseconds === 0)
      t1 = $.get$globalThis().setTimeout == null || $globalState.isWorker === true;
    else
      t1 = false;
    if (t1) {
      this._handle = 1;
      t1 = $globalState.topEventLoop;
      t2 = $globalState.currentContext;
      t1 = t1.events;
      t1._add$1(t1, new H._IsolateEvent(t2, new H.TimerImpl_internalCallback(this, callback), "timer"));
      this._inEventLoop = true;
    } else if ($.get$globalThis().setTimeout != null) {
      t1 = $globalState.topEventLoop;
      t1.activeTimerCount = t1.activeTimerCount + 1;
      this._handle = $.get$globalThis().setTimeout(H.convertDartClosureToJS(new H.TimerImpl_internalCallback0(this, callback), 0), milliseconds);
    } else
      throw H.wrapException(P.UnsupportedError$("Timer greater than 0."));
  },
  static: {
TimerImpl$: function(milliseconds, callback) {
  var t1 = new H.TimerImpl(true, false, null);
  t1.TimerImpl$2(milliseconds, callback);
  return t1;
}}

},

TimerImpl_internalCallback: {"": "Closure;this_0,callback_1",
  call$0: function() {
    this.this_0._handle = null;
    this.callback_1.call$0();
  }
},

TimerImpl_internalCallback0: {"": "Closure;this_2,callback_3",
  call$0: function() {
    this.this_2._handle = null;
    var t1 = $globalState.topEventLoop;
    t1.activeTimerCount = t1.activeTimerCount - 1;
    this.callback_3.call$0();
  }
}}],
["_js_helper", "dart:_js_helper", , H, {
isJsIndexable: function(object, record) {
  var result, t1;
  if (record != null) {
    result = record.x;
    if (result != null)
      return result;
  }
  t1 = J.getInterceptor(object);
  return typeof object === "object" && object !== null && !!t1.$isJavaScriptIndexingBehavior;
},

S: function(value) {
  var res;
  if (typeof value === "string")
    return value;
  if (typeof value === "number") {
    if (value !== 0)
      return "" + value;
  } else if (true === value)
    return "true";
  else if (false === value)
    return "false";
  else if (value == null)
    return "null";
  res = J.toString$0(value);
  if (typeof res !== "string")
    throw H.wrapException(P.ArgumentError$(value));
  return res;
},

Primitives_initializeStatics: function(id) {
  $.Primitives_mirrorFunctionCacheName = $.Primitives_mirrorFunctionCacheName + ("_" + H.S(id));
  $.Primitives_mirrorInvokeCacheName = $.Primitives_mirrorInvokeCacheName + ("_" + H.S(id));
},

Primitives_objectHashCode: function(object) {
  var hash = object.$identityHash;
  if (hash == null) {
    hash = Math.random() * 0x3fffffff | 0;
    object.$identityHash = hash;
  }
  return hash;
},

Primitives_objectTypeName: function(object) {
  var $name, decompiled;
  $name = C.JS_CONST_86y(J.getInterceptor(object));
  if ($name === "Object") {
    decompiled = String(object.constructor).match(/^\s*function\s*(\S*)\s*\(/)[1];
    if (typeof decompiled === "string")
      $name = decompiled;
  }
  if (J.getInterceptor$s($name).codeUnitAt$1($name, 0) === 36)
    $name = C.JSString_methods.substring$1($name, 1);
  return $name + H.joinArguments(H.getRuntimeTypeInfo(object), 0, null);
},

Primitives_objectToString: function(object) {
  return "Instance of '" + H.Primitives_objectTypeName(object) + "'";
},

Primitives_newFixedList: function($length) {
  var result = new Array($length);
  result.fixed$length = true;
  return result;
},

Primitives__fromCharCodeApply: function(array) {
  var end, t1, result, i, subarray, t2;
  end = array.length;
  for (t1 = end <= 500, result = "", i = 0; i < end; i += 500) {
    if (t1)
      subarray = array;
    else {
      t2 = i + 500;
      t2 = t2 < end ? t2 : end;
      subarray = array.slice(i, t2);
    }
    result += String.fromCharCode.apply(null, subarray);
  }
  return result;
},

Primitives_stringFromCodePoints: function(codePoints) {
  var a, $arguments, t1, t2, i;
  a = [];
  a.$builtinTypeInfo = [J.JSInt];
  $arguments = H.substitute(codePoints.$asJSArray, H.getRuntimeTypeInfo(codePoints));
  t1 = $arguments == null ? null : $arguments[0];
  t2 = new H.ListIterator(codePoints, codePoints.length, 0, null);
  t2.$builtinTypeInfo = [t1];
  for (; t2.moveNext$0();) {
    i = t2._current;
    if (typeof i !== "number" || Math.floor(i) !== i)
      throw H.wrapException(P.ArgumentError$(i));
    if (i <= 65535)
      a.push(i);
    else if (i <= 1114111) {
      a.push(55296 + (C.JSInt_methods.$shr(i - 65536, 10) & 1023));
      a.push(56320 + (i & 1023));
    } else
      throw H.wrapException(P.ArgumentError$(i));
  }
  return H.Primitives__fromCharCodeApply(a);
},

Primitives_stringFromCharCodes: function(charCodes) {
  var t1, i;
  for (t1 = new H.ListIterator(charCodes, charCodes.length, 0, null), H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(charCodes, "JSArray", 0)]); t1.moveNext$0();) {
    i = t1._current;
    if (typeof i !== "number" || Math.floor(i) !== i)
      throw H.wrapException(P.ArgumentError$(i));
    if (i < 0)
      throw H.wrapException(P.ArgumentError$(i));
    if (i > 65535)
      return H.Primitives_stringFromCodePoints(charCodes);
  }
  return H.Primitives__fromCharCodeApply(charCodes);
},

Primitives_lazyAsJsDate: function(receiver) {
  if (receiver.date === void 0)
    receiver.date = new Date(receiver.millisecondsSinceEpoch);
  return receiver.date;
},

Primitives_getYear: function(receiver) {
  return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCFullYear() + 0 : H.Primitives_lazyAsJsDate(receiver).getFullYear() + 0;
},

Primitives_getMonth: function(receiver) {
  return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCMonth() + 1 : H.Primitives_lazyAsJsDate(receiver).getMonth() + 1;
},

Primitives_getDay: function(receiver) {
  return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCDate() + 0 : H.Primitives_lazyAsJsDate(receiver).getDate() + 0;
},

Primitives_getHours: function(receiver) {
  return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCHours() + 0 : H.Primitives_lazyAsJsDate(receiver).getHours() + 0;
},

Primitives_getMinutes: function(receiver) {
  return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCMinutes() + 0 : H.Primitives_lazyAsJsDate(receiver).getMinutes() + 0;
},

Primitives_getSeconds: function(receiver) {
  return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCSeconds() + 0 : H.Primitives_lazyAsJsDate(receiver).getSeconds() + 0;
},

Primitives_getMilliseconds: function(receiver) {
  return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCMilliseconds() + 0 : H.Primitives_lazyAsJsDate(receiver).getMilliseconds() + 0;
},

Primitives_getProperty: function(object, key) {
  if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
    throw H.wrapException(new P.ArgumentError(object));
  return object[key];
},

Primitives_setProperty: function(object, key, value) {
  if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
    throw H.wrapException(new P.ArgumentError(object));
  object[key] = value;
},

iae: function(argument) {
  throw H.wrapException(P.ArgumentError$(argument));
},

ioore: function(receiver, index) {
  if (receiver == null)
    J.get$length$asx(receiver);
  if (typeof index !== "number" || Math.floor(index) !== index)
    H.iae(index);
  throw H.wrapException(P.RangeError$value(index));
},

wrapException: function(ex) {
  var wrapper;
  if (ex == null)
    ex = new P.NullThrownError();
  wrapper = new Error();
  wrapper.dartException = ex;
  if ("defineProperty" in Object) {
    Object.defineProperty(wrapper, "message", { get: H.toStringWrapper$closure.call$0 });
    wrapper.name = "";
  } else
    wrapper.toString = H.toStringWrapper$closure.call$0;
  return wrapper;
},

toStringWrapper: function() {
  return J.toString$0(this.dartException);
},

throwExpression: function(ex) {
  throw H.wrapException(ex);
},

unwrapException: function(ex) {
  var t1, message, number, ieErrorCode, t2, t3, t4, nullLiteralCall, t5, t6, t7, t8, t9, match;
  t1 = new H.unwrapException_saveStackTrace(ex);
  if (ex == null)
    return;
  if (typeof ex !== "object")
    return ex;
  if ("dartException" in ex)
    return t1.call$1(ex.dartException);
  else if (!("message" in ex))
    return ex;
  message = ex.message;
  if ("number" in ex && typeof ex.number == "number") {
    number = ex.number;
    ieErrorCode = number & 65535;
    if ((C.JSInt_methods.$shr(number, 16) & 8191) === 10)
      switch (ieErrorCode) {
        case 438:
          return t1.call$1(H.JsNoSuchMethodError$(H.S(message) + " (Error " + ieErrorCode + ")", null));
        case 445:
        case 5007:
          t2 = H.S(message) + " (Error " + ieErrorCode + ")";
          return t1.call$1(new H.NullError(t2, null));
        default:
      }
  }
  if (ex instanceof TypeError) {
    t2 = $.get$TypeErrorDecoder_noSuchMethodPattern();
    t3 = $.get$TypeErrorDecoder_notClosurePattern();
    t4 = $.get$TypeErrorDecoder_nullCallPattern();
    nullLiteralCall = $.get$TypeErrorDecoder_nullLiteralCallPattern();
    t5 = $.get$TypeErrorDecoder_undefinedCallPattern();
    t6 = $.get$TypeErrorDecoder_undefinedLiteralCallPattern();
    t7 = $.get$TypeErrorDecoder_nullPropertyPattern();
    $.get$TypeErrorDecoder_nullLiteralPropertyPattern();
    t8 = $.get$TypeErrorDecoder_undefinedPropertyPattern();
    t9 = $.get$TypeErrorDecoder_undefinedLiteralPropertyPattern();
    match = t2.matchTypeError$1(message);
    if (match != null)
      return t1.call$1(H.JsNoSuchMethodError$(message, match));
    else {
      match = t3.matchTypeError$1(message);
      if (match != null) {
        match.method = "call";
        return t1.call$1(H.JsNoSuchMethodError$(message, match));
      } else {
        match = t4.matchTypeError$1(message);
        if (match == null) {
          match = nullLiteralCall.matchTypeError$1(message);
          if (match == null) {
            match = t5.matchTypeError$1(message);
            if (match == null) {
              match = t6.matchTypeError$1(message);
              if (match == null) {
                match = t7.matchTypeError$1(message);
                if (match == null) {
                  match = nullLiteralCall.matchTypeError$1(message);
                  if (match == null) {
                    match = t8.matchTypeError$1(message);
                    if (match == null) {
                      match = t9.matchTypeError$1(message);
                      t2 = match != null;
                    } else
                      t2 = true;
                  } else
                    t2 = true;
                } else
                  t2 = true;
              } else
                t2 = true;
            } else
              t2 = true;
          } else
            t2 = true;
        } else
          t2 = true;
        if (t2) {
          t2 = match == null ? null : match.method;
          return t1.call$1(new H.NullError(message, t2));
        }
      }
    }
    t2 = typeof message === "string" ? message : "";
    return t1.call$1(new H.UnknownJsTypeError(t2));
  }
  if (ex instanceof RangeError) {
    if (typeof message === "string" && message.indexOf("call stack") !== -1)
      return new P.StackOverflowError();
    return t1.call$1(new P.ArgumentError(null));
  }
  if (typeof InternalError == "function" && ex instanceof InternalError)
    if (typeof message === "string" && message === "too much recursion")
      return new P.StackOverflowError();
  return ex;
},

objectHashCode: function(object) {
  if (object == null || typeof object != 'object')
    return J.get$hashCode$(object);
  else
    return H.Primitives_objectHashCode(object);
},

fillLiteralMap: function(keyValuePairs, result) {
  var $length, index, index0, index1;
  $length = keyValuePairs.length;
  for (index = 0; index < $length; index = index1) {
    index0 = index + 1;
    index1 = index0 + 1;
    result.$indexSet(result, keyValuePairs[index], keyValuePairs[index0]);
  }
  return result;
},

invokeClosure: function(closure, isolate, numberOfArguments, arg1, arg2, arg3, arg4) {
  var t1 = J.getInterceptor(numberOfArguments);
  if (t1.$eq(numberOfArguments, 0))
    return H._callInIsolate(isolate, new H.invokeClosure_closure(closure));
  else if (t1.$eq(numberOfArguments, 1))
    return H._callInIsolate(isolate, new H.invokeClosure_closure0(closure, arg1));
  else if (t1.$eq(numberOfArguments, 2))
    return H._callInIsolate(isolate, new H.invokeClosure_closure1(closure, arg1, arg2));
  else if (t1.$eq(numberOfArguments, 3))
    return H._callInIsolate(isolate, new H.invokeClosure_closure2(closure, arg1, arg2, arg3));
  else if (t1.$eq(numberOfArguments, 4))
    return H._callInIsolate(isolate, new H.invokeClosure_closure3(closure, arg1, arg2, arg3, arg4));
  else
    throw H.wrapException(P.Exception_Exception("Unsupported number of arguments for wrapped closure"));
},

convertDartClosureToJS: function(closure, arity) {
  var $function;
  if (closure == null)
    return;
  $function = closure.$identity;
  if (!!$function)
    return $function;
  $function = (function(closure, arity, context, invoke) {  return function(a1, a2, a3, a4) {     return invoke(closure, context, arity, a1, a2, a3, a4);  };})(closure,arity,$globalState.currentContext,H.invokeClosure$closure.call$7);
  closure.$identity = $function;
  return $function;
},

propertyTypeCastError: function(value, property) {
  var t1 = J.getInterceptor$asx(property);
  throw H.wrapException(H.CastErrorImplementation$(H.Primitives_objectTypeName(value), t1.substring$2(property, 3, t1.get$length(property))));
},

interceptedTypeCast: function(value, property) {
  var t1;
  if (value != null)
    t1 = typeof value === "object" && J.getInterceptor(value)[property];
  else
    t1 = true;
  if (t1)
    return value;
  H.propertyTypeCastError(value, property);
},

throwCyclicInit: function(staticName) {
  throw H.wrapException(P.CyclicInitializationError$("Cyclic initialization for static " + H.S(staticName)));
},

createRuntimeType: function($name) {
  return new H.TypeImpl($name, null);
},

setRuntimeTypeInfo: function(target, typeInfo) {
  if (target != null)
    target.$builtinTypeInfo = typeInfo;
  return target;
},

getRuntimeTypeInfo: function(target) {
  if (target == null)
    return;
  return target.$builtinTypeInfo;
},

getRuntimeTypeArguments: function(target, substitutionName) {
  return H.substitute(target["$as" + H.S(substitutionName)], H.getRuntimeTypeInfo(target));
},

getRuntimeTypeArgument: function(target, substitutionName, index) {
  var $arguments = H.getRuntimeTypeArguments(target, substitutionName);
  return $arguments == null ? null : $arguments[index];
},

getRuntimeTypeAsString: function(runtimeType, onTypeVariable) {
  return runtimeType[0].builtin$cls + H.joinArguments(runtimeType, 1, onTypeVariable);
},

runtimeTypeToString: function(type, onTypeVariable) {
  if (type == null)
    return "dynamic";
  else if (typeof type === "object" && type !== null && type.constructor === Array)
    return H.getRuntimeTypeAsString(type, onTypeVariable);
  else if (typeof type == "function")
    return type.builtin$cls;
  else if (typeof type === "number" && Math.floor(type) === type)
    return C.JSInt_methods.toString$0(type);
  else
    return;
},

joinArguments: function(types, startIndex, onTypeVariable) {
  var buffer, index, firstArgument, allDynamic, argument, str;
  if (types == null)
    return "";
  buffer = P.StringBuffer$("");
  for (index = startIndex, firstArgument = true, allDynamic = true; index < types.length; ++index) {
    if (firstArgument)
      firstArgument = false;
    else
      buffer._contents = buffer._contents + ", ";
    argument = types[index];
    if (argument != null)
      allDynamic = false;
    str = H.runtimeTypeToString(argument, onTypeVariable);
    str = typeof str === "string" ? str : H.S(str);
    buffer._contents = buffer._contents + str;
  }
  return allDynamic ? "" : "<" + H.S(buffer) + ">";
},

substitute: function(substitution, $arguments) {
  if (typeof substitution === "object" && substitution !== null && substitution.constructor === Array)
    $arguments = substitution;
  else if (typeof substitution == "function") {
    substitution = H.invokeOn(substitution, null, $arguments);
    if (typeof substitution === "object" && substitution !== null && substitution.constructor === Array)
      $arguments = substitution;
    else if (typeof substitution == "function")
      $arguments = H.invokeOn(substitution, null, $arguments);
  }
  return $arguments;
},

checkSubtype: function(object, isField, checks, asField) {
  var $arguments, interceptor;
  if (object == null)
    return false;
  $arguments = H.getRuntimeTypeInfo(object);
  interceptor = J.getInterceptor(object);
  if (interceptor[isField] == null)
    return false;
  return H.areSubtypes(H.substitute(interceptor[asField], $arguments), checks);
},

areSubtypes: function(s, t) {
  var len, i;
  if (s == null || t == null)
    return true;
  len = s.length;
  for (i = 0; i < len; ++i)
    if (!H.isSubtype(s[i], t[i]))
      return false;
  return true;
},

computeSignature: function(signature, context, contextName) {
  return H.invokeOn(signature, context, H.getRuntimeTypeArguments(context, contextName));
},

isSubtype: function(s, t) {
  var targetSignatureFunction, t1, typeOfS, t2, typeOfT, substitution;
  if (s === t)
    return true;
  if (s == null || t == null)
    return true;
  if ("func" in t) {
    if (!("func" in s)) {
      if ("$is_" + H.S(t.func) in s)
        return true;
      targetSignatureFunction = s.$signature;
      if (targetSignatureFunction == null)
        return false;
      s = targetSignatureFunction.apply(s, null);
    }
    return H.isFunctionSubtype(s, t);
  }
  if (t.builtin$cls === "Function" && "func" in s)
    return true;
  t1 = typeof s === "object" && s !== null && s.constructor === Array;
  typeOfS = t1 ? s[0] : s;
  t2 = typeof t === "object" && t !== null && t.constructor === Array;
  typeOfT = t2 ? t[0] : t;
  if (!("$is" + H.S(H.runtimeTypeToString(typeOfT, null)) in typeOfS))
    return false;
  substitution = typeOfT !== typeOfS ? typeOfS["$as" + H.S(H.runtimeTypeToString(typeOfT, null))] : null;
  if (!t1 && substitution == null || !t2)
    return true;
  t1 = t1 ? s.slice(1) : null;
  t2 = t2 ? t.slice(1) : null;
  return H.areSubtypes(H.substitute(substitution, t1), t2);
},

isAssignable: function(s, t) {
  return H.isSubtype(s, t) || H.isSubtype(t, s);
},

areAssignable: function(s, t, allowShorter) {
  var sLength, tLength, i, t1, t2;
  if (t == null && s == null)
    return true;
  if (t == null)
    return allowShorter;
  if (s == null)
    return false;
  sLength = s.length;
  tLength = t.length;
  if (allowShorter) {
    if (sLength < tLength)
      return false;
  } else if (sLength !== tLength)
    return false;
  for (i = 0; i < tLength; ++i) {
    t1 = s[i];
    t2 = t[i];
    if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
      return false;
  }
  return true;
},

areAssignableMaps: function(s, t) {
  if (t == null)
    return true;
  if (s == null)
    return false;
  return      function (t, s, isAssignable) {
       for (var $name in t) {
         if (!s.hasOwnProperty($name)) {
           return false;
         }
         var tType = t[$name];
         var sType = s[$name];
         if (!isAssignable.call$2(sType, tType)) {
          return false;
         }
       }
       return true;
     }(t, s, H.isAssignable$closure)
  ;
},

isFunctionSubtype: function(s, t) {
  var sReturnType, tReturnType, sParameterTypes, tParameterTypes, sOptionalParameterTypes, tOptionalParameterTypes, sParametersLen, tParametersLen, sOptionalParametersLen, tOptionalParametersLen, pos, t1, t2, tPos, sPos;
  if (!("func" in s))
    return false;
  if ("void" in s) {
    if (!("void" in t) && "ret" in t)
      return false;
  } else if (!("void" in t)) {
    sReturnType = s.ret;
    tReturnType = t.ret;
    if (!(H.isSubtype(sReturnType, tReturnType) || H.isSubtype(tReturnType, sReturnType)))
      return false;
  }
  sParameterTypes = s.args;
  tParameterTypes = t.args;
  sOptionalParameterTypes = s.opt;
  tOptionalParameterTypes = t.opt;
  sParametersLen = sParameterTypes != null ? sParameterTypes.length : 0;
  tParametersLen = tParameterTypes != null ? tParameterTypes.length : 0;
  sOptionalParametersLen = sOptionalParameterTypes != null ? sOptionalParameterTypes.length : 0;
  tOptionalParametersLen = tOptionalParameterTypes != null ? tOptionalParameterTypes.length : 0;
  if (sParametersLen > tParametersLen)
    return false;
  if (sParametersLen + sOptionalParametersLen < tParametersLen + tOptionalParametersLen)
    return false;
  if (sParametersLen === tParametersLen) {
    if (!H.areAssignable(sParameterTypes, tParameterTypes, false))
      return false;
    if (!H.areAssignable(sOptionalParameterTypes, tOptionalParameterTypes, true))
      return false;
  } else {
    for (pos = 0; pos < sParametersLen; ++pos) {
      t1 = sParameterTypes[pos];
      t2 = tParameterTypes[pos];
      if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
        return false;
    }
    for (tPos = pos, sPos = 0; tPos < tParametersLen; ++sPos, ++tPos) {
      t1 = sOptionalParameterTypes[sPos];
      t2 = tParameterTypes[tPos];
      if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
        return false;
    }
    for (sPos = 0; tPos < tOptionalParametersLen; ++sPos, ++tPos) {
      t1 = tOptionalParameterTypes[sPos];
      t2 = tOptionalParameterTypes[tPos];
      if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
        return false;
    }
  }
  return H.areAssignableMaps(s.named, t.named);
},

invokeOn: function($function, receiver, $arguments) {
  return $function.apply(receiver, $arguments);
},

toStringForNativeObject: function(obj) {
  var t1 = $.getTagFunction;
  return "Instance of " + (t1 == null ? "<Unknown>" : t1.call$1(obj));
},

hashCodeForNativeObject: function(object) {
  return H.Primitives_objectHashCode(object);
},

defineProperty: function(obj, property, value) {
  Object.defineProperty(obj, property, {value: value, enumerable: false, writable: true, configurable: true});
},

lookupAndCacheInterceptor: function(obj) {
  var tag, record, interceptor, interceptorClass, mark, t1;
  tag = $.getTagFunction.call$1(obj);
  record = $.dispatchRecordsForInstanceTags[tag];
  if (record != null) {
    Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
    return record.i;
  }
  interceptor = $.interceptorsForUncacheableTags[tag];
  if (interceptor != null)
    return interceptor;
  interceptorClass = init.interceptorsByTag[tag];
  if (interceptorClass == null) {
    tag = $.alternateTagFunction.call$2(obj, tag);
    if (tag != null) {
      record = $.dispatchRecordsForInstanceTags[tag];
      if (record != null) {
        Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        return record.i;
      }
      interceptor = $.interceptorsForUncacheableTags[tag];
      if (interceptor != null)
        return interceptor;
      interceptorClass = init.interceptorsByTag[tag];
    }
  }
  if (interceptorClass == null)
    return;
  interceptor = interceptorClass.prototype;
  mark = tag[0];
  if (mark === "!") {
    record = H.makeLeafDispatchRecord(interceptor);
    $.dispatchRecordsForInstanceTags[tag] = record;
    Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
    return record.i;
  }
  if (mark === "~") {
    $.interceptorsForUncacheableTags[tag] = interceptor;
    return interceptor;
  }
  if (mark === "-") {
    t1 = H.makeLeafDispatchRecord(interceptor);
    Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
    return t1.i;
  }
  if (mark === "+")
    return H.patchInteriorProto(obj, interceptor);
  if (mark === "*")
    throw H.wrapException(P.UnimplementedError$(tag));
  if (init.leafTags[tag] === true) {
    t1 = H.makeLeafDispatchRecord(interceptor);
    Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
    return t1.i;
  } else
    return H.patchInteriorProto(obj, interceptor);
},

patchInteriorProto: function(obj, interceptor) {
  var proto, record;
  proto = Object.getPrototypeOf(obj);
  record = J.makeDispatchRecord(interceptor, proto, null, null);
  Object.defineProperty(proto, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
  return interceptor;
},

makeLeafDispatchRecord: function(interceptor) {
  return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
},

makeDefaultDispatchRecord: function(tag, interceptorClass, proto) {
  var interceptor = interceptorClass.prototype;
  if (init.leafTags[tag] === true)
    return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
  else
    return J.makeDispatchRecord(interceptor, proto, null, null);
},

initNativeDispatch: function() {
  if (true === $.initNativeDispatchFlag)
    return;
  $.initNativeDispatchFlag = true;
  H.initNativeDispatchContinue();
},

initNativeDispatchContinue: function() {
  var map, tags, i, tag, proto, record, interceptorClass;
  $.dispatchRecordsForInstanceTags = Object.create(null);
  $.interceptorsForUncacheableTags = Object.create(null);
  H.initHooks();
  map = init.interceptorsByTag;
  tags = Object.getOwnPropertyNames(map);
  if (typeof window != "undefined") {
    window;
    for (i = 0; i < tags.length; ++i) {
      tag = tags[i];
      proto = $.prototypeForTagFunction.call$1(tag);
      if (proto != null) {
        record = H.makeDefaultDispatchRecord(tag, map[tag], proto);
        if (record != null)
          Object.defineProperty(proto, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
      }
    }
  }
  for (i = 0; i < tags.length; ++i) {
    tag = tags[i];
    if (/^[A-Za-z_]/.test(tag)) {
      interceptorClass = map[tag];
      map["!" + tag] = interceptorClass;
      map["~" + tag] = interceptorClass;
      map["-" + tag] = interceptorClass;
      map["+" + tag] = interceptorClass;
      map["*" + tag] = interceptorClass;
    }
  }
},

initHooks: function() {
  var hooks, transformers, i, transformer, getTag, getUnknownTag, prototypeForTag;
  hooks = C.JS_CONST_TtD();
  hooks = H.applyHooksTransformer(C.JS_CONST_0, H.applyHooksTransformer(C.JS_CONST_Fs4, H.applyHooksTransformer(C.JS_CONST_Fs4, H.applyHooksTransformer(C.JS_CONST_rD3, H.applyHooksTransformer(C.JS_CONST_6qb, H.applyHooksTransformer(C.JS_CONST_Cbr(C.JS_CONST_86y), hooks))))));
  if (typeof dartNativeDispatchHooksTransformer != "undefined") {
    transformers = dartNativeDispatchHooksTransformer;
    if (typeof transformers == "function")
      transformers = [transformers];
    if (transformers.constructor == Array)
      for (i = 0; i < transformers.length; ++i) {
        transformer = transformers[i];
        if (typeof transformer == "function")
          hooks = transformer(hooks) || hooks;
      }
  }
  getTag = hooks.getTag;
  getUnknownTag = hooks.getUnknownTag;
  prototypeForTag = hooks.prototypeForTag;
  $.getTagFunction = new H.initHooks_closure(getTag);
  $.alternateTagFunction = new H.initHooks_closure0(getUnknownTag);
  $.prototypeForTagFunction = new H.initHooks_closure1(prototypeForTag);
},

applyHooksTransformer: function(transformer, hooks) {
  return transformer(hooks) || hooks;
},

stringContainsUnchecked: function(receiver, other, startIndex) {
  return C.JSString_methods.indexOf$2(receiver, other, startIndex) !== -1;
},

TypeErrorDecoder: {"": "Object;_pattern,_arguments,_argumentsExpr,_expr,_method,_receiver",
  matchTypeError$1: function(message) {
    var match, result, t1;
    match = new RegExp(this._pattern).exec(message);
    if (match == null)
      return;
    result = {};
    t1 = this._arguments;
    if (t1 !== -1)
      result.arguments = match[t1 + 1];
    t1 = this._argumentsExpr;
    if (t1 !== -1)
      result.argumentsExpr = match[t1 + 1];
    t1 = this._expr;
    if (t1 !== -1)
      result.expr = match[t1 + 1];
    t1 = this._method;
    if (t1 !== -1)
      result.method = match[t1 + 1];
    t1 = this._receiver;
    if (t1 !== -1)
      result.receiver = match[t1 + 1];
    return result;
  },
  static: {
"": "TypeErrorDecoder_noSuchMethodPattern,TypeErrorDecoder_notClosurePattern,TypeErrorDecoder_nullCallPattern,TypeErrorDecoder_nullLiteralCallPattern,TypeErrorDecoder_undefinedCallPattern,TypeErrorDecoder_undefinedLiteralCallPattern,TypeErrorDecoder_nullPropertyPattern,TypeErrorDecoder_nullLiteralPropertyPattern,TypeErrorDecoder_undefinedPropertyPattern,TypeErrorDecoder_undefinedLiteralPropertyPattern",
TypeErrorDecoder_extractPattern: function(message) {
  var match, $arguments, argumentsExpr, expr, method, receiver;
  message = message.replace(String({}), '$receiver$').replace(new RegExp("[[\\]{}()*+?.\\\\^$|]", 'g'), '\\$&');
  match = message.match(/\\\$[a-zA-Z]+\\\$/g);
  if (match == null)
    match = [];
  $arguments = match.indexOf("\\$arguments\\$");
  argumentsExpr = match.indexOf("\\$argumentsExpr\\$");
  expr = match.indexOf("\\$expr\\$");
  method = match.indexOf("\\$method\\$");
  receiver = match.indexOf("\\$receiver\\$");
  return new H.TypeErrorDecoder(message.replace('\\$arguments\\$', '((?:x|[^x])*)').replace('\\$argumentsExpr\\$', '((?:x|[^x])*)').replace('\\$expr\\$', '((?:x|[^x])*)').replace('\\$method\\$', '((?:x|[^x])*)').replace('\\$receiver\\$', '((?:x|[^x])*)'), $arguments, argumentsExpr, expr, method, receiver);
},

TypeErrorDecoder_provokeCallErrorOn: function(expression) {
  return function($expr$) {
  var $argumentsExpr$ = '$arguments$'
  try {
    $expr$.$method$($argumentsExpr$);
  } catch (e) {
    return e.message;
  }
}(expression);
},

TypeErrorDecoder_provokeCallErrorOnNull: function() {
  return function() {
  var $argumentsExpr$ = '$arguments$'
  try {
    null.$method$($argumentsExpr$);
  } catch (e) {
    return e.message;
  }
}();
},

TypeErrorDecoder_provokeCallErrorOnUndefined: function() {
  return function() {
  var $argumentsExpr$ = '$arguments$'
  try {
    (void 0).$method$($argumentsExpr$);
  } catch (e) {
    return e.message;
  }
}();
},

TypeErrorDecoder_provokePropertyErrorOn: function(expression) {
  return function($expr$) {
  try {
    $expr$.$method$;
  } catch (e) {
    return e.message;
  }
}(expression);
},

TypeErrorDecoder_provokePropertyErrorOnNull: function() {
  return function() {
  try {
    null.$method$;
  } catch (e) {
    return e.message;
  }
}();
},

TypeErrorDecoder_provokePropertyErrorOnUndefined: function() {
  return function() {
  try {
    (void 0).$method$;
  } catch (e) {
    return e.message;
  }
}();
}}

},

NullError: {"": "Error;_message,_method",
  toString$0: function(_) {
    var t1 = this._method;
    if (t1 == null)
      return "NullError: " + H.S(this._message);
    return "NullError: Cannot call \"" + H.S(t1) + "\" on null";
  },
  $isError: true
},

JsNoSuchMethodError: {"": "Error;_message,_method,_receiver",
  toString$0: function(_) {
    var t1, t2;
    t1 = this._method;
    if (t1 == null)
      return "NoSuchMethodError: " + H.S(this._message);
    t2 = this._receiver;
    if (t2 == null)
      return "NoSuchMethodError: Cannot call \"" + t1 + "\" (" + H.S(this._message) + ")";
    return "NoSuchMethodError: Cannot call \"" + t1 + "\" on \"" + t2 + "\" (" + H.S(this._message) + ")";
  },
  $isError: true,
  static: {
JsNoSuchMethodError$: function(_message, match) {
  var t1, t2;
  t1 = match == null;
  t2 = t1 ? null : match.method;
  t1 = t1 ? null : match.receiver;
  return new H.JsNoSuchMethodError(_message, t2, t1);
}}

},

UnknownJsTypeError: {"": "Error;_message",
  toString$0: function(_) {
    var t1 = this._message;
    return C.JSString_methods.get$isEmpty(t1) ? "Error" : "Error: " + t1;
  }
},

unwrapException_saveStackTrace: {"": "Closure;ex_0",
  call$1: function(error) {
    var t1 = J.getInterceptor(error);
    if (typeof error === "object" && error !== null && !!t1.$isError)
      if (error.$thrownJsError == null)
        error.$thrownJsError = this.ex_0;
    return error;
  },
  $is_args1: true
},

_StackTrace: {"": "Object;_exception,_trace",
  toString$0: function(_) {
    var t1, trace;
    t1 = this._trace;
    if (t1 != null)
      return t1;
    t1 = this._exception;
    trace = typeof t1 === "object" ? t1.stack : null;
    t1 = trace == null ? "" : trace;
    this._trace = t1;
    return t1;
  }
},

invokeClosure_closure: {"": "Closure;closure_0",
  call$0: function() {
    return this.closure_0.call$0();
  }
},

invokeClosure_closure0: {"": "Closure;closure_1,arg1_2",
  call$0: function() {
    return this.closure_1.call$1(this.arg1_2);
  }
},

invokeClosure_closure1: {"": "Closure;closure_3,arg1_4,arg2_5",
  call$0: function() {
    return this.closure_3.call$2(this.arg1_4, this.arg2_5);
  }
},

invokeClosure_closure2: {"": "Closure;closure_6,arg1_7,arg2_8,arg3_9",
  call$0: function() {
    return this.closure_6.call$3(this.arg1_7, this.arg2_8, this.arg3_9);
  }
},

invokeClosure_closure3: {"": "Closure;closure_10,arg1_11,arg2_12,arg3_13,arg4_14",
  call$0: function() {
    return this.closure_10.call$4(this.arg1_11, this.arg2_12, this.arg3_13, this.arg4_14);
  }
},

Closure: {"": "Object;",
  toString$0: function(_) {
    return "Closure";
  }
},

BoundClosure: {"": "Closure;_self,__js_helper$_target,_receiver,__js_helper$_name",
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    if (this === other)
      return true;
    t1 = J.getInterceptor(other);
    if (typeof other !== "object" || other === null || !t1.$isBoundClosure)
      return false;
    return this._self === other._self && this.__js_helper$_target === other.__js_helper$_target && this._receiver === other._receiver;
  },
  get$hashCode: function(_) {
    var t1, receiverHashCode;
    t1 = this._receiver;
    if (t1 == null)
      receiverHashCode = H.Primitives_objectHashCode(this._self);
    else
      receiverHashCode = typeof t1 !== "object" ? J.get$hashCode$(t1) : H.Primitives_objectHashCode(t1);
    return (receiverHashCode ^ H.Primitives_objectHashCode(this.__js_helper$_target)) >>> 0;
  },
  $isBoundClosure: true
},

CastErrorImplementation: {"": "Error;message",
  toString$0: function(_) {
    return this.message;
  },
  $isError: true,
  static: {
CastErrorImplementation$: function(actualType, expectedType) {
  return new H.CastErrorImplementation("CastError: Casting value of type " + actualType + " to incompatible type " + H.S(expectedType));
}}

},

TypeImpl: {"": "Object;_typeName,_unmangledName",
  toString$0: function(_) {
    var t1, unmangledName, unmangledName0;
    t1 = this._unmangledName;
    if (t1 != null)
      return t1;
    unmangledName = this._typeName;
    unmangledName0 = H.unmangleGlobalNameIfPreservedAnyways(unmangledName);
    unmangledName = unmangledName0 == null ? unmangledName : unmangledName0;
    this._unmangledName = unmangledName;
    return unmangledName;
  },
  get$hashCode: function(_) {
    return J.get$hashCode$(this._typeName);
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = J.getInterceptor(other);
    return typeof other === "object" && other !== null && !!t1.$isTypeImpl && J.$eq(this._typeName, other._typeName);
  },
  $isTypeImpl: true
},

initHooks_closure: {"": "Closure;getTag_0",
  call$1: function(o) {
    return this.getTag_0(o);
  },
  $is_args1: true
},

initHooks_closure0: {"": "Closure;getUnknownTag_1",
  call$2: function(o, tag) {
    return this.getUnknownTag_1(o, tag);
  },
  $is_args2: true
},

initHooks_closure1: {"": "Closure;prototypeForTag_2",
  call$1: function(tag) {
    return this.prototypeForTag_2(tag);
  },
  $is_args1: true
}}],
["", "box_sample.dart", , A, {
main: function() {
  $.gameLoop = G.GameLoopHtml$($.get$frontBuffer());
  var t1 = $.gameLoop;
  t1.onUpdate = A.update$closure;
  t1.onRender = A.render$closure;
  A.initGraphics();
  A.initDbullet();
},

initGraphics: function() {
  var t1, t2, t3, vertArr, idxArr, vert, frag;
  $.device = G.GraphicsDevice$($.get$frontBuffer(), null);
  $.context = $.device._context;
  $.viewPort = new G.Viewport(0, 0, J.get$width$x($.get$frontBuffer()), J.get$height$x($.get$frontBuffer()), 0, 1);
  $.debug = G.DebugDrawManager$($.device, 16384);
  t1 = $.device;
  t2 = new G.Texture2D(false, 3553, 32873, 3553, null, null, null, null, 6408, 5121, 0, 0, null, t1, "box-texture", 1, false);
  t3 = t2.device;
  if (t3 == null)
    H.throwExpression(new P.ArgumentError("device cannot be null"));
  t3._addChild$1(t2);
  t2._deviceTexture = J.createTexture$0$x(t1._gl);
  $.boxTexture = t2;
  $.rasterizationState = new G.RasterizerState(1029, 2305, 0, 0, false);
  $.depthState = new G.DepthState(true, true, 515);
  $.boxSampler = G.SamplerState$linearWrap("box-sampler", $.device);
  t1 = $.boxTexture.uploadFromURL$1("assets/textures/crate.png");
  t1.then$1(t1, new A.initGraphics_closure());
  $.boxMesh = G.SingleArrayIndexedMesh$("box-mesh", $.device);
  vertArr = $.get$boxVertArray();
  $.boxMesh._deviceVertexBuffer.uploadData$2(vertArr, 35044);
  idxArr = $.get$boxIdxArray();
  $.boxMesh._deviceIndexBuffer.uploadData$2(idxArr, 35044);
  t1 = $.boxMesh;
  t1.count = C.JS_CONST_ZYJ(idxArr);
  t1 = t1.attributes;
  t1.$indexSet(t1, "POSITION", new G.SpectreMeshAttribute("POSITION", new G.VertexAttribute(0, 0, 0, 20, 5126, 3, false)));
  t1 = $.boxMesh.attributes;
  t1.$indexSet(t1, "TEXCOORD0", new G.SpectreMeshAttribute("TEXCOORD0", new G.VertexAttribute(0, 0, 12, 20, 5126, 2, false)));
  t1 = $.device;
  t2 = new G.ShaderProgram(P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSString, G.ShaderProgramUniform), P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSString, G.ShaderProgramAttribute), P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSString, G.ShaderProgramSampler), false, "", null, null, null, t1, "box-program", 1, false);
  t3 = t2.device;
  if (t3 == null)
    H.throwExpression(new P.ArgumentError("device cannot be null"));
  t3._addChild$1(t2);
  t2._program = J.createProgram$0$x(t1._gl);
  $.boxShader = t2;
  t1 = $.device;
  vert = new G.VertexShader(35633, "", null, true, t1, "box-vertex", 1, false);
  t2 = vert.device;
  if (t2 == null)
    H.throwExpression(new P.ArgumentError("device cannot be null"));
  t2._addChild$1(vert);
  vert._shader = J.createShader$1$x(t1._gl, vert._type);
  vert.set$source(vert, "precision highp float;\n\nattribute vec3 POSITION;\nattribute vec2 TEXCOORD0;\n\nuniform mat4 cameraTransform;\n\nvarying vec2 samplePoint;\n\n\nvoid main() {\n    samplePoint = TEXCOORD0;\n    vec4 vPosition4 = vec4(POSITION.x, POSITION.y, POSITION.z, 1.0);\n    gl_Position = cameraTransform * vPosition4;\n}\n");
  t1 = $.device;
  frag = new G.FragmentShader(35632, "", null, true, t1, "box-fragment", 1, false);
  t2 = frag.device;
  if (t2 == null)
    H.throwExpression(new P.ArgumentError("device cannot be null"));
  t2._addChild$1(frag);
  frag._shader = J.createShader$1$x(t1._gl, frag._type);
  frag.set$source(frag, "precision mediump float;\n\nvarying vec2 samplePoint;\n\nuniform sampler2D diffuse;\n\nvoid main() {\n  vec3 diffuseColor = vec3(texture2D(diffuse, samplePoint));\n  gl_FragColor = vec4(diffuseColor, 1.0);\n}\n");
  $.boxShader.set$vertexShader(vert);
  $.boxShader.set$fragmentShader(frag);
  $.boxShader.link$0();
  t1 = $.device;
  t2 = P.List_List(null, G.VertexAttribute);
  H.setRuntimeTypeInfo(t2, [G.VertexAttribute]);
  t3 = P.List_List(null, G.ShaderProgramAttribute);
  H.setRuntimeTypeInfo(t3, [G.ShaderProgramAttribute]);
  t1 = new G.InputLayout(t2, t3, null, null, t1, "box-inputLayout", 1, false);
  t2 = t1.device;
  if (t2 == null)
    H.throwExpression(new P.ArgumentError("device cannot be null"));
  t2._addChild$1(t1);
  $.boxInputLayout = t1;
  t1 = $.boxInputLayout;
  t1._mesh = $.boxMesh;
  t1._refresh$0();
  t1 = $.boxInputLayout;
  t1._shaderProgram = $.boxShader;
  t1._refresh$0();
  $.camera = G.Camera$();
  t1 = $.camera;
  t2 = new Float32Array(3);
  t2.$dartCachedLength = t2.length;
  t2 = new T.Vector3(t2);
  t2.setValues$3(7, 5, 7);
  t1.position = t2;
  t2 = $.camera;
  t1 = new Float32Array(3);
  t1.$dartCachedLength = t1.length;
  t2.focusPosition = new T.Vector3(t1);
  $.camera.aspectRatio = J.toDouble$0$n(J.get$width$x($.get$frontBuffer())) / J.toDouble$0$n(J.get$height$x($.get$frontBuffer()));
},

initDbullet: function() {
  var t1, cubeExtents, floorObject, boxShape, t2, prb, n, newBox;
  $.world = N.WebGLPhysicsWorld$(new A.initDbullet_closure(), 0.016666666666666666, null, 0.05, 10, 0.02, 0.014285714285714285, false);
  t1 = new Float32Array(3);
  t1.$dartCachedLength = t1.length;
  cubeExtents = new T.Vector3(t1);
  cubeExtents.setValues$3(0.5, 0.5, 0.5);
  t1 = new Float32Array(3);
  t1.$dartCachedLength = t1.length;
  t1 = new T.Vector3(t1);
  t1.setValues$3(0, 1, 0);
  floorObject = N.WebGLPhysicsCollisionObject$(0, null, 0.5, 2, false, 0, null, 65535, null, null, null, null, 0.3, N.WebGLPhysicsPlaneShape$(0, 0.005, t1), N.Matrix43$identity(), null);
  $.world._addBody$1(floorObject);
  boxShape = N.WebGLPhysicsBoxShape$(cubeExtents, 0.005);
  t1 = boxShape._inertia;
  t1.toString;
  t2 = new Float32Array(3);
  t2.$dartCachedLength = t2.length;
  t2 = new T.Vector3(t2);
  t2.setFrom$1(t1);
  prb = N.WebGLPhysicsRigidBody$(true, 0.9, null, false, 0.5, false, 1, t2.scale$1(t2, 20), false, 0, null, 65535, 20, null, null, null, null, null, 0.3, boxShape, N.Matrix43$fromTranslation(0, 1, 0), null);
  $.get$boxBodies().push(prb);
  $.world._addBody$1(prb);
  for (n = 1; n < 200; ++n) {
    newBox = prb.clone$0(prb);
    newBox.userData = n;
    $.get$boxBodies().push(newBox);
    newBox.set$transform(newBox, N.Matrix43$fromTranslation(0, 1 + 1.5 * n, 0));
    $.world._addBody$1(newBox);
  }
},

update: function(loop) {
  var t1, t2, t3;
  t1 = $.debug;
  t2 = loop.get$dt();
  t3 = t1._depthEnabledLines.lines;
  t3.update$1(t3, t2);
  t1 = t1._depthDisabledLines.lines;
  t1.update$1(t1, t2);
  t2 = $.world;
  t2._dullet_physics$_update$0(t2);
},

render: function(loop) {
  var t1, t2, box, t3, t4, t5, t6, t7;
  $.context.clearColorBuffer$4(0.66, 0.66, 0.66, 1);
  $.context.clearDepthBuffer$1(1);
  t1 = $.context;
  t1.reset$0(t1);
  $.context.setViewport$1($.viewPort);
  $.camera.copyProjectionMatrix$1($.get$projectionView());
  $.camera.copyViewMatrix$1($.get$view());
  t1 = $.get$projectionView();
  t1.multiply$1(t1, $.get$view());
  $.context.setRasterizerState$1($.rasterizationState);
  $.context.setDepthState$1($.depthState);
  for (t1 = $.get$boxBodies(), t2 = new H.ListIterator(t1, t1.length, 0, null), H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "JSArray", 0)]); t2.moveNext$0();) {
    box = t2._current;
    box.calculateTransform$1($.get$boxTransform());
    $.boxTransform4 = $.get$boxTransform().multiplyMatrix4$2($.get$projectionView(), $.get$boxTransform4());
    t1 = $.context;
    t1._primitiveTopology = 4;
    t1.setShaderProgram$1($.boxShader);
    t1 = $.context;
    t1._inputLayoutHandle = $.boxInputLayout;
    t1.setIndexedMesh$1($.boxMesh);
    $.context.setConstant$2("cameraTransform", $.get$boxTransform4().storage);
    $.context.setSampler$2(0, $.boxSampler);
    $.context.setTexture$2(0, $.boxTexture);
    $.context.drawIndexedMesh$1($.boxMesh);
    t1 = $.debug;
    t3 = box._transform.storage;
    t4 = t3[9];
    t5 = t3[10];
    t3 = t3[11];
    t6 = new Float32Array(3);
    t6.$dartCachedLength = t6.length;
    t6 = new T.Vector3(t6);
    t7 = t6.storage;
    t7[0] = t4;
    t7[1] = t5;
    t7[2] = t3;
    t1.addCross$2(t6, $.get$DebugDrawManager_ColorGreen());
  }
  $.debug.prepareForRender$0();
  $.debug.render$1($.camera);
},

initGraphics_closure: {"": "Closure;",
  call$1: function(onValue) {
    var t1 = $.gameLoop;
    t1.start$0(t1);
  },
  $is_args1: true
},

initDbullet_closure: {"": "Closure;",
  call$0: function() {
    return $.gameLoop._gameTime * 1000;
  }
}},
1],
["dart._collection.dev", "dart:_collection-dev", , H, {
Arrays_copy: function(src, srcStart, dst, dstStart, count) {
  var i, j, t1;
  if (srcStart < dstStart)
    for (i = srcStart + count - 1, j = dstStart + count - 1; i >= srcStart; --i, --j) {
      if (i < 0 || i >= src.length)
        throw H.ioore(src, i);
      C.JSArray_methods.$indexSet(dst, j, src[i]);
    }
  else
    for (t1 = srcStart + count, j = dstStart, i = srcStart; i < t1; ++i, ++j) {
      if (i < 0 || i >= src.length)
        throw H.ioore(src, i);
      C.JSArray_methods.$indexSet(dst, j, src[i]);
    }
},

IterableMixinWorkaround_forEach: function(iterable, f) {
  var t1;
  for (t1 = new H.ListIterator(iterable, iterable.length, 0, null), H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(iterable, "JSArray", 0)]); t1.moveNext$0();)
    f.call$1(t1._current);
},

IterableMixinWorkaround_toStringIterable: function(iterable, leftDelimiter, rightDelimiter) {
  var result, i, t1;
  for (i = 0; i < $.get$IterableMixinWorkaround__toStringList().length; ++i) {
    t1 = $.get$IterableMixinWorkaround__toStringList();
    if (i >= t1.length)
      throw H.ioore(t1, i);
    if (t1[i] === iterable)
      return H.S(leftDelimiter) + "..." + H.S(rightDelimiter);
  }
  result = P.StringBuffer$("");
  try {
    $.get$IterableMixinWorkaround__toStringList().push(iterable);
    J.write$1$x(result, leftDelimiter);
    result.writeAll$2(iterable, ", ");
    J.write$1$x(result, rightDelimiter);
  } finally {
    t1 = $.get$IterableMixinWorkaround__toStringList();
    if (0 >= t1.length)
      throw H.ioore(t1, 0);
    t1.pop();
  }
  return result.get$_contents();
},

IterableMixinWorkaround__rangeCheck: function(list, start, end) {
  if (start < 0 || start > list.length)
    throw H.wrapException(P.RangeError$range(start, 0, list.length));
  if (end < start || end > list.length)
    throw H.wrapException(P.RangeError$range(end, start, list.length));
},

IterableMixinWorkaround_setRangeList: function(list, start, end, from, skipCount) {
  var $length;
  H.IterableMixinWorkaround__rangeCheck(list, start, end);
  $length = end - start;
  if ($length === 0)
    return;
  if (skipCount < 0)
    throw H.wrapException(new P.ArgumentError(skipCount));
  if (skipCount + $length > from.length)
    throw H.wrapException(P.StateError$("Not enough elements"));
  H.Arrays_copy(from, skipCount, list, start, $length);
},

printToConsole: function(line) {
  if (typeof dartPrint == "function") {
    dartPrint(line);
    return;
  }
  if (typeof console == "object" && typeof console.log == "function") {
    console.log(line);
    return;
  }
  if (typeof window == "object")
    return;
  if (typeof print == "function") {
    print(line);
    return;
  }
  throw "Unable to print message: " + String(line);
},

Symbol_getName: function(symbol) {
  return symbol.get$_name();
},

ListIterator: {"": "Object;_iterable,_length,_index,_current",
  get$current: function() {
    return this._current;
  },
  moveNext$0: function() {
    var t1, t2, $length, t3;
    t1 = this._iterable;
    t2 = J.getInterceptor$asx(t1);
    $length = t2.get$length(t1);
    t3 = this._length;
    if (t3 == null ? $length != null : t3 !== $length)
      throw H.wrapException(P.ConcurrentModificationError$(t1));
    t3 = this._index;
    if (typeof $length !== "number")
      throw H.iae($length);
    if (t3 >= $length) {
      this._current = null;
      return false;
    }
    this._current = t2.elementAt$1(t1, t3);
    this._index = this._index + 1;
    return true;
  }
},

MappedIterable: {"": "IterableBase;_iterable,_f",
  get$iterator: function(_) {
    var t1 = this._iterable;
    t1 = t1.get$iterator(t1);
    t1 = new H.MappedIterator(null, t1, this._f);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "MappedIterable", 0), H.getRuntimeTypeArgument(this, "MappedIterable", 1)]);
    return t1;
  },
  get$length: function(_) {
    var t1 = this._iterable;
    return t1.get$length(t1);
  },
  $asIterableBase: function($S, $T) {
    return [$T];
  },
  static: {
MappedIterable_MappedIterable: function(iterable, $function, $S, $T) {
  var t1;
  if (!!iterable.$isEfficientLength) {
    t1 = new H.EfficientLengthMappedIterable(iterable, $function);
    H.setRuntimeTypeInfo(t1, [$S, $T]);
    return t1;
  }
  t1 = new H.MappedIterable(iterable, $function);
  H.setRuntimeTypeInfo(t1, [$S, $T]);
  return t1;
}}

},

EfficientLengthMappedIterable: {"": "MappedIterable;_iterable,_f", $asMappedIterable: null, $isEfficientLength: true},

MappedIterator: {"": "Iterator;_current,_iterator,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  moveNext$0: function() {
    var t1 = this._iterator;
    if (t1.moveNext$0()) {
      this._current = this._f$1(t1.get$current());
      return true;
    }
    this._current = null;
    return false;
  },
  get$current: function() {
    return this._current;
  },
  $asIterator: function($S, $T) {
    return [$T];
  }
},

FixedLengthListMixin: {"": "Object;",
  set$length: function(receiver, newLength) {
    throw H.wrapException(P.UnsupportedError$("Cannot change the length of a fixed-length list"));
  },
  clear$0: function(receiver) {
    throw H.wrapException(P.UnsupportedError$("Cannot clear a fixed-length list"));
  }
}}],
["dart._js_names", "dart:_js_names", , H, {
unmangleGlobalNameIfPreservedAnyways: function($name) {
  return init.mangledGlobalNames[$name];
}}],
["dart.async", "dart:async", , P, {
_invokeErrorHandler: function(errorHandler, error, stackTrace) {
  var t1 = J.getInterceptor(errorHandler);
  if (!!t1.$is_args2)
    return errorHandler.call$2(error, stackTrace);
  else
    return errorHandler.call$1(error);
},

_registerErrorHandler: function(errorHandler, zone) {
  var t1 = J.getInterceptor(errorHandler);
  zone.toString;
  if (!!t1.$is_args2)
    return errorHandler;
  else
    return errorHandler;
},

Future_wait: function(futures) {
  var t1, t2, t3, future, pos, t4, t5, result, completer;
  t1 = {};
  t1.completer_0 = null;
  t1.values_1 = null;
  t2 = new P.Future_wait_handleError(t1);
  t1.remaining_2 = 0;
  for (t3 = new H.ListIterator(futures, futures.length, 0, null), H.setRuntimeTypeInfo(t3, [H.getRuntimeTypeArgument(futures, "JSArray", 0)]); t3.moveNext$0();) {
    future = t3._current;
    pos = t1.remaining_2;
    t1.remaining_2 = pos + 1;
    t4 = future.catchError$1(t2);
    t5 = $.Zone__current;
    t5.toString;
    result = new P._Future(0, t5, null, null, new P.Future_wait_closure(t1, pos), null, P._registerErrorHandler(null, t5), null);
    result.$builtinTypeInfo = [null];
    t4._addListener$1(result);
  }
  t2 = t1.remaining_2;
  if (t2 === 0)
    return P._Future$immediate(C.List_empty, null);
  t1.values_1 = P.List_List(t2, null);
  t2 = J.JSArray;
  completer = new P._AsyncCompleter(P._Future$(t2));
  H.setRuntimeTypeInfo(completer, [t2]);
  t1.completer_0 = completer;
  return t1.completer_0.future;
},

_asyncRunCallback: function() {
  var callback, t1, exception, milliseconds;
  for (; t1 = $.get$_asyncCallbacks(), t1._head !== t1._tail;) {
    callback = $.get$_asyncCallbacks().removeFirst$0();
    try {
      callback.call$0();
    } catch (exception) {
      H.unwrapException(exception);
      milliseconds = C.JSNumber_methods.$tdiv(C.Duration_0._duration, 1000);
      H.TimerImpl$(milliseconds < 0 ? 0 : milliseconds, P._asyncRunCallback$closure);
      throw exception;
    }

  }
  $._callbacksAreEnqueued = false;
},

_scheduleAsyncCallback: function(callback) {
  var t1 = $.get$_asyncCallbacks();
  t1._add$1(t1, callback);
  if (!$._callbacksAreEnqueued) {
    P._createTimer(C.Duration_0, P._asyncRunCallback$closure);
    $._callbacksAreEnqueued = true;
  }
},

scheduleMicrotask: function(callback) {
  var t1 = $.Zone__current;
  if (t1 === C.C__RootZone) {
    t1.toString;
    P._scheduleAsyncCallback(callback);
    return;
  }
  P._scheduleAsyncCallback(t1.bindCallback$2$runGuarded(callback, true));
},

StreamController_StreamController: function(onCancel, onListen, onPause, onResume, sync, $T) {
  var t1;
  if (sync) {
    t1 = new P._SyncStreamController(onListen, onPause, onResume, onCancel, null, 0, null);
    H.setRuntimeTypeInfo(t1, [$T]);
  } else {
    t1 = new P._AsyncStreamController(onListen, onPause, onResume, onCancel, null, 0, null);
    H.setRuntimeTypeInfo(t1, [$T]);
  }
  return t1;
},

StreamController_StreamController$broadcast: function(onCancel, onListen, sync, $T) {
  var t1;
  if (sync) {
    t1 = new P._SyncBroadcastStreamController(onListen, onCancel, 0, null, null, null, null);
    H.setRuntimeTypeInfo(t1, [$T]);
    t1._async$_previous = t1;
    t1._async$_next = t1;
  } else {
    t1 = new P._AsyncBroadcastStreamController(onListen, onCancel, 0, null, null, null, null);
    H.setRuntimeTypeInfo(t1, [$T]);
    t1._async$_previous = t1;
    t1._async$_next = t1;
  }
  return t1;
},

_runGuarded: function(notificationHandler) {
  var result, e, s, t1, t2, exception;
  if (notificationHandler == null)
    return;
  try {
    result = notificationHandler.call$0();
    t1 = result;
    t2 = J.getInterceptor(t1);
    if (typeof t1 === "object" && t1 !== null && !!t2.$isFuture)
      return result;
    return;
  } catch (exception) {
    t1 = H.unwrapException(exception);
    e = t1;
    s = new H._StackTrace(exception, null);
    t1 = $.Zone__current;
    t1.toString;
    P._rootHandleUncaughtError(t1, null, t1, e, s);
  }

},

_nullDataHandler: function(value) {
},

_nullErrorHandler: function(error, stackTrace) {
  var t1 = $.Zone__current;
  t1.toString;
  P._rootHandleUncaughtError(t1, null, t1, error, stackTrace);
},

_nullDoneHandler: function() {
},

_runUserCode: function(userCode, onSuccess, onError) {
  var e, s, exception, t1;
  try {
    onSuccess.call$1(userCode.call$0());
  } catch (exception) {
    t1 = H.unwrapException(exception);
    e = t1;
    s = new H._StackTrace(exception, null);
    onError.call$2(e, s);
  }

},

_cancelAndError: function(subscription, future, error, stackTrace) {
  var cancelFuture, t1;
  cancelFuture = subscription.cancel$0(subscription);
  t1 = J.getInterceptor(cancelFuture);
  if (typeof cancelFuture === "object" && cancelFuture !== null && !!t1.$isFuture)
    cancelFuture.whenComplete$1(new P._cancelAndError_closure(future, error, stackTrace));
  else
    future._completeError$2(error, stackTrace);
},

_cancelAndErrorClosure: function(subscription, future) {
  return new P._cancelAndErrorClosure_closure(subscription, future);
},

Timer_Timer: function(duration, callback) {
  var t1 = $.Zone__current;
  if (t1 === C.C__RootZone) {
    t1.toString;
    return P._createTimer(duration, callback);
  }
  return P._createTimer(duration, t1.bindCallback$2$runGuarded(callback, true));
},

_createTimer: function(duration, callback) {
  var milliseconds = C.JSNumber_methods.$tdiv(duration._duration, 1000);
  return H.TimerImpl$(milliseconds < 0 ? 0 : milliseconds, callback);
},

_rootHandleUncaughtError: function($self, $parent, zone, error, stackTrace) {
  P._rootRun($self, null, $self, new P._rootHandleUncaughtError_closure(error, stackTrace));
},

_rootRun: function($self, $parent, zone, f) {
  var old, t1, t2;
  t1 = $.Zone__current;
  t2 = zone;
  if (t1 == null ? t2 == null : t1 === t2)
    return f.call$0();
  old = t1;
  try {
    $.Zone__current = zone;
    t1 = f.call$0();
    return t1;
  } finally {
    $.Zone__current = old;
  }
},

_rootRunUnary: function($self, $parent, zone, f, arg) {
  var old, t1, t2;
  t1 = $.Zone__current;
  t2 = zone;
  if (t1 == null ? t2 == null : t1 === t2)
    return f.call$1(arg);
  old = t1;
  try {
    $.Zone__current = zone;
    t1 = f.call$1(arg);
    return t1;
  } finally {
    $.Zone__current = old;
  }
},

_AsyncError: {"": "Object;error>,stackTrace<", $isError: true},

_BroadcastStream: {"": "_ControllerStream;_async$_controller", $as_ControllerStream: null},

_BroadcastSubscription: {"": "_ControllerSubscription;_eventState,_async$_next@,_async$_previous?,_async$_controller,_async$_onData,_onError,_onDone,_zone,_state,_cancelFuture,_pending",
  get$_async$_controller: function() {
    return this._async$_controller;
  },
  _expectsEvent$1: function(eventId) {
    var t1 = this._eventState;
    if (typeof t1 !== "number")
      throw t1.$and();
    return (t1 & 1) === eventId;
  },
  _onPause$0: function() {
  },
  get$_onPause: function() {
    return new P.BoundClosure$0(this, P._BroadcastSubscription.prototype._onPause$0, null, "_onPause$0");
  },
  _onResume$0: function() {
  },
  get$_onResume: function() {
    return new P.BoundClosure$0(this, P._BroadcastSubscription.prototype._onResume$0, null, "_onResume$0");
  },
  $as_ControllerSubscription: null,
  static: {
"": "_BroadcastSubscription__STATE_EVENT_ID,_BroadcastSubscription__STATE_FIRING,_BroadcastSubscription__STATE_REMOVE_AFTER_FIRING",
}

},

_BroadcastStreamController: {"": "Object;_async$_next?,_async$_previous?",
  _addListener$1: function(subscription) {
    subscription._async$_previous = this._async$_previous;
    subscription._async$_next = this;
    this._async$_previous.set$_async$_next(subscription);
    this._async$_previous = subscription;
    subscription._eventState = this._state & 1;
  },
  _removeListener$1: function(subscription) {
    var previous, next;
    previous = subscription._async$_previous;
    next = subscription._async$_next;
    previous.set$_async$_next(next);
    next.set$_async$_previous(previous);
    subscription._async$_previous = subscription;
    subscription._async$_next = subscription;
  },
  _subscribe$1: function(cancelOnError) {
    var t1, t2, t3, subscription;
    if ((this._state & 4) !== 0)
      throw H.wrapException(new P.StateError("Subscribing to closed stream"));
    t1 = H.getRuntimeTypeArgument(this, "_BroadcastStreamController", 0);
    t2 = $.Zone__current;
    t3 = cancelOnError ? 1 : 0;
    subscription = new P._BroadcastSubscription(null, null, null, this, null, null, null, t2, t3, null, null);
    H.setRuntimeTypeInfo(subscription, [t1]);
    subscription._async$_previous = subscription;
    subscription._async$_next = subscription;
    this._addListener$1(subscription);
    t1 = this._async$_next;
    t2 = this._async$_previous;
    if (t1 == null ? t2 == null : t1 === t2)
      P._runGuarded(this._onListen);
    return subscription;
  },
  _recordCancel$1: function(subscription) {
    var t1;
    if (subscription.get$_async$_next() === subscription)
      return;
    t1 = subscription._eventState;
    if (typeof t1 !== "number")
      throw t1.$and();
    if ((t1 & 2) !== 0)
      subscription._eventState = (t1 | 4) >>> 0;
    else {
      this._removeListener$1(subscription);
      if ((this._state & 2) === 0 && this._async$_next === this)
        this._callOnCancel$0();
    }
  },
  _recordPause$1: function(subscription) {
  },
  _recordResume$1: function(subscription) {
  },
  _addEventError$0: function() {
    if ((this._state & 4) !== 0)
      return new P.StateError("Cannot add new events after calling close");
    return new P.StateError("Cannot add new events while doing an addStream");
  },
  _async$_add$1: function(_, data) {
    this._sendData$1(data);
  },
  _forEachListener$1: function(action) {
    var t1, id, link, link0;
    t1 = this._state;
    if ((t1 & 2) !== 0)
      throw H.wrapException(new P.StateError("Cannot fire new event. Controller is already firing an event"));
    if (this._async$_next === this)
      return;
    id = t1 & 1;
    this._state = (t1 ^ 3) >>> 0;
    link = this._async$_next;
    for (; link !== this;)
      if (link._expectsEvent$1(id)) {
        t1 = link._eventState;
        if (typeof t1 !== "number")
          throw t1.$or();
        link._eventState = (t1 | 2) >>> 0;
        action.call$1(link);
        t1 = link._eventState;
        if (typeof t1 !== "number")
          throw t1.$xor();
        link._eventState = (t1 ^ 1) >>> 0;
        link0 = link._async$_next;
        t1 = link._eventState;
        if (typeof t1 !== "number")
          throw t1.$and();
        if ((t1 & 4) !== 0)
          this._removeListener$1(link);
        t1 = link._eventState;
        if (typeof t1 !== "number")
          throw t1.$and();
        link._eventState = (t1 & 4294967293) >>> 0;
        link = link0;
      } else
        link = link._async$_next;
    this._state = (this._state & 4294967293) >>> 0;
    if (this._async$_next === this)
      this._callOnCancel$0();
  },
  _callOnCancel$0: function() {
    if ((this._state & 4) !== 0 && this._doneFuture._state === 0)
      this._doneFuture._asyncComplete$1(null);
    P._runGuarded(this._onCancel);
  }
},

_SyncBroadcastStreamController: {"": "_BroadcastStreamController;_onListen,_onCancel,_state,_async$_next,_async$_previous,_addStreamState,_doneFuture",
  _sendData$1: function(data) {
    if (this._async$_next === this)
      return;
    this._forEachListener$1(new P._SyncBroadcastStreamController__sendData_closure(this, data));
  },
  $as_BroadcastStreamController: null
},

_SyncBroadcastStreamController__sendData_closure: {"": "Closure;this_0,data_1",
  call$1: function(subscription) {
    J._async$_add$1$x(subscription, this.data_1);
  },
  $is_args1: true
},

_AsyncBroadcastStreamController: {"": "_BroadcastStreamController;_onListen,_onCancel,_state,_async$_next,_async$_previous,_addStreamState,_doneFuture",
  _sendData$1: function(data) {
    var link, t1;
    for (link = this._async$_next; link !== this; link = link._async$_next) {
      t1 = new P._DelayedData(data, null);
      t1.$builtinTypeInfo = [null];
      link._addPending$1(t1);
    }
  },
  $as_BroadcastStreamController: null
},

Future: {"": "Object;", $isFuture: true},

Future_wait_handleError: {"": "Closure;box_0",
  call$1: function(error) {
    var t1 = this.box_0;
    if (t1.values_1 != null) {
      t1.values_1 = null;
      t1.completer_0.completeError$1(error);
    }
    return;
  },
  $is_args1: true
},

Future_wait_closure: {"": "Closure;box_0,pos_1",
  call$1: function(value) {
    var t1, t2, t3;
    t1 = this.box_0;
    t2 = t1.values_1;
    if (t2 == null)
      return;
    t3 = this.pos_1;
    if (t3 < 0 || t3 >= t2.length)
      throw H.ioore(t2, t3);
    t2[t3] = value;
    t1.remaining_2 = t1.remaining_2 - 1;
    if (t1.remaining_2 === 0) {
      t2 = t1.completer_0;
      t1 = t1.values_1;
      t2 = t2.future;
      if (t2._state !== 0)
        H.throwExpression(new P.StateError("Future already completed"));
      t2._asyncComplete$1(t1);
    }
  },
  $is_args1: true
},

_Completer: {"": "Object;"},

_AsyncCompleter: {"": "_Completer;future",
  completeError$2: function(error, stackTrace) {
    var t1;
    if (error == null)
      throw H.wrapException(new P.ArgumentError("Error must not be null"));
    t1 = this.future;
    if (t1._state !== 0)
      throw H.wrapException(new P.StateError("Future already completed"));
    t1._asyncCompleteError$2(error, stackTrace);
  },
  completeError$1: function(error) {
    return this.completeError$2(error, null);
  },
  $as_Completer: null
},

_SyncCompleter: {"": "_Completer;future",
  completeError$2: function(error, stackTrace) {
    var t1 = this.future;
    if (t1._state !== 0)
      throw H.wrapException(P.StateError$("Future already completed"));
    t1._completeError$2(error, stackTrace);
  },
  get$completeError: function() {
    return new P.BoundClosure$2(this, P._SyncCompleter.prototype.completeError$2, null, "completeError$2");
  },
  $as_Completer: null
},

_Future: {"": "Object;_state,_zone<,_resultOrListeners,_nextListener<,_onValueCallback,_errorTestCallback,_onErrorCallback,_whenCompleteActionCallback",
  get$_isComplete: function() {
    return this._state >= 4;
  },
  get$_hasError: function() {
    return this._state === 8;
  },
  set$_isChained: function(value) {
    if (value)
      this._state = 2;
    else
      this._state = 0;
  },
  get$_onValue: function() {
    return this._state === 2 ? null : this._onValueCallback;
  },
  _onValue$1: function(arg0) {
    return this.get$_onValue().call$1(arg0);
  },
  get$_whenCompleteAction: function() {
    return this._state === 2 ? null : this._whenCompleteActionCallback;
  },
  _whenCompleteAction$0: function() {
    return this.get$_whenCompleteAction().call$0();
  },
  then$2$onError: function(_, f, onError) {
    var result = P._Future$_then(f, onError, null);
    this._addListener$1(result);
    return result;
  },
  then$1: function($receiver, f) {
    return this.then$2$onError($receiver, f, null);
  },
  catchError$2$test: function(onError, test) {
    var result = P._Future$_catchError(onError, test, null);
    this._addListener$1(result);
    return result;
  },
  catchError$1: function(onError) {
    return this.catchError$2$test(onError, null);
  },
  whenComplete$1: function(action) {
    var result = P._Future$_whenComplete(action, H.getRuntimeTypeArgument(this, "_Future", 0));
    this._addListener$1(result);
    return result;
  },
  get$_async$_value: function() {
    return this._resultOrListeners;
  },
  get$_error: function() {
    return this._resultOrListeners;
  },
  _setValue$1: function(value) {
    this._state = 4;
    this._resultOrListeners = value;
  },
  _setError$2: function(error, stackTrace) {
    this._state = 8;
    this._resultOrListeners = new P._AsyncError(error, stackTrace);
  },
  _addListener$1: function(listener) {
    if (this._state >= 4) {
      this._zone.toString;
      P._scheduleAsyncCallback(new P._Future__addListener_closure(this, listener));
    } else {
      listener._nextListener = this._resultOrListeners;
      this._resultOrListeners = listener;
    }
  },
  _removeListeners$0: function() {
    var current, prev, next;
    current = this._resultOrListeners;
    this._resultOrListeners = null;
    for (prev = null; current != null; prev = current, current = next) {
      next = current.get$_nextListener();
      current._nextListener = prev;
    }
    return prev;
  },
  _complete$1: function(value) {
    var t1, listeners;
    t1 = J.getInterceptor(value);
    if (typeof value === "object" && value !== null && !!t1.$isFuture) {
      P._Future__chainFutures(value, this);
      return;
    }
    listeners = this._removeListeners$0();
    this._setValue$1(value);
    P._Future__propagateToListeners(this, listeners);
  },
  _completeError$2: function(error, stackTrace) {
    var listeners = this._removeListeners$0();
    this._setError$2(error, stackTrace);
    P._Future__propagateToListeners(this, listeners);
  },
  get$_completeError: function() {
    return new P.BoundClosure$2(this, P._Future.prototype._completeError$2, null, "_completeError$2");
  },
  _asyncComplete$1: function(value) {
    if (this._state !== 0)
      H.throwExpression(P.StateError$("Future already completed"));
    this._state = 1;
    this._zone.toString;
    P._scheduleAsyncCallback(new P._Future__asyncComplete_closure(this, value));
  },
  _asyncCompleteError$2: function(error, stackTrace) {
    if (this._state !== 0)
      H.throwExpression(P.StateError$("Future already completed"));
    this._state = 1;
    this._zone.toString;
    P._scheduleAsyncCallback(new P._Future__asyncCompleteError_closure(this, error, stackTrace));
  },
  _async$_Future$immediate$1: function(value, $T) {
    this._asyncComplete$1(value);
  },
  _async$_Future$immediateError$2: function(error, stackTrace, $T) {
    this._asyncCompleteError$2(error, stackTrace);
  },
  $is_Future: true,
  $isFuture: true,
  static: {
"": "_Future__INCOMPLETE,_Future__PENDING_COMPLETE,_Future__CHAINED,_Future__VALUE,_Future__ERROR",
_Future$: function($T) {
  var t1 = new P._Future(0, $.Zone__current, null, null, null, null, null, null);
  H.setRuntimeTypeInfo(t1, [$T]);
  return t1;
},

_Future$immediate: function(value, $T) {
  var t1 = new P._Future(0, $.Zone__current, null, null, null, null, null, null);
  H.setRuntimeTypeInfo(t1, [$T]);
  t1._async$_Future$immediate$1(value, $T);
  return t1;
},

_Future$immediateError: function(error, stackTrace, $T) {
  var t1 = new P._Future(0, $.Zone__current, null, null, null, null, null, null);
  H.setRuntimeTypeInfo(t1, [$T]);
  t1._async$_Future$immediateError$2(error, stackTrace, $T);
  return t1;
},

_Future$_then: function(onValueCallback, onErrorCallback, $T) {
  var t1 = $.Zone__current;
  t1.toString;
  t1 = new P._Future(0, t1, null, null, onValueCallback, null, P._registerErrorHandler(onErrorCallback, t1), null);
  H.setRuntimeTypeInfo(t1, [$T]);
  return t1;
},

_Future$_catchError: function(onErrorCallback, errorTestCallback, $T) {
  var t1, t2;
  t1 = $.Zone__current;
  t2 = P._registerErrorHandler(onErrorCallback, t1);
  t1.toString;
  t2 = new P._Future(0, t1, null, null, null, errorTestCallback, t2, null);
  H.setRuntimeTypeInfo(t2, [$T]);
  return t2;
},

_Future$_whenComplete: function(whenCompleteActionCallback, $T) {
  var t1 = $.Zone__current;
  t1.toString;
  t1 = new P._Future(0, t1, null, null, null, null, null, whenCompleteActionCallback);
  H.setRuntimeTypeInfo(t1, [$T]);
  return t1;
},

_Future__chainFutures: function(source, target) {
  var t1;
  target._state = 2;
  t1 = J.getInterceptor$x(source);
  if (typeof source === "object" && source !== null && !!t1.$is_Future)
    if (source._state >= 4)
      P._Future__propagateToListeners(source, target);
    else
      source._addListener$1(target);
  else
    t1.then$2$onError(source, new P._Future__chainFutures_closure(target), new P._Future__chainFutures_closure0(target));
},

_Future__propagateMultipleListeners: function(source, listeners) {
  var listeners0;
  do {
    listeners0 = listeners.get$_nextListener();
    listeners._nextListener = null;
    P._Future__propagateToListeners(source, listeners);
    if (listeners0 != null) {
      listeners = listeners0;
      continue;
    } else
      break;
  } while (true);
},

_Future__propagateToListeners: function(source, listeners) {
  var t1, t2, hasError, asyncError, t3, t4, t5, chainSource, listeners0;
  t1 = {};
  t1.source_4 = source;
  for (; true;) {
    t2 = {};
    if (!t1.source_4.get$_isComplete())
      return;
    hasError = t1.source_4.get$_hasError();
    if (hasError && listeners == null) {
      t2 = t1.source_4;
      asyncError = t2.get$_error();
      t2 = t2._zone;
      t3 = J.get$error$x(asyncError);
      t4 = asyncError.get$stackTrace();
      t2.toString;
      P._rootHandleUncaughtError(t2, null, t2, t3, t4);
      return;
    }
    if (listeners == null)
      return;
    if (listeners._nextListener != null) {
      P._Future__propagateMultipleListeners(t1.source_4, listeners);
      return;
    }
    if (hasError) {
      t3 = t1.source_4.get$_zone();
      t4 = listeners._zone;
      t3.toString;
      t4.toString;
      t3 = t4 == null ? t3 != null : t4 !== t3;
    } else
      t3 = false;
    if (t3) {
      t2 = t1.source_4;
      asyncError = t2.get$_error();
      t2 = t2._zone;
      t3 = J.get$error$x(asyncError);
      t4 = asyncError.get$stackTrace();
      t2.toString;
      P._rootHandleUncaughtError(t2, null, t2, t3, t4);
      return;
    }
    t3 = $.Zone__current;
    t4 = listeners._zone;
    if (t3 == null ? t4 != null : t3 !== t4) {
      t4.toString;
      P._rootRun(t4, null, t4, new P._Future__propagateToListeners_closure(t1, listeners));
      return;
    }
    t2.listenerHasValue_1 = null;
    t2.listenerValueOrError_2 = null;
    t2.isPropagationAborted_3 = false;
    t4.toString;
    P._rootRun(t4, null, t4, new P._Future__propagateToListeners_closure0(t1, t2, hasError, listeners));
    if (t2.isPropagationAborted_3)
      return;
    t3 = t2.listenerHasValue_1 === true;
    if (t3) {
      t4 = t2.listenerValueOrError_2;
      t5 = J.getInterceptor(t4);
      t5 = typeof t4 === "object" && t4 !== null && !!t5.$isFuture;
      t4 = t5;
    } else
      t4 = false;
    if (t4) {
      chainSource = t2.listenerValueOrError_2;
      t2 = J.getInterceptor(chainSource);
      if (typeof chainSource === "object" && chainSource !== null && !!t2.$is_Future && chainSource._state >= 4) {
        listeners._state = 2;
        t1.source_4 = chainSource;
        continue;
      }
      P._Future__chainFutures(chainSource, listeners);
      return;
    }
    if (t3) {
      listeners0 = listeners._removeListeners$0();
      t2 = t2.listenerValueOrError_2;
      listeners._state = 4;
      listeners._resultOrListeners = t2;
    } else {
      listeners0 = listeners._removeListeners$0();
      asyncError = t2.listenerValueOrError_2;
      t2 = J.get$error$x(asyncError);
      t3 = asyncError.get$stackTrace();
      listeners._state = 8;
      listeners._resultOrListeners = new P._AsyncError(t2, t3);
    }
    t1.source_4 = listeners;
    listeners = listeners0;
  }
}}

},

_Future__addListener_closure: {"": "Closure;this_0,listener_1",
  call$0: function() {
    P._Future__propagateToListeners(this.this_0, this.listener_1);
  }
},

_Future__chainFutures_closure: {"": "Closure;target_0",
  call$1: function(value) {
    this.target_0._complete$1(value);
  },
  $is_args1: true
},

_Future__chainFutures_closure0: {"": "Closure;target_1",
  call$2: function(error, stackTrace) {
    this.target_1._completeError$2(error, stackTrace);
  },
  call$1: function(error) {
    return this.call$2(error, null);
  },
  $is_args2: true,
  $is_args1: true
},

_Future__asyncComplete_closure: {"": "Closure;this_0,value_1",
  call$0: function() {
    this.this_0._complete$1(this.value_1);
  }
},

_Future__asyncCompleteError_closure: {"": "Closure;this_0,error_1,stackTrace_2",
  call$0: function() {
    this.this_0._completeError$2(this.error_1, this.stackTrace_2);
  }
},

_Future__propagateToListeners_closure: {"": "Closure;box_2,listener_3",
  call$0: function() {
    P._Future__propagateToListeners(this.box_2.source_4, this.listener_3);
  }
},

_Future__propagateToListeners_closure0: {"": "Closure;box_2,box_1,hasError_4,listener_5",
  call$0: function() {
    var t1, value, asyncError, test, matchesTest, errorCallback, e, s, t2, t3, t4, exception;
    t1 = {};
    try {
      t2 = this.box_2;
      if (!this.hasError_4) {
        value = t2.source_4.get$_async$_value();
        t2 = this.listener_5;
        t3 = t2._state === 2 ? null : t2._onValueCallback;
        t4 = this.box_1;
        if (t3 != null) {
          t4.listenerValueOrError_2 = t2._onValue$1(value);
          t4.listenerHasValue_1 = true;
        } else {
          t4.listenerValueOrError_2 = value;
          t4.listenerHasValue_1 = true;
        }
      } else {
        asyncError = t2.source_4.get$_error();
        t2 = this.listener_5;
        test = t2._state === 2 ? null : t2._errorTestCallback;
        matchesTest = true;
        if (test != null)
          matchesTest = test.call$1(J.get$error$x(asyncError));
        if (matchesTest === true)
          t3 = (t2._state === 2 ? null : t2._onErrorCallback) != null;
        else
          t3 = false;
        if (t3) {
          errorCallback = t2._state === 2 ? null : t2._onErrorCallback;
          t2 = this.box_1;
          t2.listenerValueOrError_2 = P._invokeErrorHandler(errorCallback, J.get$error$x(asyncError), asyncError.get$stackTrace());
          t2.listenerHasValue_1 = true;
        } else {
          t2 = this.box_1;
          t2.listenerValueOrError_2 = asyncError;
          t2.listenerHasValue_1 = false;
        }
      }
      t2 = this.listener_5;
      if ((t2._state === 2 ? null : t2._whenCompleteActionCallback) != null) {
        t1.completeResult_0 = t2._whenCompleteAction$0();
        t3 = t1.completeResult_0;
        t4 = J.getInterceptor(t3);
        if (typeof t3 === "object" && t3 !== null && !!t4.$isFuture) {
          t2.set$_isChained(true);
          J.then$2$onError$x(t1.completeResult_0, new P._Future__propagateToListeners__closure(this.box_2, t2), new P._Future__propagateToListeners__closure0(t1, t2));
          this.box_1.isPropagationAborted_3 = true;
        }
      }
    } catch (exception) {
      t1 = H.unwrapException(exception);
      e = t1;
      s = new H._StackTrace(exception, null);
      if (this.hasError_4) {
        t1 = J.get$error$x(this.box_2.source_4.get$_error());
        t2 = e;
        t2 = t1 == null ? t2 == null : t1 === t2;
        t1 = t2;
      } else
        t1 = false;
      t2 = this.box_1;
      if (t1)
        t2.listenerValueOrError_2 = this.box_2.source_4.get$_error();
      else
        t2.listenerValueOrError_2 = new P._AsyncError(e, s);
      this.box_1.listenerHasValue_1 = false;
    }

  }
},

_Future__propagateToListeners__closure: {"": "Closure;box_2,listener_6",
  call$1: function(ignored) {
    P._Future__propagateToListeners(this.box_2.source_4, this.listener_6);
  },
  $is_args1: true
},

_Future__propagateToListeners__closure0: {"": "Closure;box_0,listener_7",
  call$2: function(error, stackTrace) {
    var t1, t2, t3;
    t1 = this.box_0;
    t2 = t1.completeResult_0;
    t3 = J.getInterceptor(t2);
    if (typeof t2 !== "object" || t2 === null || !t3.$is_Future) {
      t1.completeResult_0 = P._Future$(null);
      t1.completeResult_0._setError$2(error, stackTrace);
    }
    P._Future__propagateToListeners(t1.completeResult_0, this.listener_7);
  },
  call$1: function(error) {
    return this.call$2(error, null);
  },
  $is_args2: true,
  $is_args1: true
},

Stream: {"": "Object;",
  forEach$1: function(_, action) {
    var t1, future;
    t1 = {};
    future = P._Future$(null);
    t1.subscription_0 = null;
    t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(new P.Stream_forEach_closure(t1, this, action, future), true, new P.Stream_forEach_closure0(future), future.get$_completeError());
    return future;
  },
  get$length: function(_) {
    var t1, future;
    t1 = {};
    future = P._Future$(J.JSInt);
    t1.count_0 = 0;
    this.listen$4$cancelOnError$onDone$onError(new P.Stream_length_closure(t1), true, new P.Stream_length_closure0(t1, future), future.get$_completeError());
    return future;
  }
},

Stream_forEach_closure: {"": "Closure;box_0,this_1,action_2,future_3",
  call$1: function(element) {
    P._runUserCode(new P.Stream_forEach__closure(this.action_2, element), new P.Stream_forEach__closure0(), P._cancelAndErrorClosure(this.box_0.subscription_0, this.future_3));
  },
  $is_args1: true
},

Stream_forEach__closure: {"": "Closure;action_4,element_5",
  call$0: function() {
    return this.action_4.call$1(this.element_5);
  }
},

Stream_forEach__closure0: {"": "Closure;",
  call$1: function(_) {
  },
  $is_args1: true
},

Stream_forEach_closure0: {"": "Closure;future_6",
  call$0: function() {
    this.future_6._complete$1(null);
  }
},

Stream_length_closure: {"": "Closure;box_0",
  call$1: function(_) {
    var t1 = this.box_0;
    t1.count_0 = t1.count_0 + 1;
  },
  $is_args1: true
},

Stream_length_closure0: {"": "Closure;box_0,future_1",
  call$0: function() {
    this.future_1._complete$1(this.box_0.count_0);
  }
},

StreamSubscription: {"": "Object;"},

_StreamController: {"": "Object;",
  get$_pendingEvents: function() {
    if ((this._state & 8) === 0)
      return this._varData;
    return this._varData.get$varData();
  },
  _ensurePendingEvents$0: function() {
    if ((this._state & 8) === 0) {
      if (this._varData == null)
        this._varData = new P._StreamImplEvents(null, null, 0);
      return this._varData;
    }
    var t1 = this._varData.get$varData();
    return t1;
  },
  get$_subscription: function() {
    if ((this._state & 8) !== 0)
      return this._varData.get$varData();
    return this._varData;
  },
  _badEventState$0: function() {
    if ((this._state & 4) !== 0)
      return new P.StateError("Cannot add event after closing");
    return new P.StateError("Cannot add event while adding a stream");
  },
  _ensureDoneFuture$0: function() {
    if (this._doneFuture == null) {
      this._doneFuture = P._Future$(null);
      if ((this._state & 2) !== 0)
        this._doneFuture._complete$1(null);
    }
    return this._doneFuture;
  },
  close$0: function(_) {
    var t1 = this._state;
    if ((t1 & 4) !== 0)
      return this._doneFuture;
    if (t1 >= 4)
      throw H.wrapException(this._badEventState$0());
    this._state = (t1 | 4) >>> 0;
    this._ensureDoneFuture$0();
    t1 = this._state;
    if ((t1 & 1) !== 0)
      this._sendDone$0();
    else if ((t1 & 3) === 0) {
      t1 = this._ensurePendingEvents$0();
      t1.add$1(t1, C.C__DelayedDone);
    }
    return this._doneFuture;
  },
  _async$_add$1: function(_, value) {
    var t1, t2;
    t1 = this._state;
    if ((t1 & 1) !== 0)
      this._sendData$1(value);
    else if ((t1 & 3) === 0) {
      t1 = this._ensurePendingEvents$0();
      t2 = new P._DelayedData(value, null);
      H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(this, "_StreamController", 0)]);
      t1.add$1(t1, t2);
    }
  },
  _subscribe$1: function(cancelOnError) {
    var t1, t2, subscription, pendingEvents, addState;
    if ((this._state & 3) !== 0)
      throw H.wrapException(new P.StateError("Stream has already been listened to."));
    t1 = $.Zone__current;
    t2 = cancelOnError ? 1 : 0;
    subscription = new P._ControllerSubscription(this, null, null, null, t1, t2, null, null);
    H.setRuntimeTypeInfo(subscription, [null]);
    pendingEvents = this.get$_pendingEvents();
    this._state = (this._state | 1) >>> 0;
    if ((this._state & 8) !== 0) {
      addState = this._varData;
      addState.set$varData(subscription);
      addState.resume$0(addState);
    } else
      this._varData = subscription;
    subscription._setPendingEvents$1(pendingEvents);
    subscription._guardCallback$1(new P._StreamController__subscribe_closure(this));
    return subscription;
  },
  _recordCancel$1: function(subscription) {
    var addState, t1, future;
    if ((this._state & 8) !== 0) {
      addState = this._varData;
      addState.cancel$0(addState);
    }
    this._varData = null;
    this._state = (this._state & 4294967286 | 2) >>> 0;
    t1 = new P._StreamController__recordCancel_complete(this);
    future = P._runGuarded(this.get$_onCancel());
    if (future != null)
      future = future.whenComplete$1(t1);
    else
      t1.call$0();
    return future;
  },
  _recordPause$1: function(subscription) {
    var addState;
    if ((this._state & 8) !== 0) {
      addState = this._varData;
      addState.pause$0(addState);
    }
    P._runGuarded(this.get$_onPause());
  },
  _recordResume$1: function(subscription) {
    var addState;
    if ((this._state & 8) !== 0) {
      addState = this._varData;
      addState.resume$0(addState);
    }
    P._runGuarded(this.get$_onResume());
  }
},

_StreamController__subscribe_closure: {"": "Closure;this_0",
  call$0: function() {
    P._runGuarded(this.this_0.get$_onListen());
  }
},

_StreamController__recordCancel_complete: {"": "Closure;this_0",
  call$0: function() {
    var t1 = this.this_0._doneFuture;
    if (t1 != null && t1._state === 0)
      t1._asyncComplete$1(null);
  }
},

_SyncStreamControllerDispatch: {"": "Object;",
  _sendData$1: function(data) {
    var t1 = this.get$_subscription();
    t1._async$_add$1(t1, data);
  },
  _sendDone$0: function() {
    this.get$_subscription()._close$0();
  }
},

_AsyncStreamControllerDispatch: {"": "Object;",
  _sendData$1: function(data) {
    var t1, t2;
    t1 = this.get$_subscription();
    t2 = new P._DelayedData(data, null);
    H.setRuntimeTypeInfo(t2, [null]);
    t1._addPending$1(t2);
  },
  _sendDone$0: function() {
    this.get$_subscription()._addPending$1(C.C__DelayedDone);
  }
},

_AsyncStreamController: {"": "_StreamController__AsyncStreamControllerDispatch;_onListen<,_onPause<,_onResume<,_onCancel<,_varData,_state,_doneFuture"},

_StreamController__AsyncStreamControllerDispatch: {"": "_StreamController+_AsyncStreamControllerDispatch;", $as_StreamController: null},

_SyncStreamController: {"": "_StreamController__SyncStreamControllerDispatch;_onListen<,_onPause<,_onResume<,_onCancel<,_varData,_state,_doneFuture"},

_StreamController__SyncStreamControllerDispatch: {"": "_StreamController+_SyncStreamControllerDispatch;", $as_StreamController: null},

_ControllerStream: {"": "_StreamImpl;_async$_controller",
  _createSubscription$1: function(cancelOnError) {
    return this._async$_controller._subscribe$1(cancelOnError);
  },
  get$hashCode: function(_) {
    return (H.Primitives_objectHashCode(this._async$_controller) ^ 892482866) >>> 0;
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    if (this === other)
      return true;
    t1 = J.getInterceptor(other);
    if (typeof other !== "object" || other === null || !t1.$is_ControllerStream)
      return false;
    return other._async$_controller === this._async$_controller;
  },
  $is_ControllerStream: true,
  $as_StreamImpl: null
},

_ControllerSubscription: {"": "_BufferingStreamSubscription;_async$_controller<,_async$_onData,_onError,_onDone,_zone,_state,_cancelFuture,_pending",
  _onCancel$0: function() {
    return this.get$_async$_controller()._recordCancel$1(this);
  },
  _onPause$0: function() {
    this.get$_async$_controller()._recordPause$1(this);
  },
  get$_onPause: function() {
    return new P.BoundClosure$0(this, P._ControllerSubscription.prototype._onPause$0, null, "_onPause$0");
  },
  _onResume$0: function() {
    this.get$_async$_controller()._recordResume$1(this);
  },
  get$_onResume: function() {
    return new P.BoundClosure$0(this, P._ControllerSubscription.prototype._onResume$0, null, "_onResume$0");
  },
  $as_BufferingStreamSubscription: null
},

_EventSink: {"": "Object;"},

_BufferingStreamSubscription: {"": "Object;_async$_onData,_onError,_onDone,_zone<,_state,_cancelFuture,_pending",
  _setPendingEvents$1: function(pendingEvents) {
    if (pendingEvents == null)
      return;
    this._pending = pendingEvents;
    if (!pendingEvents.get$isEmpty(pendingEvents)) {
      this._state = (this._state | 64) >>> 0;
      this._pending.schedule$1(this);
    }
  },
  onData$1: function(handleData) {
    $.Zone__current.toString;
    this._async$_onData = handleData;
  },
  onError$1: function(_, handleError) {
    if (handleError == null)
      handleError = P._nullErrorHandler$closure;
    this._onError = P._registerErrorHandler(handleError, $.Zone__current);
  },
  onDone$1: function(handleDone) {
    if (handleDone == null)
      handleDone = P._nullDoneHandler$closure;
    $.Zone__current.toString;
    this._onDone = handleDone;
  },
  pause$1: function(_, resumeSignal) {
    var t1 = this._state;
    if ((t1 & 8) !== 0)
      return;
    this._state = (t1 + 128 | 4) >>> 0;
    if (t1 < 128 && this._pending != null)
      this._pending.cancelSchedule$0();
    if ((t1 & 4) === 0 && (this._state & 32) === 0)
      this._guardCallback$1(this.get$_onPause());
  },
  pause$0: function($receiver) {
    return this.pause$1($receiver, null);
  },
  resume$0: function(_) {
    var t1, t2;
    t1 = this._state;
    if ((t1 & 8) !== 0)
      return;
    if (t1 >= 128) {
      this._state = t1 - 128;
      t1 = this._state;
      if (t1 < 128) {
        if ((t1 & 64) !== 0) {
          t2 = this._pending;
          t2 = !t2.get$isEmpty(t2);
        } else
          t2 = false;
        if (t2)
          this._pending.schedule$1(this);
        else {
          this._state = (t1 & 4294967291) >>> 0;
          if ((this._state & 32) === 0)
            this._guardCallback$1(this.get$_onResume());
        }
      }
    }
  },
  cancel$0: function(_) {
    this._state = (this._state & 4294967279) >>> 0;
    if ((this._state & 8) !== 0)
      return this._cancelFuture;
    this._cancel$0();
    return this._cancelFuture;
  },
  get$_mayResumeInput: function() {
    if (this._state < 128) {
      var t1 = this._pending;
      t1 = t1 == null || t1.get$isEmpty(t1);
    } else
      t1 = false;
    return t1;
  },
  _cancel$0: function() {
    this._state = (this._state | 8) >>> 0;
    if ((this._state & 64) !== 0)
      this._pending.cancelSchedule$0();
    if ((this._state & 32) === 0)
      this._pending = null;
    this._cancelFuture = this._onCancel$0();
  },
  _async$_add$1: function(_, data) {
    var t1 = this._state;
    if ((t1 & 8) !== 0)
      return;
    if (t1 < 32)
      this._sendData$1(data);
    else {
      t1 = new P._DelayedData(data, null);
      H.setRuntimeTypeInfo(t1, [null]);
      this._addPending$1(t1);
    }
  },
  _close$0: function() {
    var t1 = this._state;
    if ((t1 & 8) !== 0)
      return;
    this._state = (t1 | 2) >>> 0;
    if (this._state < 32)
      this._sendDone$0();
    else
      this._addPending$1(C.C__DelayedDone);
  },
  _onPause$0: function() {
  },
  get$_onPause: function() {
    return new P.BoundClosure$0(this, P._BufferingStreamSubscription.prototype._onPause$0, null, "_onPause$0");
  },
  _onResume$0: function() {
  },
  get$_onResume: function() {
    return new P.BoundClosure$0(this, P._BufferingStreamSubscription.prototype._onResume$0, null, "_onResume$0");
  },
  _onCancel$0: function() {
  },
  _addPending$1: function($event) {
    var pending, t1;
    pending = this._pending;
    if (pending == null) {
      pending = new P._StreamImplEvents(null, null, 0);
      this._pending = pending;
    }
    pending.add$1(pending, $event);
    t1 = this._state;
    if ((t1 & 64) === 0) {
      this._state = (t1 | 64) >>> 0;
      if (this._state < 128)
        this._pending.schedule$1(this);
    }
  },
  _sendData$1: function(data) {
    var t1 = this._state;
    this._state = (t1 | 32) >>> 0;
    this._zone.runUnaryGuarded$2(this._async$_onData, data);
    this._state = (this._state & 4294967263) >>> 0;
    this._checkState$1((t1 & 4) !== 0);
  },
  _sendDone$0: function() {
    var t1, t2, t3;
    t1 = new P._BufferingStreamSubscription__sendDone_sendDone(this);
    this._cancel$0();
    this._state = (this._state | 16) >>> 0;
    t2 = this._cancelFuture;
    t3 = J.getInterceptor(t2);
    if (typeof t2 === "object" && t2 !== null && !!t3.$isFuture)
      t2.whenComplete$1(t1);
    else
      t1.call$0();
  },
  _guardCallback$1: function(callback) {
    var t1 = this._state;
    this._state = (t1 | 32) >>> 0;
    callback.call$0();
    this._state = (this._state & 4294967263) >>> 0;
    this._checkState$1((t1 & 4) !== 0);
  },
  _checkState$1: function(wasInputPaused) {
    var t1, t2, isInputPaused;
    t1 = this._state;
    if ((t1 & 64) !== 0) {
      t2 = this._pending;
      t2 = t2.get$isEmpty(t2);
    } else
      t2 = false;
    if (t2) {
      this._state = (t1 & 4294967231) >>> 0;
      if ((this._state & 4) !== 0 && this.get$_mayResumeInput())
        this._state = (this._state & 4294967291) >>> 0;
    }
    for (; true; wasInputPaused = isInputPaused) {
      t1 = this._state;
      if ((t1 & 8) !== 0) {
        this._pending = null;
        return;
      }
      isInputPaused = (t1 & 4) !== 0;
      if (wasInputPaused === isInputPaused)
        break;
      this._state = (t1 ^ 32) >>> 0;
      if (isInputPaused)
        this._onPause$0();
      else
        this._onResume$0();
      this._state = (this._state & 4294967263) >>> 0;
    }
    t1 = this._state;
    if ((t1 & 64) !== 0 && t1 < 128)
      this._pending.schedule$1(this);
  },
  static: {
"": "_BufferingStreamSubscription__STATE_CANCEL_ON_ERROR,_BufferingStreamSubscription__STATE_CLOSED,_BufferingStreamSubscription__STATE_INPUT_PAUSED,_BufferingStreamSubscription__STATE_CANCELED,_BufferingStreamSubscription__STATE_WAIT_FOR_CANCEL,_BufferingStreamSubscription__STATE_IN_CALLBACK,_BufferingStreamSubscription__STATE_HAS_PENDING,_BufferingStreamSubscription__STATE_PAUSE_COUNT,_BufferingStreamSubscription__STATE_PAUSE_COUNT_SHIFT",
}

},

_BufferingStreamSubscription__sendDone_sendDone: {"": "Closure;this_0",
  call$0: function() {
    var t1, t2;
    t1 = this.this_0;
    t2 = t1._state;
    if ((t2 & 16) === 0)
      return;
    t1._state = (t2 | 42) >>> 0;
    t1._zone.runGuarded$1(t1._onDone);
    t1._state = (t1._state & 4294967263) >>> 0;
  }
},

_StreamImpl: {"": "Stream;",
  listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
    var subscription = this._createSubscription$1(true === cancelOnError);
    subscription.onData$1(onData);
    subscription.onError$1(subscription, onError);
    subscription.onDone$1(onDone);
    return subscription;
  },
  listen$1: function(onData) {
    return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
  },
  _createSubscription$1: function(cancelOnError) {
    var t1, t2, t3;
    t1 = H.getRuntimeTypeArgument(this, "_StreamImpl", 0);
    t2 = $.Zone__current;
    t3 = cancelOnError ? 1 : 0;
    t3 = new P._BufferingStreamSubscription(null, null, null, t2, t3, null, null);
    H.setRuntimeTypeInfo(t3, [t1]);
    return t3;
  },
  $asStream: null
},

_DelayedEvent: {"": "Object;next*"},

_DelayedData: {"": "_DelayedEvent;value>,next",
  perform$1: function(dispatch) {
    dispatch._sendData$1(this.value);
  }
},

_DelayedDone: {"": "Object;",
  perform$1: function(dispatch) {
    dispatch._sendDone$0();
  },
  get$next: function(_) {
    return;
  },
  set$next: function(_, _0) {
    throw H.wrapException(new P.StateError("No events after a done."));
  }
},

_PendingEvents: {"": "Object;",
  schedule$1: function(dispatch) {
    var t1 = this._state;
    if (t1 === 1)
      return;
    if (t1 >= 1) {
      this._state = 1;
      return;
    }
    P.scheduleMicrotask(new P._PendingEvents_schedule_closure(this, dispatch));
    this._state = 1;
  },
  cancelSchedule$0: function() {
    if (this._state === 1)
      this._state = 3;
  }
},

_PendingEvents_schedule_closure: {"": "Closure;this_0,dispatch_1",
  call$0: function() {
    var t1, oldState;
    t1 = this.this_0;
    oldState = t1._state;
    t1._state = 0;
    if (oldState === 3)
      return;
    t1.handleNext$1(this.dispatch_1);
  }
},

_StreamImplEvents: {"": "_PendingEvents;firstPendingEvent,lastPendingEvent,_state",
  get$isEmpty: function(_) {
    return this.lastPendingEvent == null;
  },
  add$1: function(_, $event) {
    var t1 = this.lastPendingEvent;
    if (t1 == null) {
      this.lastPendingEvent = $event;
      this.firstPendingEvent = $event;
    } else {
      t1.set$next(t1, $event);
      this.lastPendingEvent = $event;
    }
  },
  handleNext$1: function(dispatch) {
    var $event = this.firstPendingEvent;
    this.firstPendingEvent = $event.get$next($event);
    if (this.firstPendingEvent == null)
      this.lastPendingEvent = null;
    $event.perform$1(dispatch);
  },
  clear$0: function(_) {
    if (this._state === 1)
      this._state = 3;
    this.lastPendingEvent = null;
    this.firstPendingEvent = null;
  }
},

_cancelAndError_closure: {"": "Closure;future_0,error_1,stackTrace_2",
  call$0: function() {
    return this.future_0._completeError$2(this.error_1, this.stackTrace_2);
  }
},

_cancelAndErrorClosure_closure: {"": "Closure;subscription_0,future_1",
  call$2: function(error, stackTrace) {
    return P._cancelAndError(this.subscription_0, this.future_1, error, stackTrace);
  },
  $is_args2: true
},

_BaseZone: {"": "Object;",
  runGuarded$1: function(f) {
    var e, s, t1, exception;
    try {
      t1 = this.run$1(f);
      return t1;
    } catch (exception) {
      t1 = H.unwrapException(exception);
      e = t1;
      s = new H._StackTrace(exception, null);
      return this.handleUncaughtError$2(e, s);
    }

  },
  runUnaryGuarded$2: function(f, arg) {
    var e, s, t1, exception;
    try {
      t1 = this.runUnary$2(f, arg);
      return t1;
    } catch (exception) {
      t1 = H.unwrapException(exception);
      e = t1;
      s = new H._StackTrace(exception, null);
      return this.handleUncaughtError$2(e, s);
    }

  },
  bindCallback$2$runGuarded: function(f, runGuarded) {
    var registered = this.registerCallback$1(f);
    if (runGuarded)
      return new P._BaseZone_bindCallback_closure(this, registered);
    else
      return new P._BaseZone_bindCallback_closure0(this, registered);
  },
  bindUnaryCallback$2$runGuarded: function(f, runGuarded) {
    var registered = this.registerUnaryCallback$1(f);
    if (runGuarded)
      return new P._BaseZone_bindUnaryCallback_closure(this, registered);
    else
      return new P._BaseZone_bindUnaryCallback_closure0(this, registered);
  }
},

_BaseZone_bindCallback_closure: {"": "Closure;this_0,registered_1",
  call$0: function() {
    return this.this_0.runGuarded$1(this.registered_1);
  }
},

_BaseZone_bindCallback_closure0: {"": "Closure;this_2,registered_3",
  call$0: function() {
    return this.this_2.run$1(this.registered_3);
  }
},

_BaseZone_bindUnaryCallback_closure: {"": "Closure;this_0,registered_1",
  call$1: function(arg) {
    return this.this_0.runUnaryGuarded$2(this.registered_1, arg);
  },
  $is_args1: true
},

_BaseZone_bindUnaryCallback_closure0: {"": "Closure;this_2,registered_3",
  call$1: function(arg) {
    return this.this_2.runUnary$2(this.registered_3, arg);
  },
  $is_args1: true
},

_rootHandleUncaughtError_closure: {"": "Closure;error_0,stackTrace_1",
  call$0: function() {
    P._scheduleAsyncCallback(new P._rootHandleUncaughtError__closure(this.error_0, this.stackTrace_1));
  }
},

_rootHandleUncaughtError__closure: {"": "Closure;error_2,stackTrace_3",
  call$0: function() {
    var t1, trace, t2;
    t1 = this.error_2;
    P.print("Uncaught Error: " + H.S(t1));
    trace = this.stackTrace_3;
    if (trace == null) {
      t2 = J.getInterceptor(t1);
      t2 = typeof t1 === "object" && t1 !== null && !!t2.$isError;
    } else
      t2 = false;
    if (t2)
      trace = t1.get$stackTrace();
    if (trace != null)
      P.print("Stack Trace: \n" + H.S(trace) + "\n");
    throw H.wrapException(t1);
  }
},

_RootZone: {"": "_BaseZone;",
  $index: function(_, key) {
    return;
  },
  handleUncaughtError$2: function(error, stackTrace) {
    return P._rootHandleUncaughtError(this, null, this, error, stackTrace);
  },
  run$1: function(f) {
    return P._rootRun(this, null, this, f);
  },
  runUnary$2: function(f, arg) {
    return P._rootRunUnary(this, null, this, f, arg);
  },
  registerCallback$1: function(f) {
    return f;
  },
  registerUnaryCallback$1: function(f) {
    return f;
  }
}}],
["dart.collection", "dart:collection", , P, {
_HashSet__newHashTable: function() {
  var table = Object.create(null);
  table["<non-identifier-key>"] = table;
  delete table["<non-identifier-key>"];
  return table;
},

_defaultEquals: function(a, b) {
  return J.$eq(a, b);
},

_defaultHashCode: function(a) {
  return J.get$hashCode$(a);
},

HashMap_HashMap: function(equals, hashCode, isValidKey, $K, $V) {
  var t1 = new P._HashMap(0, null, null, null, null);
  H.setRuntimeTypeInfo(t1, [$K, $V]);
  return t1;
},

HashSet_HashSet$identity: function($E) {
  var t1 = new P._IdentityHashSet(0, null, null, null, null);
  H.setRuntimeTypeInfo(t1, [$E]);
  return t1;
},

_iterableToString: function(iterable) {
  var parts, t1;
  t1 = $.get$_toStringVisiting();
  if (t1.contains$1(t1, iterable))
    return "(...)";
  t1 = $.get$_toStringVisiting();
  t1.add$1(t1, iterable);
  parts = [];
  try {
    P._iterablePartsToStrings(iterable, parts);
  } finally {
    t1 = $.get$_toStringVisiting();
    t1.remove$1(t1, iterable);
  }
  t1 = P.StringBuffer$("(");
  t1.writeAll$2(parts, ", ");
  t1.write$1(t1, ")");
  return t1._contents;
},

_iterablePartsToStrings: function(iterable, parts) {
  var it, $length, count, next, ultimateString, penultimateString, penultimate, ultimate, ultimate0, elision;
  it = iterable.get$iterator(iterable);
  $length = 0;
  count = 0;
  while (true) {
    if (!($length < 80 || count < 3))
      break;
    if (!it.moveNext$0())
      return;
    next = H.S(it.get$current());
    parts.push(next);
    $length += next.length + 2;
    ++count;
  }
  if (!it.moveNext$0()) {
    if (count <= 5)
      return;
    if (0 >= parts.length)
      throw H.ioore(parts, 0);
    ultimateString = parts.pop();
    if (0 >= parts.length)
      throw H.ioore(parts, 0);
    penultimateString = parts.pop();
  } else {
    penultimate = it.get$current();
    ++count;
    if (!it.moveNext$0()) {
      if (count <= 4) {
        parts.push(H.S(penultimate));
        return;
      }
      ultimateString = H.S(penultimate);
      if (0 >= parts.length)
        throw H.ioore(parts, 0);
      penultimateString = parts.pop();
      $length += ultimateString.length + 2;
    } else {
      ultimate = it.get$current();
      ++count;
      for (; it.moveNext$0(); penultimate = ultimate, ultimate = ultimate0) {
        ultimate0 = it.get$current();
        ++count;
        if (count > 100) {
          while (true) {
            if (!($length > 75 && count > 3))
              break;
            if (0 >= parts.length)
              throw H.ioore(parts, 0);
            $length -= parts.pop().length + 2;
            --count;
          }
          parts.push("...");
          return;
        }
      }
      penultimateString = H.S(penultimate);
      ultimateString = H.S(ultimate);
      $length += ultimateString.length + penultimateString.length + 4;
    }
  }
  if (count > parts.length + 2) {
    $length += 5;
    elision = "...";
  } else
    elision = null;
  while (true) {
    if (!($length > 80 && parts.length > 3))
      break;
    if (0 >= parts.length)
      throw H.ioore(parts, 0);
    $length -= parts.pop().length + 2;
    if (elision == null) {
      $length += 5;
      elision = "...";
    }
  }
  if (elision != null)
    parts.push(elision);
  parts.push(penultimateString);
  parts.push(ultimateString);
},

LinkedHashMap_LinkedHashMap: function(equals, hashCode, isValidKey, $K, $V) {
  var t1 = new P._LinkedHashMap(0, null, null, null, null, null, 0);
  H.setRuntimeTypeInfo(t1, [$K, $V]);
  return t1;
},

LinkedHashSet_LinkedHashSet: function(equals, hashCode, isValidKey, $E) {
  var t1 = new P._LinkedHashSet(0, null, null, null, null, null, 0);
  H.setRuntimeTypeInfo(t1, [$E]);
  return t1;
},

Maps_mapToString: function(m) {
  var t1, result, i, t2;
  t1 = {};
  for (i = 0; i < $.get$Maps__toStringList().length; ++i) {
    t2 = $.get$Maps__toStringList();
    if (i >= t2.length)
      throw H.ioore(t2, i);
    if (t2[i] === m)
      return "{...}";
  }
  result = P.StringBuffer$("");
  try {
    $.get$Maps__toStringList().push(m);
    J.write$1$x(result, "{");
    t1.first_0 = true;
    J.forEach$1$ax(m, new P.Maps_mapToString_closure(t1, result));
    J.write$1$x(result, "}");
  } finally {
    t1 = $.get$Maps__toStringList();
    if (0 >= t1.length)
      throw H.ioore(t1, 0);
    t1.pop();
  }
  return result.get$_contents();
},

_HashMap: {"": "Object;_collection$_length,_strings,_nums,_rest,_keys",
  get$length: function(_) {
    return this._collection$_length;
  },
  get$keys: function(_) {
    var t1 = new P.HashMapKeyIterable(this);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "_HashMap", 0)]);
    return t1;
  },
  get$values: function(_) {
    var t1 = new P.HashMapKeyIterable(this);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "_HashMap", 0)]);
    return H.MappedIterable_MappedIterable(t1, new P._HashMap_values_closure(this), H.getRuntimeTypeArgument(t1, "IterableBase", 0), null);
  },
  $index: function(_, key) {
    var strings, t1, entry, nums, rest, bucket, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null)
        t1 = null;
      else {
        entry = strings[key];
        t1 = entry === strings ? null : entry;
      }
      return t1;
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null)
        t1 = null;
      else {
        entry = nums[key];
        t1 = entry === nums ? null : entry;
      }
      return t1;
    } else {
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(key)];
      index = this._findBucketIndex$2(bucket, key);
      return index < 0 ? null : bucket[index + 1];
    }
  },
  $indexSet: function(_, key, value) {
    var strings, nums, rest, hash, bucket, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null) {
        strings = P._HashMap__newHashTable();
        this._strings = strings;
      }
      this._addHashTableEntry$3(strings, key, value);
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null) {
        nums = P._HashMap__newHashTable();
        this._nums = nums;
      }
      this._addHashTableEntry$3(nums, key, value);
    } else {
      rest = this._rest;
      if (rest == null) {
        rest = P._HashMap__newHashTable();
        this._rest = rest;
      }
      hash = this._computeHashCode$1(key);
      bucket = rest[hash];
      if (bucket == null) {
        P._HashMap__setTableEntry(rest, hash, [key, value]);
        this._collection$_length = this._collection$_length + 1;
        this._keys = null;
      } else {
        index = this._findBucketIndex$2(bucket, key);
        if (index >= 0)
          bucket[index + 1] = value;
        else {
          bucket.push(key, value);
          this._collection$_length = this._collection$_length + 1;
          this._keys = null;
        }
      }
    }
  },
  clear$0: function(_) {
    if (this._collection$_length > 0) {
      this._keys = null;
      this._rest = null;
      this._nums = null;
      this._strings = null;
      this._collection$_length = 0;
    }
  },
  forEach$1: function(_, action) {
    var keys, $length, i, key;
    keys = this._computeKeys$0();
    for ($length = keys.length, i = 0; i < $length; ++i) {
      key = keys[i];
      action.call$2(key, this.$index(this, key));
      if (keys !== this._keys)
        throw H.wrapException(P.ConcurrentModificationError$(this));
    }
  },
  _computeKeys$0: function() {
    var t1, result, strings, names, entries, index, i, nums, rest, bucket, $length, i0;
    t1 = this._keys;
    if (t1 != null)
      return t1;
    result = P.List_List(this._collection$_length, null);
    strings = this._strings;
    if (strings != null) {
      names = Object.getOwnPropertyNames(strings);
      entries = names.length;
      for (index = 0, i = 0; i < entries; ++i) {
        result[index] = names[i];
        ++index;
      }
    } else
      index = 0;
    nums = this._nums;
    if (nums != null) {
      names = Object.getOwnPropertyNames(nums);
      entries = names.length;
      for (i = 0; i < entries; ++i) {
        result[index] = +names[i];
        ++index;
      }
    }
    rest = this._rest;
    if (rest != null) {
      names = Object.getOwnPropertyNames(rest);
      entries = names.length;
      for (i = 0; i < entries; ++i) {
        bucket = rest[names[i]];
        $length = bucket.length;
        for (i0 = 0; i0 < $length; i0 += 2) {
          result[index] = bucket[i0];
          ++index;
        }
      }
    }
    this._keys = result;
    return result;
  },
  _addHashTableEntry$3: function(table, key, value) {
    if (table[key] == null) {
      this._collection$_length = this._collection$_length + 1;
      this._keys = null;
    }
    P._HashMap__setTableEntry(table, key, value);
  },
  _computeHashCode$1: function(key) {
    return J.get$hashCode$(key) & 0x3ffffff;
  },
  _findBucketIndex$2: function(bucket, key) {
    var $length, i;
    if (bucket == null)
      return -1;
    $length = bucket.length;
    for (i = 0; i < $length; i += 2)
      if (J.$eq(bucket[i], key))
        return i;
    return -1;
  },
  $isMap: true,
  $asMap: null,
  static: {
_HashMap__setTableEntry: function(table, key, value) {
  if (value == null)
    table[key] = table;
  else
    table[key] = value;
},

_HashMap__newHashTable: function() {
  var table = Object.create(null);
  P._HashMap__setTableEntry(table, "<non-identifier-key>", table);
  delete table["<non-identifier-key>"];
  return table;
}}

},

_HashMap_values_closure: {"": "Closure;this_0",
  call$1: function(each) {
    var t1 = this.this_0;
    return t1.$index(t1, each);
  },
  $is_args1: true
},

HashMapKeyIterable: {"": "IterableBase;_map",
  get$length: function(_) {
    return this._map._collection$_length;
  },
  get$iterator: function(_) {
    var t1, t2;
    t1 = this._map;
    t2 = t1._computeKeys$0();
    t2 = new P.HashMapKeyIterator(t1, t2, 0, null);
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(this, "HashMapKeyIterable", 0)]);
    return t2;
  },
  forEach$1: function(_, f) {
    var t1, keys, $length, i;
    t1 = this._map;
    keys = t1._computeKeys$0();
    for ($length = keys.length, i = 0; i < $length; ++i) {
      f.call$1(keys[i]);
      if (keys !== t1._keys)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
    }
  },
  $asIterableBase: null,
  $isEfficientLength: true
},

HashMapKeyIterator: {"": "Object;_map,_keys,_offset,_collection$_current",
  get$current: function() {
    return this._collection$_current;
  },
  moveNext$0: function() {
    var keys, offset, t1;
    keys = this._keys;
    offset = this._offset;
    t1 = this._map;
    if (keys !== t1._keys)
      throw H.wrapException(P.ConcurrentModificationError$(t1));
    else if (offset >= keys.length) {
      this._collection$_current = null;
      return false;
    } else {
      this._collection$_current = keys[offset];
      this._offset = offset + 1;
      return true;
    }
  }
},

_LinkedHashMap: {"": "Object;_collection$_length,_strings,_nums,_rest,_first,_last,_modifications",
  get$length: function(_) {
    return this._collection$_length;
  },
  get$keys: function(_) {
    var t1 = new P.LinkedHashMapKeyIterable(this);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "_LinkedHashMap", 0)]);
    return t1;
  },
  get$values: function(_) {
    var t1 = new P.LinkedHashMapKeyIterable(this);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "_LinkedHashMap", 0)]);
    return H.MappedIterable_MappedIterable(t1, new P._LinkedHashMap_values_closure(this), H.getRuntimeTypeArgument(t1, "IterableBase", 0), null);
  },
  containsKey$1: function(_, key) {
    var strings, nums, rest;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null)
        return false;
      return strings[key] != null;
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null)
        return false;
      return nums[key] != null;
    } else {
      rest = this._rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(rest[this._computeHashCode$1(key)], key) >= 0;
    }
  },
  $index: function(_, key) {
    var strings, cell, nums, rest, bucket, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null)
        return;
      cell = strings[key];
      return cell == null ? null : cell.get$_value();
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null)
        return;
      cell = nums[key];
      return cell == null ? null : cell.get$_value();
    } else {
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(key)];
      index = this._findBucketIndex$2(bucket, key);
      if (index < 0)
        return;
      return bucket[index].get$_value();
    }
  },
  $indexSet: function(_, key, value) {
    var strings, nums, rest, hash, bucket, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null) {
        strings = P._LinkedHashMap__newHashTable();
        this._strings = strings;
      }
      this._addHashTableEntry$3(strings, key, value);
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null) {
        nums = P._LinkedHashMap__newHashTable();
        this._nums = nums;
      }
      this._addHashTableEntry$3(nums, key, value);
    } else {
      rest = this._rest;
      if (rest == null) {
        rest = P._LinkedHashMap__newHashTable();
        this._rest = rest;
      }
      hash = this._computeHashCode$1(key);
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [this._newLinkedCell$2(key, value)];
      else {
        index = this._findBucketIndex$2(bucket, key);
        if (index >= 0)
          bucket[index].set$_value(value);
        else
          bucket.push(this._newLinkedCell$2(key, value));
      }
    }
  },
  putIfAbsent$2: function(_, key, ifAbsent) {
    var value;
    if (this.containsKey$1(this, key))
      return this.$index(this, key);
    value = ifAbsent.call$0();
    this.$indexSet(this, key, value);
    return value;
  },
  remove$1: function(_, key) {
    var rest, bucket, index, cell;
    if (typeof key === "string" && key !== "__proto__")
      return this._removeHashTableEntry$2(this._strings, key);
    else if (typeof key === "number" && (key & 0x3ffffff) === key)
      return this._removeHashTableEntry$2(this._nums, key);
    else {
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(key)];
      index = this._findBucketIndex$2(bucket, key);
      if (index < 0)
        return;
      cell = bucket.splice(index, 1)[0];
      this._unlinkCell$1(cell);
      return cell.get$_value();
    }
  },
  clear$0: function(_) {
    if (this._collection$_length > 0) {
      this._last = null;
      this._first = null;
      this._rest = null;
      this._nums = null;
      this._strings = null;
      this._collection$_length = 0;
      this._modifications = this._modifications + 1 & 67108863;
    }
  },
  forEach$1: function(_, action) {
    var cell, modifications;
    cell = this._first;
    modifications = this._modifications;
    for (; cell != null;) {
      action.call$2(cell.get$_key(cell), cell._value);
      if (modifications !== this._modifications)
        throw H.wrapException(P.ConcurrentModificationError$(this));
      cell = cell._next;
    }
  },
  _addHashTableEntry$3: function(table, key, value) {
    var cell = table[key];
    if (cell == null)
      table[key] = this._newLinkedCell$2(key, value);
    else
      cell.set$_value(value);
  },
  _removeHashTableEntry$2: function(table, key) {
    var cell;
    if (table == null)
      return;
    cell = table[key];
    if (cell == null)
      return;
    this._unlinkCell$1(cell);
    delete table[key];
    return cell.get$_value();
  },
  _newLinkedCell$2: function(key, value) {
    var cell, last;
    cell = new P.LinkedHashMapCell(key, value, null, null);
    if (this._first == null) {
      this._last = cell;
      this._first = cell;
    } else {
      last = this._last;
      cell._previous = last;
      last.set$_next(cell);
      this._last = cell;
    }
    this._collection$_length = this._collection$_length + 1;
    this._modifications = this._modifications + 1 & 67108863;
    return cell;
  },
  _unlinkCell$1: function(cell) {
    var previous, next;
    previous = cell.get$_previous();
    next = cell.get$_next();
    if (previous == null)
      this._first = next;
    else
      previous.set$_next(next);
    if (next == null)
      this._last = previous;
    else
      next.set$_previous(previous);
    this._collection$_length = this._collection$_length - 1;
    this._modifications = this._modifications + 1 & 67108863;
  },
  _computeHashCode$1: function(key) {
    return J.get$hashCode$(key) & 0x3ffffff;
  },
  _findBucketIndex$2: function(bucket, key) {
    var $length, i;
    if (bucket == null)
      return -1;
    $length = bucket.length;
    for (i = 0; i < $length; ++i)
      if (J.$eq(J.get$_key$x(bucket[i]), key))
        return i;
    return -1;
  },
  toString$0: function(_) {
    return P.Maps_mapToString(this);
  },
  $isMap: true,
  $asMap: null,
  static: {
_LinkedHashMap__newHashTable: function() {
  var table = Object.create(null);
  table["<non-identifier-key>"] = table;
  delete table["<non-identifier-key>"];
  return table;
}}

},

_LinkedHashMap_values_closure: {"": "Closure;this_0",
  call$1: function(each) {
    var t1 = this.this_0;
    return t1.$index(t1, each);
  },
  $is_args1: true
},

LinkedHashMapCell: {"": "Object;_key>,_value@,_next@,_previous@"},

LinkedHashMapKeyIterable: {"": "IterableBase;_map",
  get$length: function(_) {
    return this._map._collection$_length;
  },
  get$iterator: function(_) {
    var t1, t2;
    t1 = this._map;
    t2 = t1._modifications;
    t2 = new P.LinkedHashMapKeyIterator(t1, t2, null, null);
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(this, "LinkedHashMapKeyIterable", 0)]);
    t2._cell = t2._map._first;
    return t2;
  },
  forEach$1: function(_, f) {
    var t1, cell, modifications;
    t1 = this._map;
    cell = t1._first;
    modifications = t1._modifications;
    for (; cell != null;) {
      f.call$1(cell.get$_key(cell));
      if (modifications !== t1._modifications)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      cell = cell._next;
    }
  },
  $asIterableBase: null,
  $isEfficientLength: true
},

LinkedHashMapKeyIterator: {"": "Object;_map,_modifications,_cell,_collection$_current",
  get$current: function() {
    return this._collection$_current;
  },
  moveNext$0: function() {
    var t1 = this._map;
    if (this._modifications !== t1._modifications)
      throw H.wrapException(P.ConcurrentModificationError$(t1));
    else {
      t1 = this._cell;
      if (t1 == null) {
        this._collection$_current = null;
        return false;
      } else {
        this._collection$_current = t1.get$_key(t1);
        this._cell = this._cell.get$_next();
        return true;
      }
    }
  }
},

_HashSet: {"": "_HashSetBase;",
  get$iterator: function(_) {
    var t1 = this._computeElements$0();
    t1 = new P.HashSetIterator(this, t1, 0, null);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "_HashSet", 0)]);
    return t1;
  },
  get$length: function(_) {
    return this._collection$_length;
  },
  contains$1: function(_, object) {
    var strings, nums, rest;
    if (typeof object === "string" && object !== "__proto__") {
      strings = this._strings;
      return strings == null ? false : strings[object] != null;
    } else if (typeof object === "number" && (object & 0x3ffffff) === object) {
      nums = this._nums;
      return nums == null ? false : nums[object] != null;
    } else {
      rest = this._rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(rest[this._computeHashCode$1(object)], object) >= 0;
    }
  },
  lookup$1: function(object) {
    var t1, rest, bucket, index;
    if (!(typeof object === "string" && object !== "__proto__"))
      t1 = typeof object === "number" && (object & 0x3ffffff) === object;
    else
      t1 = true;
    if (t1)
      return this.contains$1(this, object) ? object : null;
    rest = this._rest;
    if (rest == null)
      return;
    bucket = rest[this._computeHashCode$1(object)];
    index = this._findBucketIndex$2(bucket, object);
    if (index < 0)
      return;
    return J.$index$asx(bucket, index);
  },
  add$1: function(_, element) {
    var rest, hash, bucket;
    rest = this._rest;
    if (rest == null) {
      rest = P._HashSet__newHashTable();
      this._rest = rest;
    }
    hash = this._computeHashCode$1(element);
    bucket = rest[hash];
    if (bucket == null)
      rest[hash] = [element];
    else {
      if (this._findBucketIndex$2(bucket, element) >= 0)
        return false;
      bucket.push(element);
    }
    this._collection$_length = this._collection$_length + 1;
    this._elements = null;
    return true;
  },
  remove$1: function(_, object) {
    var rest, bucket, index;
    rest = this._rest;
    if (rest == null)
      return false;
    bucket = rest[this._computeHashCode$1(object)];
    index = this._findBucketIndex$2(bucket, object);
    if (index < 0)
      return false;
    this._collection$_length = this._collection$_length - 1;
    this._elements = null;
    bucket.splice(index, 1);
    return true;
  },
  clear$0: function(_) {
    if (this._collection$_length > 0) {
      this._elements = null;
      this._rest = null;
      this._nums = null;
      this._strings = null;
      this._collection$_length = 0;
    }
  },
  _computeElements$0: function() {
    var t1, result, strings, names, entries, index, i, nums, rest, bucket, $length, i0;
    t1 = this._elements;
    if (t1 != null)
      return t1;
    result = P.List_List(this._collection$_length, null);
    strings = this._strings;
    if (strings != null) {
      names = Object.getOwnPropertyNames(strings);
      entries = names.length;
      for (index = 0, i = 0; i < entries; ++i) {
        result[index] = names[i];
        ++index;
      }
    } else
      index = 0;
    nums = this._nums;
    if (nums != null) {
      names = Object.getOwnPropertyNames(nums);
      entries = names.length;
      for (i = 0; i < entries; ++i) {
        result[index] = +names[i];
        ++index;
      }
    }
    rest = this._rest;
    if (rest != null) {
      names = Object.getOwnPropertyNames(rest);
      entries = names.length;
      for (i = 0; i < entries; ++i) {
        bucket = rest[names[i]];
        $length = bucket.length;
        for (i0 = 0; i0 < $length; ++i0) {
          result[index] = bucket[i0];
          ++index;
        }
      }
    }
    this._elements = result;
    return result;
  },
  _computeHashCode$1: function(element) {
    return J.get$hashCode$(element) & 0x3ffffff;
  },
  _findBucketIndex$2: function(bucket, element) {
    var $length, i;
    if (bucket == null)
      return -1;
    $length = bucket.length;
    for (i = 0; i < $length; ++i)
      if (J.$eq(bucket[i], element))
        return i;
    return -1;
  },
  $as_HashSetBase: null,
  $isEfficientLength: true
},

_IdentityHashSet: {"": "_HashSet;_collection$_length,_strings,_nums,_rest,_elements",
  _computeHashCode$1: function(key) {
    return H.objectHashCode(key) & 0x3ffffff;
  },
  _findBucketIndex$2: function(bucket, element) {
    var $length, i, t1;
    if (bucket == null)
      return -1;
    $length = bucket.length;
    for (i = 0; i < $length; ++i) {
      t1 = bucket[i];
      if (t1 == null ? element == null : t1 === element)
        return i;
    }
    return -1;
  },
  $as_HashSet: null
},

HashSetIterator: {"": "Object;_set,_elements,_offset,_collection$_current",
  get$current: function() {
    return this._collection$_current;
  },
  moveNext$0: function() {
    var elements, offset, t1;
    elements = this._elements;
    offset = this._offset;
    t1 = this._set;
    if (elements !== t1._elements)
      throw H.wrapException(P.ConcurrentModificationError$(t1));
    else if (offset >= elements.length) {
      this._collection$_current = null;
      return false;
    } else {
      this._collection$_current = elements[offset];
      this._offset = offset + 1;
      return true;
    }
  }
},

_LinkedHashSet: {"": "_HashSetBase;_collection$_length,_strings,_nums,_rest,_first,_last,_modifications",
  get$iterator: function(_) {
    var t1 = new P.LinkedHashSetIterator(this, this._modifications, null, null);
    H.setRuntimeTypeInfo(t1, [null]);
    t1._cell = t1._set._first;
    return t1;
  },
  get$length: function(_) {
    return this._collection$_length;
  },
  contains$1: function(_, object) {
    var strings, nums, rest;
    if (typeof object === "string" && object !== "__proto__") {
      strings = this._strings;
      if (strings == null)
        return false;
      return strings[object] != null;
    } else if (typeof object === "number" && (object & 0x3ffffff) === object) {
      nums = this._nums;
      if (nums == null)
        return false;
      return nums[object] != null;
    } else {
      rest = this._rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(rest[this._computeHashCode$1(object)], object) >= 0;
    }
  },
  lookup$1: function(object) {
    var t1, rest, bucket, index;
    if (!(typeof object === "string" && object !== "__proto__"))
      t1 = typeof object === "number" && (object & 0x3ffffff) === object;
    else
      t1 = true;
    if (t1)
      return this.contains$1(this, object) ? object : null;
    else {
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(object)];
      index = this._findBucketIndex$2(bucket, object);
      if (index < 0)
        return;
      return J.$index$asx(bucket, index).get$_element();
    }
  },
  forEach$1: function(_, action) {
    var cell, modifications;
    cell = this._first;
    modifications = this._modifications;
    for (; cell != null;) {
      action.call$1(cell.get$_element());
      if (modifications !== this._modifications)
        throw H.wrapException(P.ConcurrentModificationError$(this));
      cell = cell._next;
    }
  },
  add$1: function(_, element) {
    var rest, hash, bucket;
    rest = this._rest;
    if (rest == null) {
      rest = P._LinkedHashSet__newHashTable();
      this._rest = rest;
    }
    hash = this._computeHashCode$1(element);
    bucket = rest[hash];
    if (bucket == null)
      rest[hash] = [this._newLinkedCell$1(element)];
    else {
      if (this._findBucketIndex$2(bucket, element) >= 0)
        return false;
      bucket.push(this._newLinkedCell$1(element));
    }
    return true;
  },
  clear$0: function(_) {
    if (this._collection$_length > 0) {
      this._last = null;
      this._first = null;
      this._rest = null;
      this._nums = null;
      this._strings = null;
      this._collection$_length = 0;
      this._modifications = this._modifications + 1 & 67108863;
    }
  },
  _newLinkedCell$1: function(element) {
    var cell, last;
    cell = new P.LinkedHashSetCell(element, null, null);
    if (this._first == null) {
      this._last = cell;
      this._first = cell;
    } else {
      last = this._last;
      cell._previous = last;
      last.set$_next(cell);
      this._last = cell;
    }
    this._collection$_length = this._collection$_length + 1;
    this._modifications = this._modifications + 1 & 67108863;
    return cell;
  },
  _computeHashCode$1: function(element) {
    return J.get$hashCode$(element) & 0x3ffffff;
  },
  _findBucketIndex$2: function(bucket, element) {
    var $length, i;
    if (bucket == null)
      return -1;
    $length = bucket.length;
    for (i = 0; i < $length; ++i)
      if (bucket[i].get$_element() === element)
        return i;
    return -1;
  },
  $as_HashSetBase: null,
  $isEfficientLength: true,
  static: {
_LinkedHashSet__newHashTable: function() {
  var table = Object.create(null);
  table["<non-identifier-key>"] = table;
  delete table["<non-identifier-key>"];
  return table;
}}

},

LinkedHashSetCell: {"": "Object;_element<,_next@,_previous@"},

LinkedHashSetIterator: {"": "Object;_set,_modifications,_cell,_collection$_current",
  get$current: function() {
    return this._collection$_current;
  },
  moveNext$0: function() {
    var t1 = this._set;
    if (this._modifications !== t1._modifications)
      throw H.wrapException(P.ConcurrentModificationError$(t1));
    else {
      t1 = this._cell;
      if (t1 == null) {
        this._collection$_current = null;
        return false;
      } else {
        this._collection$_current = t1.get$_element();
        this._cell = this._cell.get$_next();
        return true;
      }
    }
  }
},

_HashSetBase: {"": "IterableBase;",
  toString$0: function(_) {
    return H.IterableMixinWorkaround_toStringIterable(this, "{", "}");
  },
  $asIterableBase: null,
  $isEfficientLength: true
},

IterableBase: {"": "Object;",
  forEach$1: function(_, f) {
    var t1;
    for (t1 = this.get$iterator(this); t1.moveNext$0();)
      f.call$1(t1.get$current());
  },
  toList$1$growable: function(_, growable) {
    return P.List_List$from(this, growable, H.getRuntimeTypeArgument(this, "IterableBase", 0));
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$length: function(_) {
    var it, count;
    it = this.get$iterator(this);
    for (count = 0; it.moveNext$0();)
      ++count;
    return count;
  },
  elementAt$1: function(_, index) {
    var t1, remaining, element;
    if (index < 0)
      throw H.wrapException(P.RangeError$value(index));
    for (t1 = this.get$iterator(this), remaining = index; t1.moveNext$0();) {
      element = t1.get$current();
      if (remaining === 0)
        return element;
      --remaining;
    }
    throw H.wrapException(P.RangeError$value(index));
  },
  toString$0: function(_) {
    return P._iterableToString(this);
  }
},

ListMixin: {"": "Object;",
  get$iterator: function(receiver) {
    var t1 = new H.ListIterator(receiver, this.get$length(receiver), 0, null);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
    return t1;
  },
  elementAt$1: function(receiver, index) {
    return this.$index(receiver, index);
  },
  forEach$1: function(receiver, action) {
    var $length, i;
    $length = this.get$length(receiver);
    if (typeof $length !== "number")
      throw H.iae($length);
    i = 0;
    for (; i < $length; ++i) {
      action.call$1(this.$index(receiver, i));
      if ($length !== this.get$length(receiver))
        throw H.wrapException(P.ConcurrentModificationError$(receiver));
    }
  },
  get$isEmpty: function(receiver) {
    return this.get$length(receiver) === 0;
  },
  clear$0: function(receiver) {
    this.set$length(receiver, 0);
  },
  toString$0: function(receiver) {
    var result, t1;
    t1 = $.get$_toStringVisiting();
    if (t1.contains$1(t1, receiver))
      return "[...]";
    result = P.StringBuffer$("");
    try {
      t1 = $.get$_toStringVisiting();
      t1.add$1(t1, receiver);
      J.write$1$x(result, "[");
      result.writeAll$2(receiver, ", ");
      J.write$1$x(result, "]");
    } finally {
      t1 = $.get$_toStringVisiting();
      t1.remove$1(t1, receiver);
    }
    return result.get$_contents();
  },
  $isList: true,
  $asList: null,
  $isEfficientLength: true
},

Maps_mapToString_closure: {"": "Closure;box_0,result_1",
  call$2: function(k, v) {
    var t1, t2;
    t1 = this.box_0;
    if (!t1.first_0) {
      t2 = this.result_1;
      t2.write$1(t2, ", ");
    }
    t1.first_0 = false;
    t1 = this.result_1;
    t1.write$1(t1, k);
    t1.write$1(t1, ": ");
    t1.write$1(t1, v);
  },
  $is_args2: true
},

ListQueue: {"": "IterableBase;_table,_head,_tail,_modificationCount",
  get$iterator: function(_) {
    return P._ListQueueIterator$(this, H.getRuntimeTypeArgument(this, "ListQueue", 0));
  },
  forEach$1: function(_, action) {
    var modificationCount, i, t1;
    modificationCount = this._modificationCount;
    for (i = this._head; i !== this._tail; i = (i + 1 & this._table.length - 1) >>> 0) {
      t1 = this._table;
      if (i < 0 || i >= t1.length)
        throw H.ioore(t1, i);
      action.call$1(t1[i]);
      if (modificationCount !== this._modificationCount)
        H.throwExpression(P.ConcurrentModificationError$(this));
    }
  },
  get$length: function(_) {
    return (this._tail - this._head & this._table.length - 1) >>> 0;
  },
  clear$0: function(_) {
    var i, t1, t2, t3, t4;
    i = this._head;
    t1 = this._tail;
    if (i !== t1) {
      for (t2 = this._table, t3 = t2.length, t4 = t3 - 1; i !== t1; i = (i + 1 & t4) >>> 0) {
        if (i < 0 || i >= t3)
          throw H.ioore(t2, i);
        t2[i] = null;
      }
      this._tail = 0;
      this._head = 0;
      this._modificationCount = this._modificationCount + 1;
    }
  },
  toString$0: function(_) {
    return H.IterableMixinWorkaround_toStringIterable(this, "{", "}");
  },
  removeFirst$0: function() {
    var t1, t2, t3, result;
    if (this._head === this._tail)
      throw H.wrapException(P.StateError$("No elements"));
    this._modificationCount = this._modificationCount + 1;
    t1 = this._table;
    t2 = this._head;
    t3 = t1.length;
    if (t2 < 0 || t2 >= t3)
      throw H.ioore(t1, t2);
    result = t1[t2];
    this._head = (t2 + 1 & t3 - 1) >>> 0;
    return result;
  },
  _add$1: function(_, element) {
    var t1, t2, t3;
    t1 = this._table;
    t2 = this._tail;
    t3 = t1.length;
    if (t2 < 0 || t2 >= t3)
      throw H.ioore(t1, t2);
    t1[t2] = element;
    this._tail = (t2 + 1 & t3 - 1) >>> 0;
    if (this._head === this._tail)
      this._grow$0();
    this._modificationCount = this._modificationCount + 1;
  },
  _grow$0: function() {
    var newTable, t1, t2, split;
    newTable = P.List_List(this._table.length * 2, H.getRuntimeTypeArgument(this, "ListQueue", 0));
    H.setRuntimeTypeInfo(newTable, [H.getRuntimeTypeArgument(this, "ListQueue", 0)]);
    t1 = this._table;
    t2 = this._head;
    split = t1.length - t2;
    H.IterableMixinWorkaround_setRangeList(newTable, 0, split, t1, t2);
    t1 = this._head;
    t2 = this._table;
    H.IterableMixinWorkaround_setRangeList(newTable, split, split + t1, t2, 0);
    this._head = 0;
    this._tail = this._table.length;
    this._table = newTable;
  },
  ListQueue$1: function(initialCapacity, $E) {
    var t1 = P.List_List(8, $E);
    H.setRuntimeTypeInfo(t1, [$E]);
    this._table = t1;
  },
  $asIterableBase: null,
  $isEfficientLength: true,
  static: {
"": "ListQueue__INITIAL_CAPACITY",
ListQueue$: function(initialCapacity, $E) {
  var t1 = new P.ListQueue(null, 0, 0, 0);
  H.setRuntimeTypeInfo(t1, [$E]);
  t1.ListQueue$1(initialCapacity, $E);
  return t1;
}}

},

_ListQueueIterator: {"": "Object;_queue,_end,_modificationCount,_collection$_position,_collection$_current",
  get$current: function() {
    return this._collection$_current;
  },
  moveNext$0: function() {
    var t1, t2, t3;
    t1 = this._queue;
    if (this._modificationCount !== t1._modificationCount)
      H.throwExpression(P.ConcurrentModificationError$(t1));
    t2 = this._collection$_position;
    if (t2 === this._end) {
      this._collection$_current = null;
      return false;
    }
    t3 = t1._table;
    if (t2 < 0 || t2 >= t3.length)
      throw H.ioore(t3, t2);
    this._collection$_current = t3[t2];
    this._collection$_position = (this._collection$_position + 1 & t1._table.length - 1) >>> 0;
    return true;
  },
  static: {
_ListQueueIterator$: function(queue, $E) {
  var t1 = new P._ListQueueIterator(queue, queue._tail, queue._modificationCount, queue._head, null);
  H.setRuntimeTypeInfo(t1, [$E]);
  return t1;
}}

}}],
["dart.core", "dart:core", , P, {
_symbolToString: function(symbol) {
  return H.Symbol_getName(symbol);
},

Error_safeToString: function(object) {
  var buffer, t1, i, codeUnit, t2, charCodes;
  if (typeof object === "number" || typeof object === "boolean" || null == object)
    return J.toString$0(object);
  if (typeof object === "string") {
    buffer = new P.StringBuffer("");
    buffer._contents = "\"";
    for (t1 = object.length, i = 0; i < t1; ++i) {
      codeUnit = C.JSString_methods.codeUnitAt$1(object, i);
      if (codeUnit <= 31)
        if (codeUnit === 10)
          buffer._contents = buffer._contents + "\\n";
        else if (codeUnit === 13)
          buffer._contents = buffer._contents + "\\r";
        else if (codeUnit === 9)
          buffer._contents = buffer._contents + "\\t";
        else {
          buffer._contents = buffer._contents + "\\x";
          if (codeUnit < 16)
            buffer._contents = buffer._contents + "0";
          else {
            buffer._contents = buffer._contents + "1";
            codeUnit -= 16;
          }
          t2 = codeUnit < 10 ? 48 + codeUnit : 87 + codeUnit;
          charCodes = P.List_List$filled(1, t2, J.JSInt);
          charCodes.$builtinTypeInfo = [J.JSInt];
          t2 = H.Primitives_stringFromCharCodes(charCodes);
          buffer._contents = buffer._contents + t2;
        }
      else if (codeUnit === 92)
        buffer._contents = buffer._contents + "\\\\";
      else if (codeUnit === 34)
        buffer._contents = buffer._contents + "\\\"";
      else {
        charCodes = P.List_List$filled(1, codeUnit, J.JSInt);
        charCodes.$builtinTypeInfo = [J.JSInt];
        t2 = H.Primitives_stringFromCharCodes(charCodes);
        buffer._contents = buffer._contents + t2;
      }
    }
    buffer._contents = buffer._contents + "\"";
    return buffer._contents;
  }
  return "Instance of '" + H.Primitives_objectTypeName(object) + "'";
},

Exception_Exception: function(message) {
  return new P._ExceptionImplementation(message);
},

identical: function(a, b) {
  return a == null ? b == null : a === b;
},

identityHashCode: function(object) {
  return H.objectHashCode(object);
},

List_List: function($length, $E) {
  if ($length == null)
    return new Array(0);
  if (typeof $length !== "number" || Math.floor($length) !== $length || $length < 0)
    throw H.wrapException(P.ArgumentError$("Length must be a positive integer: " + H.S($length) + "."));
  return H.Primitives_newFixedList($length);
},

List_List$filled: function($length, fill, $E) {
  var result, t1, i;
  if ($length < 0)
    throw H.wrapException(P.ArgumentError$("Length must be a positive integer: " + $length + "."));
  result = H.Primitives_newFixedList($length);
  if ($length !== 0 && true)
    for (t1 = result.length, i = 0; i < t1; ++i)
      result[i] = fill;
  return result;
},

List_List$from: function(other, growable, $E) {
  var list, t1, $length, fixedList, i;
  list = P.List_List(null, $E);
  H.setRuntimeTypeInfo(list, [$E]);
  for (t1 = J.get$iterator$ax(other); t1.moveNext$0();)
    list.push(t1.get$current());
  if (growable)
    return list;
  $length = list.length;
  fixedList = P.List_List($length, $E);
  H.setRuntimeTypeInfo(fixedList, [$E]);
  for (t1 = list.length, i = 0; i < $length; ++i) {
    if (i >= t1)
      throw H.ioore(list, i);
    fixedList[i] = list[i];
  }
  return fixedList;
},

print: function(object) {
  var line = J.toString$0(object);
  H.printToConsole(line);
},

NoSuchMethodError_toString_closure: {"": "Closure;box_0",
  call$2: function(key, value) {
    var t1, t2;
    t1 = this.box_0;
    if (t1.i_1 > 0) {
      t2 = t1.sb_0;
      t2.write$1(t2, ", ");
    }
    t1 = t1.sb_0;
    t1.write$1(t1, P._symbolToString(key));
  },
  $is_args2: true
},

DateTime: {"": "Object;millisecondsSinceEpoch,isUtc",
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = J.getInterceptor(other);
    if (typeof other !== "object" || other === null || !t1.$isDateTime)
      return false;
    return this.millisecondsSinceEpoch === other.millisecondsSinceEpoch && this.isUtc === other.isUtc;
  },
  get$hashCode: function(_) {
    return this.millisecondsSinceEpoch;
  },
  toString$0: function(_) {
    var t1, y, m, d, h, min, sec, ms;
    t1 = new P.DateTime_toString_twoDigits();
    y = new P.DateTime_toString_fourDigits().call$1(H.Primitives_getYear(this));
    m = t1.call$1(H.Primitives_getMonth(this));
    d = t1.call$1(H.Primitives_getDay(this));
    h = t1.call$1(H.Primitives_getHours(this));
    min = t1.call$1(H.Primitives_getMinutes(this));
    sec = t1.call$1(H.Primitives_getSeconds(this));
    ms = new P.DateTime_toString_threeDigits().call$1(H.Primitives_getMilliseconds(this));
    if (this.isUtc)
      return H.S(y) + "-" + H.S(m) + "-" + H.S(d) + " " + H.S(h) + ":" + H.S(min) + ":" + H.S(sec) + "." + H.S(ms) + "Z";
    else
      return H.S(y) + "-" + H.S(m) + "-" + H.S(d) + " " + H.S(h) + ":" + H.S(min) + ":" + H.S(sec) + "." + H.S(ms);
  },
  DateTime$_now$0: function() {
    H.Primitives_lazyAsJsDate(this);
  },
  DateTime$fromMillisecondsSinceEpoch$2$isUtc: function(millisecondsSinceEpoch, isUtc) {
    if (Math.abs(millisecondsSinceEpoch) > 8640000000000000)
      throw H.wrapException(new P.ArgumentError(millisecondsSinceEpoch));
  },
  $isDateTime: true,
  static: {
"": "DateTime_MONDAY,DateTime_TUESDAY,DateTime_WEDNESDAY,DateTime_THURSDAY,DateTime_FRIDAY,DateTime_SATURDAY,DateTime_SUNDAY,DateTime_DAYS_PER_WEEK,DateTime_JANUARY,DateTime_FEBRUARY,DateTime_MARCH,DateTime_APRIL,DateTime_MAY,DateTime_JUNE,DateTime_JULY,DateTime_AUGUST,DateTime_SEPTEMBER,DateTime_OCTOBER,DateTime_NOVEMBER,DateTime_DECEMBER,DateTime_MONTHS_PER_YEAR,DateTime__MAX_MILLISECONDS_SINCE_EPOCH",
DateTime$fromMillisecondsSinceEpoch: function(millisecondsSinceEpoch, isUtc) {
  var t1 = new P.DateTime(millisecondsSinceEpoch, isUtc);
  t1.DateTime$fromMillisecondsSinceEpoch$2$isUtc(millisecondsSinceEpoch, isUtc);
  return t1;
},

DateTime$_now: function() {
  var t1 = new P.DateTime(Date.now(), false);
  t1.DateTime$_now$0();
  return t1;
}}

},

DateTime_toString_fourDigits: {"": "Closure;",
  call$1: function(n) {
    var absN, sign;
    absN = J.abs$0$n(n);
    sign = n < 0 ? "-" : "";
    if (absN >= 1000)
      return H.S(n);
    if (absN >= 100)
      return sign + "0" + H.S(absN);
    if (absN >= 10)
      return sign + "00" + H.S(absN);
    return sign + "000" + H.S(absN);
  },
  $is_args1: true
},

DateTime_toString_threeDigits: {"": "Closure;",
  call$1: function(n) {
    var t1 = J.getInterceptor$n(n);
    if (t1.$ge(n, 100))
      return H.S(n);
    if (t1.$ge(n, 10))
      return "0" + H.S(n);
    return "00" + H.S(n);
  },
  $is_args1: true
},

DateTime_toString_twoDigits: {"": "Closure;",
  call$1: function(n) {
    if (J.$ge$n(n, 10))
      return H.S(n);
    return "0" + H.S(n);
  },
  $is_args1: true
},

Duration: {"": "Object;_duration<",
  $add: function(_, other) {
    return P.Duration$(0, 0, this._duration + other.get$_duration(), 0, 0, 0);
  },
  $sub: function(_, other) {
    return P.Duration$(0, 0, this._duration - other.get$_duration(), 0, 0, 0);
  },
  $mul: function(_, factor) {
    if (typeof factor !== "number")
      throw H.iae(factor);
    return P.Duration$(0, 0, C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(this._duration * factor)), 0, 0, 0);
  },
  $lt: function(_, other) {
    return this._duration < other.get$_duration();
  },
  $gt: function(_, other) {
    return C.JSNumber_methods.$gt(this._duration, other.get$_duration());
  },
  $le: function(_, other) {
    return this._duration <= other.get$_duration();
  },
  $ge: function(_, other) {
    return this._duration >= other.get$_duration();
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = J.getInterceptor(other);
    if (typeof other !== "object" || other === null || !t1.$isDuration)
      return false;
    return this._duration === other._duration;
  },
  get$hashCode: function(_) {
    return this._duration & 0x1FFFFFFF;
  },
  toString$0: function(_) {
    var t1, t2, twoDigitMinutes, twoDigitSeconds, sixDigitUs;
    t1 = new P.Duration_toString_twoDigits();
    t2 = this._duration;
    if (t2 < 0)
      return "-" + H.S(P.Duration$(0, 0, -t2, 0, 0, 0));
    twoDigitMinutes = t1.call$1(C.JSNumber_methods.remainder$1(C.JSNumber_methods.$tdiv(t2, 60000000), 60));
    twoDigitSeconds = t1.call$1(C.JSNumber_methods.remainder$1(C.JSNumber_methods.$tdiv(t2, 1000000), 60));
    sixDigitUs = new P.Duration_toString_sixDigits().call$1(C.JSNumber_methods.remainder$1(t2, 1000000));
    return H.S(C.JSNumber_methods.$tdiv(t2, 3600000000)) + ":" + H.S(twoDigitMinutes) + ":" + H.S(twoDigitSeconds) + "." + H.S(sixDigitUs);
  },
  $isDuration: true,
  static: {
"": "Duration_MICROSECONDS_PER_MILLISECOND,Duration_MILLISECONDS_PER_SECOND,Duration_SECONDS_PER_MINUTE,Duration_MINUTES_PER_HOUR,Duration_HOURS_PER_DAY,Duration_MICROSECONDS_PER_SECOND,Duration_MICROSECONDS_PER_MINUTE,Duration_MICROSECONDS_PER_HOUR,Duration_MICROSECONDS_PER_DAY,Duration_MILLISECONDS_PER_MINUTE,Duration_MILLISECONDS_PER_HOUR,Duration_MILLISECONDS_PER_DAY,Duration_SECONDS_PER_HOUR,Duration_SECONDS_PER_DAY,Duration_MINUTES_PER_DAY,Duration_ZERO",
Duration$: function(days, hours, microseconds, milliseconds, minutes, seconds) {
  return new P.Duration(days * 86400000000 + hours * 3600000000 + minutes * 60000000 + seconds * 1000000 + milliseconds * 1000 + microseconds);
}}

},

Duration_toString_sixDigits: {"": "Closure;",
  call$1: function(n) {
    var t1 = J.getInterceptor$n(n);
    if (t1.$ge(n, 100000))
      return H.S(n);
    if (t1.$ge(n, 10000))
      return "0" + H.S(n);
    if (t1.$ge(n, 1000))
      return "00" + H.S(n);
    if (t1.$ge(n, 100))
      return "000" + H.S(n);
    if (t1.$gt(n, 10))
      return "0000" + H.S(n);
    return "00000" + H.S(n);
  },
  $is_args1: true
},

Duration_toString_twoDigits: {"": "Closure;",
  call$1: function(n) {
    if (J.$ge$n(n, 10))
      return H.S(n);
    return "0" + H.S(n);
  },
  $is_args1: true
},

Error: {"": "Object;",
  get$stackTrace: function() {
    return new H._StackTrace(this.$thrownJsError, null);
  },
  $isError: true
},

NullThrownError: {"": "Error;",
  toString$0: function(_) {
    return "Throw of null.";
  }
},

ArgumentError: {"": "Error;message",
  toString$0: function(_) {
    var t1 = this.message;
    if (t1 != null)
      return "Illegal argument(s): " + H.S(t1);
    return "Illegal argument(s)";
  },
  static: {
ArgumentError$: function(message) {
  return new P.ArgumentError(message);
}}

},

RangeError: {"": "ArgumentError;message",
  toString$0: function(_) {
    return "RangeError: " + H.S(this.message);
  },
  static: {
RangeError$: function(message) {
  return new P.RangeError(message);
},

RangeError$value: function(value) {
  return new P.RangeError("value " + H.S(value));
},

RangeError$range: function(value, start, end) {
  return new P.RangeError("value " + H.S(value) + " not in range " + start + ".." + H.S(end));
}}

},

FallThroughError: {"": "Error;", static: {
FallThroughError$: function() {
  return new P.FallThroughError();
}}
},

UnsupportedError: {"": "Error;message",
  toString$0: function(_) {
    return "Unsupported operation: " + this.message;
  },
  static: {
UnsupportedError$: function(message) {
  return new P.UnsupportedError(message);
}}

},

UnimplementedError: {"": "Error;message",
  toString$0: function(_) {
    var t1 = this.message;
    return t1 != null ? "UnimplementedError: " + H.S(t1) : "UnimplementedError";
  },
  $isError: true,
  static: {
UnimplementedError$: function(message) {
  return new P.UnimplementedError(message);
}}

},

StateError: {"": "Error;message",
  toString$0: function(_) {
    return "Bad state: " + this.message;
  },
  static: {
StateError$: function(message) {
  return new P.StateError(message);
}}

},

ConcurrentModificationError: {"": "Error;modifiedObject",
  toString$0: function(_) {
    var t1 = this.modifiedObject;
    if (t1 == null)
      return "Concurrent modification during iteration.";
    return "Concurrent modification during iteration: " + H.S(P.Error_safeToString(t1)) + ".";
  },
  static: {
ConcurrentModificationError$: function(modifiedObject) {
  return new P.ConcurrentModificationError(modifiedObject);
}}

},

StackOverflowError: {"": "Object;",
  toString$0: function(_) {
    return "Stack Overflow";
  },
  get$stackTrace: function() {
    return;
  },
  $isError: true
},

CyclicInitializationError: {"": "Error;variableName",
  toString$0: function(_) {
    return "Reading static variable '" + this.variableName + "' during its initialization";
  },
  static: {
CyclicInitializationError$: function(variableName) {
  return new P.CyclicInitializationError(variableName);
}}

},

_ExceptionImplementation: {"": "Object;message",
  toString$0: function(_) {
    var t1 = this.message;
    if (t1 == null)
      return "Exception";
    return "Exception: " + H.S(t1);
  }
},

Expando: {"": "Object;name>",
  toString$0: function(_) {
    return "Expando:" + H.S(this.name);
  },
  $index: function(_, object) {
    var values = H.Primitives_getProperty(object, "expando$values");
    return values == null ? null : H.Primitives_getProperty(values, this._getKey$0(this));
  },
  $indexSet: function(_, object, value) {
    var values = H.Primitives_getProperty(object, "expando$values");
    if (values == null) {
      values = new P.Object();
      H.Primitives_setProperty(object, "expando$values", values);
    }
    H.Primitives_setProperty(values, this._getKey$0(this), value);
  },
  _getKey$0: function(_) {
    var key, t1;
    key = H.Primitives_getProperty(this, "expando$key");
    if (key == null) {
      t1 = $.Expando__keyCount;
      $.Expando__keyCount = t1 + 1;
      key = "expando$key$" + t1;
      H.Primitives_setProperty(this, "expando$key", key);
    }
    return key;
  },
  static: {
"": "Expando__KEY_PROPERTY_NAME,Expando__EXPANDO_PROPERTY_NAME,Expando__keyCount",
}

},

Function: {"": "Object;"},

Iterator: {"": "Object;"},

Map: {"": "Object;", $isMap: true, $asMap: null},

Null: {"": "Object;",
  toString$0: function(_) {
    return "null";
  }
},

Object: {"": ";",
  $eq: function(_, other) {
    return this === other;
  },
  get$hashCode: function(_) {
    return H.Primitives_objectHashCode(this);
  },
  toString$0: function(_) {
    return H.Primitives_objectToString(this);
  }
},

StackTrace: {"": "Object;"},

StringBuffer: {"": "Object;_contents<",
  get$length: function(_) {
    return this._contents.length;
  },
  write$1: function(_, obj) {
    var str = typeof obj === "string" ? obj : H.S(obj);
    this._contents = this._contents + str;
  },
  writeAll$2: function(objects, separator) {
    var iterator, str;
    iterator = J.get$iterator$ax(objects);
    if (!iterator.moveNext$0())
      return;
    if (separator.length === 0)
      do {
        str = iterator.get$current();
        str = typeof str === "string" ? str : H.S(str);
        this._contents = this._contents + str;
      } while (iterator.moveNext$0());
    else {
      this.write$1(this, iterator.get$current());
      for (; iterator.moveNext$0();) {
        this._contents = this._contents + separator;
        str = iterator.get$current();
        str = typeof str === "string" ? str : H.S(str);
        this._contents = this._contents + str;
      }
    }
  },
  clear$0: function(_) {
    this._contents = "";
  },
  toString$0: function(_) {
    return this._contents;
  },
  StringBuffer$1: function($content) {
    this._contents = $content;
  },
  static: {
StringBuffer$: function($content) {
  var t1 = new P.StringBuffer("");
  t1.StringBuffer$1($content);
  return t1;
}}

},

Symbol: {"": "Object;"}}],
["dart.dom.html", "dart:html", , W, {
Element__determineMouseWheelEventType: function(e) {
  if (e.onwheel !== undefined)
    return "wheel";
  else if (e.onmousewheel !== undefined)
    return "mousewheel";
  else
    return "DOMMouseScroll";
},

ImageElement_ImageElement: function(height, src, width) {
  var e = document.createElement("img", null);
  return e;
},

Window__isDartLocation: function(thing) {
  var t1, t2, exception;
  try {
    t1 = thing;
    t2 = J.getInterceptor(t1);
    return typeof t1 === "object" && t1 !== null && !!t2.$isLocation;
  } catch (exception) {
    H.unwrapException(exception);
    return false;
  }

},

_JenkinsSmiHash_combine: function(hash, value) {
  hash = 536870911 & hash + value;
  hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
  return (hash ^ C.JSInt_methods.$shr(hash, 6)) >>> 0;
},

_JenkinsSmiHash_finish: function(hash) {
  hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
  hash = (hash ^ C.JSInt_methods.$shr(hash, 11)) >>> 0;
  return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
},

_wrapZone: function(callback) {
  var t1 = $.Zone__current;
  if (t1 === C.C__RootZone)
    return callback;
  return t1.bindUnaryCallback$2$runGuarded(callback, true);
},

HtmlElement: {"": "Element;", "%": "HTMLAppletElement|HTMLAreaElement|HTMLBRElement|HTMLBaseElement|HTMLBaseFontElement|HTMLContentElement|HTMLDListElement|HTMLDataListElement|HTMLDetailsElement|HTMLDialogElement|HTMLDirectoryElement|HTMLDivElement|HTMLFontElement|HTMLFrameElement|HTMLFrameSetElement|HTMLHRElement|HTMLHeadElement|HTMLHeadingElement|HTMLHtmlElement|HTMLLabelElement|HTMLLegendElement|HTMLMarqueeElement|HTMLMenuElement|HTMLModElement|HTMLOptGroupElement|HTMLParagraphElement|HTMLPreElement|HTMLQuoteElement|HTMLShadowElement|HTMLSpanElement|HTMLTableCaptionElement|HTMLTableCellElement|HTMLTableColElement|HTMLTableDataCellElement|HTMLTableElement|HTMLTableHeaderCellElement|HTMLTableRowElement|HTMLTableSectionElement|HTMLTemplateElement|HTMLTitleElement|HTMLUListElement|HTMLUnknownElement;HTMLElement"},

_EntryArray: {"": "Interceptor;", $isList: true,
  $asList: function() {
    return [W.Entry];
  },
  $isEfficientLength: true,
  "%": "EntryArray"
},

AesKeyGenParams: {"": "Algorithm;length=", "%": "AesKeyGenParams"},

Algorithm: {"": "Interceptor;name=", "%": "AesCbcParams|HmacParams|RsaKeyGenParams|RsaSsaParams;Algorithm"},

AnchorElement: {"": "HtmlElement;type=",
  toString$0: function(receiver) {
    return receiver.toString();
  },
  "%": "HTMLAnchorElement"
},

Blob: {"": "Interceptor;size=,type=", "%": ";Blob"},

BodyElement: {"": "HtmlElement;",
  get$onError: function(receiver) {
    return C.EventStreamProvider_error.forElement$1(receiver);
  },
  get$onLoad: function(receiver) {
    return C.EventStreamProvider_load.forElement$1(receiver);
  },
  "%": "HTMLBodyElement"
},

ButtonElement: {"": "HtmlElement;name=,type=,value=", "%": "HTMLButtonElement"},

CanvasElement: {"": "HtmlElement;height=,width=",
  getContext$2: function(receiver, contextId, attrs) {
    return receiver.getContext(contextId, P.convertDartToNative_Dictionary(attrs));
  },
  getContext3d$6$alpha$antialias$depth$premultipliedAlpha$preserveDrawingBuffer$stencil: function(receiver, alpha, antialias, depth, premultipliedAlpha, preserveDrawingBuffer, stencil) {
    var options, context;
    options = H.fillLiteralMap(["alpha", alpha, "depth", depth, "stencil", stencil, "antialias", antialias, "premultipliedAlpha", premultipliedAlpha, "preserveDrawingBuffer", preserveDrawingBuffer], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
    context = this.getContext$2(receiver, "webgl", options);
    return context == null ? this.getContext$2(receiver, "experimental-webgl", options) : context;
  },
  getContext3d$1$stencil: function($receiver, stencil) {
    return this.getContext3d$6$alpha$antialias$depth$premultipliedAlpha$preserveDrawingBuffer$stencil($receiver, true, true, true, true, false, stencil);
  },
  $isCanvasElement: true,
  "%": "HTMLCanvasElement"
},

CanvasRenderingContext: {"": "Interceptor;", "%": ";CanvasRenderingContext"},

CanvasRenderingContext2D: {"": "CanvasRenderingContext;",
  getContextAttributes$0: function(receiver) {
    return receiver.getContextAttributes();
  },
  "%": "CanvasRenderingContext2D"
},

CharacterData: {"": "Node;length=", "%": "CDATASection|CharacterData|Comment|ProcessingInstruction|Text"},

CryptoKey: {"": "Interceptor;type=", "%": "Key"},

CssKeyframesRule: {"": "CssRule;name=", "%": "CSSKeyframesRule|MozCSSKeyframesRule|WebKitCSSKeyframesRule"},

CssRule: {"": "Interceptor;type=", "%": "CSSCharsetRule|CSSFontFaceRule|CSSHostRule|CSSImportRule|CSSKeyframeRule|CSSMediaRule|CSSPageRule|CSSStyleRule|CSSSupportsRule|CSSUnknownRule|CSSViewportRule|MozCSSKeyframeRule|WebKitCSSFilterRule|WebKitCSSKeyframeRule|WebKitCSSRegionRule;CSSRule"},

CssStyleDeclaration: {"": "Interceptor_CssStyleDeclarationBase;length=",
  getPropertyValue$1: function(receiver, propertyName) {
    var propValue = receiver.getPropertyValue(propertyName);
    return propValue != null ? propValue : "";
  },
  "%": "CSS2Properties|CSSStyleDeclaration|MSStyleCSSProperties"
},

CssVariablesMap: {"": "Interceptor;size=",
  clear$0: function(receiver) {
    return receiver.clear();
  },
  "%": "CSSVariablesMap"
},

DataTransferItem: {"": "Interceptor;type=", "%": "DataTransferItem"},

DataTransferItemList: {"": "Interceptor;length=",
  clear$0: function(receiver) {
    return receiver.clear();
  },
  "%": "DataTransferItemList"
},

DeviceAcceleration: {"": "Interceptor;x=,y=", "%": "DeviceAcceleration"},

DomError: {"": "Interceptor;name=", "%": "DOMError|FileError"},

DomException: {"": "Interceptor;",
  get$name: function(receiver) {
    var errorName = receiver.name;
    if (P.Device_isWebKit() === true && errorName === "SECURITY_ERR")
      return "SecurityError";
    if (P.Device_isWebKit() === true && errorName === "SYNTAX_ERR")
      return "SyntaxError";
    return errorName;
  },
  toString$0: function(receiver) {
    return receiver.toString();
  },
  "%": "DOMException"
},

DomSettableTokenList: {"": "DomTokenList;value=", "%": "DOMSettableTokenList"},

DomStringList: {"": "Interceptor_ListMixin_ImmutableListMixin;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index < 0 || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  $asList: function() {
    return [J.JSString];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "DOMStringList"
},

DomTokenList: {"": "Interceptor;length=",
  toString$0: function(receiver) {
    return receiver.toString();
  },
  "%": ";DOMTokenList"
},

Element: {"": "Node;",
  toString$0: function(receiver) {
    return receiver.localName;
  },
  get$onError: function(receiver) {
    return C.EventStreamProvider_error.forElement$1(receiver);
  },
  get$onLoad: function(receiver) {
    return C.EventStreamProvider_load.forElement$1(receiver);
  },
  "%": ";Element"
},

EmbedElement: {"": "HtmlElement;height=,name=,src},type=,width=", "%": "HTMLEmbedElement"},

Entry: {"": "Interceptor;name=", "%": "DirectoryEntry|Entry|FileEntry"},

ErrorEvent: {"": "Event;error=", "%": "ErrorEvent"},

Event: {"": "Interceptor;timeStamp=,type=",
  preventDefault$0: function(receiver) {
    return receiver.preventDefault();
  },
  "%": "AudioProcessingEvent|AutocompleteErrorEvent|BeforeLoadEvent|BeforeUnloadEvent|CSSFontFaceLoadEvent|CloseEvent|CustomEvent|DeviceMotionEvent|DeviceOrientationEvent|HashChangeEvent|IDBVersionChangeEvent|MIDIConnectionEvent|MIDIMessageEvent|MediaKeyEvent|MediaKeyMessageEvent|MediaKeyNeededEvent|MediaStreamEvent|MediaStreamTrackEvent|MessageEvent|MutationEvent|OfflineAudioCompletionEvent|OverflowEvent|PageTransitionEvent|PopStateEvent|ProgressEvent|RTCDTMFToneChangeEvent|RTCDataChannelEvent|RTCIceCandidateEvent|ResourceProgressEvent|SecurityPolicyViolationEvent|SpeechInputEvent|SpeechRecognitionEvent|StorageEvent|TrackEvent|TransitionEvent|WebGLContextEvent|WebKitAnimationEvent|WebKitTransitionEvent|XMLHttpRequestProgressEvent;Event"
},

EventTarget: {"": "Interceptor;",
  addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, H.convertDartClosureToJS(listener, 1), useCapture);
  },
  removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, H.convertDartClosureToJS(listener, 1), useCapture);
  },
  "%": "ApplicationCache|AudioContext|DOMApplicationCache|EventSource|FontFaceSet|MIDIAccess|MediaController|MediaSource|MediaStream|MediaStreamTrack|MessagePort|Notification|OfflineAudioContext|OfflineResourceList|Performance|RTCDTMFSender|RTCPeerConnection|SharedWorker|SpeechRecognition|SpeechSynthesisUtterance|WebKitMediaSource|WebKitSourceBufferList|Worker|mozRTCPeerConnection|webkitAudioContext;EventTarget;EventTarget_ListMixin|EventTarget_ListMixin_ImmutableListMixin|EventTarget_ListMixin0|EventTarget_ListMixin_ImmutableListMixin0"
},

FieldSetElement: {"": "HtmlElement;name=,type=", "%": "HTMLFieldSetElement"},

File: {"": "Blob;name=", "%": "File"},

FileList: {"": "Interceptor_ListMixin_ImmutableListMixin0;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index < 0 || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  $asList: function() {
    return [W.File];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "FileList"
},

FileReader: {"": "EventTarget;error=", "%": "FileReader"},

FileStream: {"": "Interceptor;type=", "%": "Stream"},

FileSystem: {"": "Interceptor;name=", "%": "DOMFileSystem"},

FileWriter: {"": "EventTarget;error=,length=",
  write$1: function(receiver, data) {
    return receiver.write(data);
  },
  "%": "FileWriter"
},

FormElement: {"": "HtmlElement;length=,name=", "%": "HTMLFormElement"},

Gamepad: {"": "Interceptor;index=", "%": "Gamepad"},

History: {"": "Interceptor;length=", "%": "History"},

HmacKeyParams: {"": "Algorithm;length=", "%": "HmacKeyParams"},

HtmlCollection: {"": "Interceptor_ListMixin_ImmutableListMixin1;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index < 0 || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  $asList: function() {
    return [W.Node];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "HTMLCollection|HTMLFormControlsCollection|HTMLOptionsCollection"
},

HttpRequest: {"": "HttpRequestEventTarget;",
  send$1: function(receiver, data) {
    return receiver.send(data);
  },
  "%": "XMLHttpRequest"
},

HttpRequestEventTarget: {"": "EventTarget;", "%": "XMLHttpRequestEventTarget|XMLHttpRequestUpload;XMLHttpRequestEventTarget"},

IFrameElement: {"": "HtmlElement;height=,name=,src},width=", "%": "HTMLIFrameElement"},

ImageElement: {"": "HtmlElement;height=,src},width=", $isImageElement: true, "%": "HTMLImageElement"},

InputElement: {"": "HtmlElement;height=,name=,size=,src},type=,value=,width=", "%": "HTMLInputElement"},

KeyboardEvent: {"": "UIEvent;location=",
  get$keyCode: function(receiver) {
    return receiver.keyCode;
  },
  "%": "KeyboardEvent"
},

KeygenElement: {"": "HtmlElement;name=,type=", "%": "HTMLKeygenElement"},

LIElement: {"": "HtmlElement;value=", "%": "HTMLLIElement"},

LinkElement: {"": "HtmlElement;type=", "%": "HTMLLinkElement"},

Location: {"": "Interceptor;",
  toString$0: function(receiver) {
    return receiver.toString();
  },
  $isLocation: true,
  "%": "Location"
},

MapElement: {"": "HtmlElement;name=", "%": "HTMLMapElement"},

MediaElement: {"": "HtmlElement;error=,src}", "%": "HTMLAudioElement;HTMLMediaElement"},

MediaKeySession: {"": "EventTarget;error=", "%": "MediaKeySession"},

MediaList: {"": "Interceptor;length=", "%": "MediaList"},

MetaElement: {"": "HtmlElement;name=", "%": "HTMLMetaElement"},

Metadata: {"": "Interceptor;size=", "%": "Metadata"},

MeterElement: {"": "HtmlElement;value=", "%": "HTMLMeterElement"},

MidiOutput: {"": "MidiPort;",
  send$2: function(receiver, data, timestamp) {
    return receiver.send(data, timestamp);
  },
  send$1: function($receiver, data) {
    return $receiver.send(data);
  },
  "%": "MIDIOutput"
},

MidiPort: {"": "EventTarget;name=,type=", "%": "MIDIInput;MIDIPort"},

MimeType: {"": "Interceptor;type=", "%": "MimeType"},

MimeTypeArray: {"": "Interceptor_ListMixin_ImmutableListMixin2;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index < 0 || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  $asList: function() {
    return [W.MimeType];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "MimeTypeArray"
},

MouseEvent: {"": "UIEvent;button=,_clientX:clientX=",
  get$client: function(receiver) {
    var t1 = new P.Point(receiver.clientX, receiver.clientY);
    H.setRuntimeTypeInfo(t1, [null]);
    return t1;
  },
  get$movement: function(receiver) {
    var t1 = new P.Point(receiver.webkitMovementX, receiver.webkitMovementY);
    H.setRuntimeTypeInfo(t1, [null]);
    return t1;
  },
  "%": ";DragEvent|MSPointerEvent|MouseEvent|PointerEvent"
},

MutationRecord: {"": "Interceptor;type=", "%": "MutationRecord"},

NamedFlow: {"": "EventTarget;name=", "%": "WebKitNamedFlow"},

NamedFlowCollection: {"": "Interceptor;length=", "%": "WebKitNamedFlowCollection"},

NavigatorUserMediaError: {"": "Interceptor;name=", "%": "NavigatorUserMediaError"},

Node: {"": "EventTarget;",
  toString$0: function(receiver) {
    var t1 = receiver.nodeValue;
    return t1 == null ? J.Interceptor.prototype.toString$0.call(this, receiver) : t1;
  },
  "%": "Document|DocumentFragment|DocumentType|Entity|HTMLDocument|Notation|SVGDocument|ShadowRoot;Node"
},

NodeList: {"": "Interceptor_ListMixin_ImmutableListMixin3;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index < 0 || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  $asList: function() {
    return [W.Node];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "NodeList|RadioNodeList"
},

OListElement: {"": "HtmlElement;type=", "%": "HTMLOListElement"},

ObjectElement: {"": "HtmlElement;height=,name=,type=,width=", "%": "HTMLObjectElement"},

OptionElement: {"": "HtmlElement;index=,value=", "%": "HTMLOptionElement"},

OutputElement: {"": "HtmlElement;name=,type=,value=", "%": "HTMLOutputElement"},

ParamElement: {"": "HtmlElement;name=,value=", "%": "HTMLParamElement"},

PerformanceEntry: {"": "Interceptor;name=", "%": "PerformanceEntry|PerformanceMark|PerformanceMeasure|PerformanceResourceTiming"},

PerformanceNavigation: {"": "Interceptor;type=", "%": "PerformanceNavigation"},

Plugin: {"": "Interceptor;length=,name=", "%": "Plugin"},

PluginArray: {"": "Interceptor_ListMixin_ImmutableListMixin4;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index < 0 || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  $asList: function() {
    return [W.Plugin];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "PluginArray"
},

ProgressElement: {"": "HtmlElement;value=", "%": "HTMLProgressElement"},

Range: {"": "Interceptor;",
  toString$0: function(receiver) {
    return receiver.toString();
  },
  "%": "Range"
},

RtcDataChannel: {"": "EventTarget;",
  send$1: function(receiver, data) {
    return receiver.send(data);
  },
  "%": "DataChannel|RTCDataChannel"
},

RtcSessionDescription: {"": "Interceptor;type=", "%": "RTCSessionDescription|mozRTCSessionDescription"},

RtcStatsReport: {"": "Interceptor;type=", "%": "RTCStatsReport"},

ScriptElement: {"": "HtmlElement;src},type=", "%": "HTMLScriptElement"},

SelectElement: {"": "HtmlElement;length=,name=,size=,type=,value=", "%": "HTMLSelectElement"},

Selection: {"": "Interceptor;type=",
  toString$0: function(receiver) {
    return receiver.toString();
  },
  "%": "Selection"
},

SharedWorkerGlobalScope: {"": "WorkerGlobalScope;name=", "%": "SharedWorkerGlobalScope"},

SourceBuffer: {"": "EventTarget;", "%": "SourceBuffer"},

SourceBufferList: {"": "EventTarget_ListMixin_ImmutableListMixin;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index < 0 || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  $asList: function() {
    return [W.SourceBuffer];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "SourceBufferList"
},

SourceElement: {"": "HtmlElement;src},type=", "%": "HTMLSourceElement"},

SpeechGrammar: {"": "Interceptor;", "%": "SpeechGrammar"},

SpeechGrammarList: {"": "Interceptor_ListMixin_ImmutableListMixin5;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index < 0 || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  $asList: function() {
    return [W.SpeechGrammar];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "SpeechGrammarList"
},

SpeechInputResult: {"": "Interceptor;", "%": "SpeechInputResult"},

SpeechRecognitionError: {"": "Event;error=", "%": "SpeechRecognitionError"},

SpeechRecognitionResult: {"": "Interceptor;length=", "%": "SpeechRecognitionResult"},

SpeechSynthesisEvent: {"": "Event;name=", "%": "SpeechSynthesisEvent"},

SpeechSynthesisVoice: {"": "Interceptor;name=", "%": "SpeechSynthesisVoice"},

Storage: {"": "Interceptor;",
  $index: function(receiver, key) {
    return receiver.getItem(key);
  },
  $indexSet: function(receiver, key, value) {
    receiver.setItem(key, value);
  },
  clear$0: function(receiver) {
    return receiver.clear();
  },
  forEach$1: function(receiver, f) {
    var i, key;
    for (i = 0; true; ++i) {
      key = receiver.key(i);
      if (key == null)
        return;
      f.call$2(key, receiver.getItem(key));
    }
  },
  get$keys: function(receiver) {
    var keys = [];
    this.forEach$1(receiver, new W.Storage_keys_closure(keys));
    return keys;
  },
  get$values: function(receiver) {
    var values = [];
    this.forEach$1(receiver, new W.Storage_values_closure(values));
    return values;
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  get$isEmpty: function(receiver) {
    return receiver.key(0) == null;
  },
  $isMap: true,
  $asMap: function() {
    return [J.JSString, J.JSString];
  },
  "%": "Storage"
},

StyleElement: {"": "HtmlElement;type=", "%": "HTMLStyleElement"},

StyleMedia: {"": "Interceptor;type=", "%": "StyleMedia"},

StyleSheet: {"": "Interceptor;type=", "%": "CSSStyleSheet|StyleSheet"},

TextAreaElement: {"": "HtmlElement;name=,type=,value=", "%": "HTMLTextAreaElement"},

TextTrack: {"": "EventTarget;", "%": "TextTrack"},

TextTrackCue: {"": "EventTarget;size=", "%": "TextTrackCue"},

TextTrackCueList: {"": "Interceptor_ListMixin_ImmutableListMixin6;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index < 0 || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  $asList: function() {
    return [W.TextTrackCue];
  },
  $isJavaScriptIndexingBehavior: true,
  $isList: true,
  $isEfficientLength: true,
  "%": "TextTrackCueList"
},

TextTrackList: {"": "EventTarget_ListMixin_ImmutableListMixin0;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index < 0 || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  $asList: function() {
    return [W.TextTrack];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "TextTrackList"
},

TimeRanges: {"": "Interceptor;length=", "%": "TimeRanges"},

Touch: {"": "Interceptor;identifier=", "%": "Touch"},

TouchEvent: {"": "UIEvent;changedTouches=", "%": "TouchEvent"},

TouchList: {"": "Interceptor_ListMixin_ImmutableListMixin7;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index < 0 || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  $asList: function() {
    return [W.Touch];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "TouchList"
},

TrackElement: {"": "HtmlElement;src}", "%": "HTMLTrackElement"},

UIEvent: {"": "Event;",
  get$page: function(receiver) {
    var t1 = new P.Point(receiver.pageX, receiver.pageY);
    H.setRuntimeTypeInfo(t1, [null]);
    return t1;
  },
  "%": "CompositionEvent|FocusEvent|SVGZoomEvent|TextEvent;UIEvent"
},

VideoElement: {"": "MediaElement;height=,width=", $isVideoElement: true, "%": "HTMLVideoElement"},

WebSocket: {"": "EventTarget;",
  send$1: function(receiver, data) {
    return receiver.send(data);
  },
  "%": "WebSocket"
},

WheelEvent: {"": "MouseEvent;",
  get$deltaY: function(receiver) {
    var detail;
    if (receiver.deltaY !== undefined)
      return receiver.deltaY;
    else if (receiver.wheelDelta !== undefined)
      return -receiver.wheelDelta;
    else if (receiver.detail !== undefined) {
      if (receiver.axis == MouseScrollEvent.VERTICAL_AXIS) {
        detail = receiver.detail;
        if (Math.abs(detail) < 100)
          return -detail * 40;
        return -detail;
      }
      return 0;
    }
    throw H.wrapException(P.UnsupportedError$("deltaY is not supported"));
  },
  get$deltaX: function(receiver) {
    var detail;
    if (receiver.deltaX !== undefined)
      return receiver.deltaX;
    else if (receiver.wheelDeltaX !== undefined)
      return -receiver.wheelDeltaX;
    else if (receiver.detail !== undefined) {
      if (receiver.axis !== undefined && receiver.axis == MouseScrollEvent.HORIZONTAL_AXIS) {
        detail = receiver.detail;
        if (detail < 100)
          return -detail * 40;
        return -detail;
      }
      return 0;
    }
    throw H.wrapException(P.UnsupportedError$("deltaX is not supported"));
  },
  $isWheelEvent: true,
  "%": "MouseScrollEvent|MouseWheelEvent|WheelEvent"
},

Window: {"": "EventTarget;name=",
  get$location: function(receiver) {
    var result = receiver.location;
    if (W.Window__isDartLocation(result) === true)
      return result;
    if (null == receiver._location_wrapper)
      receiver._location_wrapper = new W._LocationWrapper(result);
    return receiver._location_wrapper;
  },
  _html$_requestAnimationFrame$1: function(receiver, callback) {
    return receiver.requestAnimationFrame(H.convertDartClosureToJS(callback, 1));
  },
  _ensureRequestAnimationFrame$0: function(receiver) {
    if (!!(receiver.requestAnimationFrame && receiver.cancelAnimationFrame))
      return;
      (function($this) {
   var vendors = ['ms', 'moz', 'webkit', 'o'];
   for (var i = 0; i < vendors.length && !$this.requestAnimationFrame; ++i) {
     $this.requestAnimationFrame = $this[vendors[i] + 'RequestAnimationFrame'];
     $this.cancelAnimationFrame =
         $this[vendors[i]+'CancelAnimationFrame'] ||
         $this[vendors[i]+'CancelRequestAnimationFrame'];
   }
   if ($this.requestAnimationFrame && $this.cancelAnimationFrame) return;
   $this.requestAnimationFrame = function(callback) {
      return window.setTimeout(function() {
        callback(Date.now());
      }, 16 /* 16ms ~= 60fps */);
   };
   $this.cancelAnimationFrame = function(id) { clearTimeout(id); }
  })(receiver);
  },
  toString$0: function(receiver) {
    return receiver.toString();
  },
  "%": "DOMWindow|Window"
},

WorkerGlobalScope: {"": "EventTarget;location=", "%": "DedicatedWorkerGlobalScope;WorkerGlobalScope"},

_Attr: {"": "Node;name=,value=", "%": "Attr"},

_CSSValue: {"": "Interceptor;", "%": "CSSPrimitiveValue;CSSValue;_CSSValue_ListMixin|_CSSValue_ListMixin_ImmutableListMixin"},

_ClientRect: {"": "Interceptor;height=,left=,top=,width=",
  toString$0: function(receiver) {
    return "Rectangle (" + H.S(receiver.left) + ", " + H.S(receiver.top) + ") " + H.S(receiver.width) + " x " + H.S(receiver.height);
  },
  $eq: function(receiver, other) {
    var t1, t2, t3;
    if (other == null)
      return false;
    t1 = J.getInterceptor$x(other);
    if (typeof other !== "object" || other === null || !t1.$isRectangle)
      return false;
    t2 = receiver.left;
    t3 = t1.get$left(other);
    if (t2 == null ? t3 == null : t2 === t3) {
      t2 = receiver.top;
      t3 = t1.get$top(other);
      if (t2 == null ? t3 == null : t2 === t3) {
        t2 = receiver.width;
        t3 = t1.get$width(other);
        if (t2 == null ? t3 == null : t2 === t3) {
          t2 = receiver.height;
          t1 = t1.get$height(other);
          t1 = t2 == null ? t1 == null : t2 === t1;
        } else
          t1 = false;
      } else
        t1 = false;
    } else
      t1 = false;
    return t1;
  },
  get$hashCode: function(receiver) {
    var t1, t2, t3, t4;
    t1 = J.get$hashCode$(receiver.left);
    t2 = J.get$hashCode$(receiver.top);
    t3 = J.get$hashCode$(receiver.width);
    t4 = J.get$hashCode$(receiver.height);
    return W._JenkinsSmiHash_finish(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(0, t1), t2), t3), t4));
  },
  $isRectangle: true,
  $asRectangle: function() {
    return [null];
  },
  "%": "ClientRect|DOMRect"
},

_ClientRectList: {"": "Interceptor_ListMixin_ImmutableListMixin8;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index < 0 || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  $asList: function() {
    return [P.Rectangle];
  },
  $isJavaScriptIndexingBehavior: true,
  $isList: true,
  $isEfficientLength: true,
  "%": "ClientRectList"
},

_CssRuleList: {"": "Interceptor_ListMixin_ImmutableListMixin9;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index < 0 || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  $asList: function() {
    return [W.CssRule];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "CSSRuleList"
},

_CssValueList: {"": "_CSSValue_ListMixin_ImmutableListMixin;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index < 0 || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  $asList: function() {
    return [W._CSSValue];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "CSSValueList|WebKitCSSFilterValue|WebKitCSSMixFunctionValue|WebKitCSSTransformValue"
},

_DomPoint: {"": "Interceptor;x=,y=", "%": "WebKitPoint"},

_GamepadList: {"": "Interceptor_ListMixin_ImmutableListMixin10;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index < 0 || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  $asList: function() {
    return [W.Gamepad];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "GamepadList"
},

_NamedNodeMap: {"": "Interceptor_ListMixin_ImmutableListMixin11;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index < 0 || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  $asList: function() {
    return [W.Node];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "MozNamedAttrMap|NamedNodeMap"
},

_SpeechInputResultList: {"": "Interceptor_ListMixin_ImmutableListMixin12;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index < 0 || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  $asList: function() {
    return [W.SpeechInputResult];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "SpeechInputResultList"
},

_SpeechRecognitionResultList: {"": "Interceptor_ListMixin_ImmutableListMixin13;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index < 0 || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  $asList: function() {
    return [W.SpeechRecognitionResult];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "SpeechRecognitionResultList"
},

_StyleSheetList: {"": "Interceptor_ListMixin_ImmutableListMixin14;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index < 0 || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  $asList: function() {
    return [W.StyleSheet];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "StyleSheetList"
},

Interceptor_CssStyleDeclarationBase: {"": "Interceptor+CssStyleDeclarationBase;"},

CssStyleDeclarationBase: {"": "Object;",
  get$clear: function(receiver) {
    return this.getPropertyValue$1(receiver, "clear");
  },
  clear$0: function($receiver) {
    return this.get$clear($receiver).call$0();
  },
  get$size: function(receiver) {
    return this.getPropertyValue$1(receiver, "size");
  }
},

Interceptor_ListMixin: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

Interceptor_ListMixin_ImmutableListMixin: {"": "Interceptor_ListMixin+ImmutableListMixin;", $asList: null, $isList: true, $isEfficientLength: true},

Interceptor_ListMixin0: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

Interceptor_ListMixin_ImmutableListMixin0: {"": "Interceptor_ListMixin0+ImmutableListMixin;", $asList: null, $isList: true, $isEfficientLength: true},

Interceptor_ListMixin1: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

Interceptor_ListMixin_ImmutableListMixin1: {"": "Interceptor_ListMixin1+ImmutableListMixin;", $asList: null, $isList: true, $isEfficientLength: true},

Interceptor_ListMixin2: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

Interceptor_ListMixin_ImmutableListMixin2: {"": "Interceptor_ListMixin2+ImmutableListMixin;", $asList: null, $isList: true, $isEfficientLength: true},

Interceptor_ListMixin3: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

Interceptor_ListMixin_ImmutableListMixin3: {"": "Interceptor_ListMixin3+ImmutableListMixin;", $asList: null, $isList: true, $isEfficientLength: true},

Interceptor_ListMixin4: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

Interceptor_ListMixin_ImmutableListMixin4: {"": "Interceptor_ListMixin4+ImmutableListMixin;", $asList: null, $isList: true, $isEfficientLength: true},

EventTarget_ListMixin: {"": "EventTarget+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

EventTarget_ListMixin_ImmutableListMixin: {"": "EventTarget_ListMixin+ImmutableListMixin;", $asList: null, $isList: true, $isEfficientLength: true},

Interceptor_ListMixin5: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

Interceptor_ListMixin_ImmutableListMixin5: {"": "Interceptor_ListMixin5+ImmutableListMixin;", $asList: null, $isList: true, $isEfficientLength: true},

Storage_keys_closure: {"": "Closure;keys_0",
  call$2: function(k, v) {
    return this.keys_0.push(k);
  },
  $is_args2: true
},

Storage_values_closure: {"": "Closure;values_0",
  call$2: function(k, v) {
    return this.values_0.push(v);
  },
  $is_args2: true
},

Interceptor_ListMixin6: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

Interceptor_ListMixin_ImmutableListMixin6: {"": "Interceptor_ListMixin6+ImmutableListMixin;", $asList: null, $isList: true, $isEfficientLength: true},

EventTarget_ListMixin0: {"": "EventTarget+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

EventTarget_ListMixin_ImmutableListMixin0: {"": "EventTarget_ListMixin0+ImmutableListMixin;", $asList: null, $isList: true, $isEfficientLength: true},

Interceptor_ListMixin7: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

Interceptor_ListMixin_ImmutableListMixin7: {"": "Interceptor_ListMixin7+ImmutableListMixin;", $asList: null, $isList: true, $isEfficientLength: true},

Interceptor_ListMixin8: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

Interceptor_ListMixin_ImmutableListMixin8: {"": "Interceptor_ListMixin8+ImmutableListMixin;", $asList: null, $isList: true, $isEfficientLength: true},

Interceptor_ListMixin9: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

Interceptor_ListMixin_ImmutableListMixin9: {"": "Interceptor_ListMixin9+ImmutableListMixin;", $asList: null, $isList: true, $isEfficientLength: true},

_CSSValue_ListMixin: {"": "_CSSValue+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

_CSSValue_ListMixin_ImmutableListMixin: {"": "_CSSValue_ListMixin+ImmutableListMixin;", $asList: null, $isList: true, $isEfficientLength: true},

Interceptor_ListMixin10: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

Interceptor_ListMixin_ImmutableListMixin10: {"": "Interceptor_ListMixin10+ImmutableListMixin;", $asList: null, $isList: true, $isEfficientLength: true},

Interceptor_ListMixin11: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

Interceptor_ListMixin_ImmutableListMixin11: {"": "Interceptor_ListMixin11+ImmutableListMixin;", $asList: null, $isList: true, $isEfficientLength: true},

Interceptor_ListMixin12: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

Interceptor_ListMixin_ImmutableListMixin12: {"": "Interceptor_ListMixin12+ImmutableListMixin;", $asList: null, $isList: true, $isEfficientLength: true},

Interceptor_ListMixin13: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

Interceptor_ListMixin_ImmutableListMixin13: {"": "Interceptor_ListMixin13+ImmutableListMixin;", $asList: null, $isList: true, $isEfficientLength: true},

Interceptor_ListMixin14: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

Interceptor_ListMixin_ImmutableListMixin14: {"": "Interceptor_ListMixin14+ImmutableListMixin;", $asList: null, $isList: true, $isEfficientLength: true},

EventStreamProvider: {"": "Object;_eventType",
  forTarget$2$useCapture: function(e, useCapture) {
    var t1 = new W._EventStream(e, this._eventType, useCapture);
    H.setRuntimeTypeInfo(t1, [null]);
    return t1;
  },
  forTarget$1: function(e) {
    return this.forTarget$2$useCapture(e, false);
  },
  forElement$2$useCapture: function(e, useCapture) {
    var t1 = new W._ElementEventStreamImpl(e, this._eventType, useCapture);
    H.setRuntimeTypeInfo(t1, [null]);
    return t1;
  },
  forElement$1: function(e) {
    return this.forElement$2$useCapture(e, false);
  }
},

_EventStream: {"": "Stream;_target,_eventType,_useCapture",
  listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
    var t1 = new W._EventStreamSubscription(0, this._target, this._eventType, W._wrapZone(onData), this._useCapture);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "_EventStream", 0)]);
    t1._tryResume$0();
    return t1;
  },
  $asStream: null
},

_ElementEventStreamImpl: {"": "_EventStream;_target,_eventType,_useCapture", $as_EventStream: null},

_EventStreamSubscription: {"": "StreamSubscription;_pauseCount,_target,_eventType,_onData,_useCapture",
  cancel$0: function(_) {
    if (this._target == null)
      return;
    this._unlisten$0();
    this._target = null;
    this._onData = null;
  },
  _tryResume$0: function() {
    var t1 = this._onData;
    if (t1 != null && this._pauseCount <= 0)
      J.addEventListener$3$x(this._target, this._eventType, t1, this._useCapture);
  },
  _unlisten$0: function() {
    var t1 = this._onData;
    if (t1 != null)
      J.removeEventListener$3$x(this._target, this._eventType, t1, this._useCapture);
  },
  $asStreamSubscription: null
},

_CustomEventStreamProvider: {"": "Object;_eventTypeGetter",
  _eventTypeGetter$1: function(arg0) {
    return this._eventTypeGetter.call$1(arg0);
  },
  forTarget$2$useCapture: function(e, useCapture) {
    var t1 = new W._EventStream(e, this._eventTypeGetter$1(e), useCapture);
    H.setRuntimeTypeInfo(t1, [null]);
    return t1;
  },
  forTarget$1: function(e) {
    return this.forTarget$2$useCapture(e, false);
  },
  forElement$2$useCapture: function(e, useCapture) {
    var t1 = new W._ElementEventStreamImpl(e, this._eventTypeGetter$1(e), useCapture);
    H.setRuntimeTypeInfo(t1, [null]);
    return t1;
  },
  forElement$1: function(e) {
    return this.forElement$2$useCapture(e, false);
  }
},

ImmutableListMixin: {"": "Object;",
  get$iterator: function(receiver) {
    return W.FixedSizeListIterator$(receiver, H.getRuntimeTypeArgument(receiver, "ImmutableListMixin", 0));
  },
  $isList: true,
  $asList: null,
  $isEfficientLength: true
},

FixedSizeListIterator: {"": "Object;_array,_html$_length,_position,_html$_current",
  moveNext$0: function() {
    var t1, nextPosition;
    t1 = this._position;
    if (typeof t1 !== "number")
      throw t1.$add();
    nextPosition = t1 + 1;
    t1 = this._html$_length;
    if (typeof t1 !== "number")
      throw H.iae(t1);
    if (nextPosition < t1) {
      this._html$_current = J.$index$asx(this._array, nextPosition);
      this._position = nextPosition;
      return true;
    }
    this._html$_current = null;
    this._position = t1;
    return false;
  },
  get$current: function() {
    return this._html$_current;
  },
  static: {
FixedSizeListIterator$: function(array, $T) {
  var t1 = new W.FixedSizeListIterator(array, J.get$length$asx(array), -1, null);
  H.setRuntimeTypeInfo(t1, [$T]);
  return t1;
}}

},

_LocationWrapper: {"": "Object;_ptr",
  toString$0: function(_) {
    return this._ptr.toString();
  },
  $isLocation: true
}}],
["dart.dom.indexed_db", "dart:indexed_db", , P, {
_completeRequest: function(request) {
  var t1, completer, t2;
  t1 = null;
  completer = new P._SyncCompleter(P._Future$(t1));
  H.setRuntimeTypeInfo(completer, [t1]);
  request.toString;
  t1 = C.EventStreamProvider_success.forTarget$1(request);
  t2 = new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new P._completeRequest_closure(request, completer)), t1._useCapture);
  H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "_EventStream", 0)]);
  t2._tryResume$0();
  t2 = C.EventStreamProvider_error.forTarget$1(request);
  t1 = completer.get$completeError();
  t1 = new W._EventStreamSubscription(0, t2._target, t2._eventType, W._wrapZone(t1), t2._useCapture);
  H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(t2, "_EventStream", 0)]);
  t1._tryResume$0();
  return completer.future;
},

Cursor: {"": "Interceptor;", "%": ";IDBCursor"},

CursorWithValue: {"": "Cursor;",
  get$value: function(receiver) {
    return P.convertNativeToDart_AcceptStructuredClone(receiver.value, false);
  },
  "%": "IDBCursorWithValue"
},

Database: {"": "EventTarget;name=", "%": "IDBDatabase"},

Index: {"": "Interceptor;name=", "%": "IDBIndex"},

ObjectStore: {"": "Interceptor;name=",
  clear$0: function(receiver) {
    var e, stacktrace, t1, exception;
    try {
      t1 = P._completeRequest(receiver.clear());
      return t1;
    } catch (exception) {
      t1 = H.unwrapException(exception);
      e = t1;
      stacktrace = new H._StackTrace(exception, null);
      return P._Future$immediateError(e, stacktrace, null);
    }

  },
  index$1: function(receiver, $name) {
    return receiver.index($name);
  },
  get$index: function(_receiver) {
    return new P.BoundClosure$i1(this, P.ObjectStore.prototype.index$1, _receiver, "index$1");
  },
  "%": "IDBObjectStore"
},

Request: {"": "EventTarget;error=", "%": "IDBOpenDBRequest|IDBRequest|IDBVersionChangeRequest"},

Transaction: {"": "EventTarget;error=", "%": "IDBTransaction"},

_completeRequest_closure: {"": "Closure;request_0,completer_1",
  call$1: function(e) {
    var t1, t2;
    t1 = P.convertNativeToDart_AcceptStructuredClone(this.request_0.result, false);
    t2 = this.completer_1.future;
    if (t2._state !== 0)
      H.throwExpression(P.StateError$("Future already completed"));
    t2._complete$1(t1);
  },
  $is_args1: true
}}],
["dart.dom.svg", "dart:svg", , P, {
Angle: {"": "Interceptor;value=", "%": "SVGAngle"},

ElementInstance: {"": "EventTarget;", "%": "SVGElementInstance"},

FEBlendElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGFEBlendElement"},

FEColorMatrixElement: {"": "SvgElement;type=,height=,width=,x=,y=", "%": "SVGFEColorMatrixElement"},

FEComponentTransferElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGFEComponentTransferElement"},

FECompositeElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGFECompositeElement"},

FEConvolveMatrixElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGFEConvolveMatrixElement"},

FEDiffuseLightingElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGFEDiffuseLightingElement"},

FEDisplacementMapElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGFEDisplacementMapElement"},

FEFloodElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGFEFloodElement"},

FEGaussianBlurElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGFEGaussianBlurElement"},

FEImageElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGFEImageElement"},

FEMergeElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGFEMergeElement"},

FEMorphologyElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGFEMorphologyElement"},

FEOffsetElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGFEOffsetElement"},

FEPointLightElement: {"": "SvgElement;x=,y=", "%": "SVGFEPointLightElement"},

FESpecularLightingElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGFESpecularLightingElement"},

FESpotLightElement: {"": "SvgElement;x=,y=", "%": "SVGFESpotLightElement"},

FETileElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGFETileElement"},

FETurbulenceElement: {"": "SvgElement;type=,height=,width=,x=,y=", "%": "SVGFETurbulenceElement"},

FilterElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGFilterElement"},

ForeignObjectElement: {"": "GraphicsElement;height=,width=,x=,y=", "%": "SVGForeignObjectElement"},

GraphicsElement: {"": "SvgElement;", "%": "SVGAElement|SVGCircleElement|SVGClipPathElement|SVGDefsElement|SVGEllipseElement|SVGGElement|SVGLineElement|SVGPathElement|SVGPolygonElement|SVGPolylineElement|SVGSwitchElement;SVGGraphicsElement"},

ImageElement0: {"": "GraphicsElement;height=,width=,x=,y=", "%": "SVGImageElement"},

Length: {"": "Interceptor;value=", "%": "SVGLength"},

LengthList: {"": "Interceptor_ListMixin_ImmutableListMixin15;",
  $index: function(receiver, index) {
    var t1 = receiver.numberOfItems;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver.getItem(index);
  },
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$length: function(receiver) {
    return receiver.numberOfItems;
  },
  set$length: function(receiver, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    return this.$index(receiver, index);
  },
  clear$0: function(receiver) {
    return receiver.clear();
  },
  $asList: function() {
    return [P.Length];
  },
  $isList: true,
  $isEfficientLength: true,
  "%": "SVGLengthList"
},

MaskElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGMaskElement"},

Number: {"": "Interceptor;value=", "%": "SVGNumber"},

NumberList: {"": "Interceptor_ListMixin_ImmutableListMixin16;",
  $index: function(receiver, index) {
    var t1 = receiver.numberOfItems;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver.getItem(index);
  },
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$length: function(receiver) {
    return receiver.numberOfItems;
  },
  set$length: function(receiver, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    return this.$index(receiver, index);
  },
  clear$0: function(receiver) {
    return receiver.clear();
  },
  $asList: function() {
    return [P.Number];
  },
  $isList: true,
  $isEfficientLength: true,
  "%": "SVGNumberList"
},

PathSeg: {"": "Interceptor;", "%": "SVGPathSegClosePath;SVGPathSeg"},

PathSegArcAbs: {"": "PathSeg;x=,y=", "%": "SVGPathSegArcAbs"},

PathSegArcRel: {"": "PathSeg;x=,y=", "%": "SVGPathSegArcRel"},

PathSegCurvetoCubicAbs: {"": "PathSeg;x=,y=", "%": "SVGPathSegCurvetoCubicAbs"},

PathSegCurvetoCubicRel: {"": "PathSeg;x=,y=", "%": "SVGPathSegCurvetoCubicRel"},

PathSegCurvetoCubicSmoothAbs: {"": "PathSeg;x=,y=", "%": "SVGPathSegCurvetoCubicSmoothAbs"},

PathSegCurvetoCubicSmoothRel: {"": "PathSeg;x=,y=", "%": "SVGPathSegCurvetoCubicSmoothRel"},

PathSegCurvetoQuadraticAbs: {"": "PathSeg;x=,y=", "%": "SVGPathSegCurvetoQuadraticAbs"},

PathSegCurvetoQuadraticRel: {"": "PathSeg;x=,y=", "%": "SVGPathSegCurvetoQuadraticRel"},

PathSegCurvetoQuadraticSmoothAbs: {"": "PathSeg;x=,y=", "%": "SVGPathSegCurvetoQuadraticSmoothAbs"},

PathSegCurvetoQuadraticSmoothRel: {"": "PathSeg;x=,y=", "%": "SVGPathSegCurvetoQuadraticSmoothRel"},

PathSegLinetoAbs: {"": "PathSeg;x=,y=", "%": "SVGPathSegLinetoAbs"},

PathSegLinetoHorizontalAbs: {"": "PathSeg;x=", "%": "SVGPathSegLinetoHorizontalAbs"},

PathSegLinetoHorizontalRel: {"": "PathSeg;x=", "%": "SVGPathSegLinetoHorizontalRel"},

PathSegLinetoRel: {"": "PathSeg;x=,y=", "%": "SVGPathSegLinetoRel"},

PathSegLinetoVerticalAbs: {"": "PathSeg;y=", "%": "SVGPathSegLinetoVerticalAbs"},

PathSegLinetoVerticalRel: {"": "PathSeg;y=", "%": "SVGPathSegLinetoVerticalRel"},

PathSegList: {"": "Interceptor_ListMixin_ImmutableListMixin17;",
  $index: function(receiver, index) {
    var t1 = receiver.numberOfItems;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver.getItem(index);
  },
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$length: function(receiver) {
    return receiver.numberOfItems;
  },
  set$length: function(receiver, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    return this.$index(receiver, index);
  },
  clear$0: function(receiver) {
    return receiver.clear();
  },
  $asList: function() {
    return [P.PathSeg];
  },
  $isList: true,
  $isEfficientLength: true,
  "%": "SVGPathSegList"
},

PathSegMovetoAbs: {"": "PathSeg;x=,y=", "%": "SVGPathSegMovetoAbs"},

PathSegMovetoRel: {"": "PathSeg;x=,y=", "%": "SVGPathSegMovetoRel"},

PatternElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGPatternElement"},

Point0: {"": "Interceptor;x=,y=", "%": "SVGPoint"},

PointList: {"": "Interceptor;",
  clear$0: function(receiver) {
    return receiver.clear();
  },
  "%": "SVGPointList"
},

Rect: {"": "Interceptor;x=,y=", "%": "SVGRect"},

RectElement: {"": "GraphicsElement;height=,width=,x=,y=", "%": "SVGRectElement"},

ScriptElement0: {"": "SvgElement;type=", "%": "SVGScriptElement"},

StringList: {"": "Interceptor_ListMixin_ImmutableListMixin18;",
  $index: function(receiver, index) {
    var t1 = receiver.numberOfItems;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver.getItem(index);
  },
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$length: function(receiver) {
    return receiver.numberOfItems;
  },
  set$length: function(receiver, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    return this.$index(receiver, index);
  },
  clear$0: function(receiver) {
    return receiver.clear();
  },
  $asList: function() {
    return [J.JSString];
  },
  $isList: true,
  $isEfficientLength: true,
  "%": "SVGStringList"
},

StyleElement0: {"": "SvgElement;type=", "%": "SVGStyleElement"},

SvgElement: {"": "Element;", "%": "SVGAltGlyphDefElement|SVGAltGlyphItemElement|SVGAnimateColorElement|SVGAnimateElement|SVGAnimateMotionElement|SVGAnimateTransformElement|SVGAnimationElement|SVGComponentTransferFunctionElement|SVGCursorElement|SVGDescElement|SVGFEDistantLightElement|SVGFEDropShadowElement|SVGFEFuncAElement|SVGFEFuncBElement|SVGFEFuncGElement|SVGFEFuncRElement|SVGFEMergeNodeElement|SVGFontElement|SVGFontFaceElement|SVGFontFaceFormatElement|SVGFontFaceNameElement|SVGFontFaceSrcElement|SVGFontFaceUriElement|SVGGlyphElement|SVGGlyphRefElement|SVGGradientElement|SVGHKernElement|SVGLinearGradientElement|SVGMPathElement|SVGMarkerElement|SVGMetadataElement|SVGMissingGlyphElement|SVGRadialGradientElement|SVGSetElement|SVGStopElement|SVGSymbolElement|SVGTitleElement|SVGVKernElement|SVGViewElement;SVGElement"},

SvgSvgElement: {"": "GraphicsElement;height=,width=,x=,y=", "%": "SVGSVGElement"},

TextContentElement: {"": "GraphicsElement;", "%": "SVGTextPathElement;SVGTextContentElement"},

TextPositioningElement: {"": "TextContentElement;x=,y=", "%": "SVGAltGlyphElement|SVGTSpanElement|SVGTextElement|SVGTextPositioningElement"},

Transform: {"": "Interceptor;type=", "%": "SVGTransform"},

TransformList: {"": "Interceptor_ListMixin_ImmutableListMixin19;",
  $index: function(receiver, index) {
    var t1 = receiver.numberOfItems;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver.getItem(index);
  },
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$length: function(receiver) {
    return receiver.numberOfItems;
  },
  set$length: function(receiver, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    return this.$index(receiver, index);
  },
  clear$0: function(receiver) {
    return receiver.clear();
  },
  $asList: function() {
    return [P.Transform];
  },
  $isList: true,
  $isEfficientLength: true,
  "%": "SVGTransformList"
},

UseElement: {"": "GraphicsElement;height=,width=,x=,y=", "%": "SVGUseElement"},

_ElementInstanceList: {"": "Interceptor_ListMixin_ImmutableListMixin20;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw H.wrapException(P.RangeError$range(index, 0, receiver.length));
    return receiver.item(index);
  },
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    return this.$index(receiver, index);
  },
  $asList: function() {
    return [P.ElementInstance];
  },
  $isList: true,
  $isEfficientLength: true,
  "%": "SVGElementInstanceList"
},

Interceptor_ListMixin15: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

Interceptor_ListMixin_ImmutableListMixin15: {"": "Interceptor_ListMixin15+ImmutableListMixin;", $asList: null, $isList: true, $isEfficientLength: true},

Interceptor_ListMixin16: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

Interceptor_ListMixin_ImmutableListMixin16: {"": "Interceptor_ListMixin16+ImmutableListMixin;", $asList: null, $isList: true, $isEfficientLength: true},

Interceptor_ListMixin17: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

Interceptor_ListMixin_ImmutableListMixin17: {"": "Interceptor_ListMixin17+ImmutableListMixin;", $asList: null, $isList: true, $isEfficientLength: true},

Interceptor_ListMixin18: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

Interceptor_ListMixin_ImmutableListMixin18: {"": "Interceptor_ListMixin18+ImmutableListMixin;", $asList: null, $isList: true, $isEfficientLength: true},

Interceptor_ListMixin19: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

Interceptor_ListMixin_ImmutableListMixin19: {"": "Interceptor_ListMixin19+ImmutableListMixin;", $asList: null, $isList: true, $isEfficientLength: true},

Interceptor_ListMixin20: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

Interceptor_ListMixin_ImmutableListMixin20: {"": "Interceptor_ListMixin20+ImmutableListMixin;", $asList: null, $isList: true, $isEfficientLength: true}}],
["dart.dom.web_audio", "dart:web_audio", , P, {
AudioBuffer: {"": "Interceptor;length=", "%": "AudioBuffer"},

AudioNode: {"": "EventTarget;", "%": "AnalyserNode|AudioChannelMerger|AudioChannelSplitter|AudioDestinationNode|AudioGainNode|AudioPannerNode|ChannelMergerNode|ChannelSplitterNode|ConvolverNode|DelayNode|DynamicsCompressorNode|GainNode|JavaScriptAudioNode|MediaStreamAudioDestinationNode|PannerNode|RealtimeAnalyserNode|ScriptProcessorNode|WaveShaperNode;AudioNode"},

AudioParam: {"": "Interceptor;name=,value=", "%": "AudioParam"},

AudioSourceNode: {"": "AudioNode;", "%": "AudioBufferSourceNode|MediaElementAudioSourceNode|MediaStreamAudioSourceNode;AudioSourceNode"},

BiquadFilterNode: {"": "AudioNode;type=", "%": "BiquadFilterNode"},

OscillatorNode: {"": "AudioSourceNode;type=", "%": "Oscillator|OscillatorNode"}}],
["dart.dom.web_gl", "dart:web_gl", , P, {
ActiveInfo: {"": "Interceptor;name=,size=,type=", "%": "WebGLActiveInfo"},

ContextAttributes: {"": "Interceptor;depth=,stencil=", $isContextAttributes: true, "%": "WebGLContextAttributes"},

RenderingContext: {"": "CanvasRenderingContext;",
  activeTexture$1: function(receiver, texture) {
    return receiver.activeTexture(texture);
  },
  attachShader$2: function(receiver, program, shader) {
    return receiver.attachShader(program, shader);
  },
  bindBuffer$2: function(receiver, target, buffer) {
    return receiver.bindBuffer(target, buffer);
  },
  bindTexture$2: function(receiver, target, texture) {
    return receiver.bindTexture(target, texture);
  },
  blendColor$4: function(receiver, red, green, blue, alpha) {
    return receiver.blendColor(red, green, blue, alpha);
  },
  blendEquationSeparate$2: function(receiver, modeRGB, modeAlpha) {
    return receiver.blendEquationSeparate(modeRGB, modeAlpha);
  },
  blendFuncSeparate$4: function(receiver, srcRGB, dstRGB, srcAlpha, dstAlpha) {
    return receiver.blendFuncSeparate(srcRGB, dstRGB, srcAlpha, dstAlpha);
  },
  bufferData$3: function(receiver, target, data_OR_size, usage) {
    return receiver.bufferData(target, data_OR_size, usage);
  },
  bufferDataTyped$3: function(receiver, target, data, usage) {
    return receiver.bufferData(target, data, usage);
  },
  bufferSubDataTyped$3: function(receiver, target, offset, data) {
    return receiver.bufferSubData(target, offset, data);
  },
  clear$1: function(receiver, mask) {
    return receiver.clear(mask);
  },
  clearColor$4: function(receiver, red, green, blue, alpha) {
    return receiver.clearColor(red, green, blue, alpha);
  },
  clearDepth$1: function(receiver, depth) {
    return receiver.clearDepth(depth);
  },
  colorMask$4: function(receiver, red, green, blue, alpha) {
    return receiver.colorMask(red, green, blue, alpha);
  },
  compileShader$1: function(receiver, shader) {
    return receiver.compileShader(shader);
  },
  createBuffer$0: function(receiver) {
    return receiver.createBuffer();
  },
  createProgram$0: function(receiver) {
    return receiver.createProgram();
  },
  createShader$1: function(receiver, type) {
    return receiver.createShader(type);
  },
  createTexture$0: function(receiver) {
    return receiver.createTexture();
  },
  cullFace$1: function(receiver, mode) {
    return receiver.cullFace(mode);
  },
  depthFunc$1: function(receiver, func) {
    return receiver.depthFunc(func);
  },
  depthMask$1: function(receiver, flag) {
    return receiver.depthMask(flag);
  },
  depthRange$2: function(receiver, zNear, zFar) {
    return receiver.depthRange(zNear, zFar);
  },
  detachShader$2: function(receiver, program, shader) {
    return receiver.detachShader(program, shader);
  },
  disable$1: function(receiver, cap) {
    return receiver.disable(cap);
  },
  disableVertexAttribArray$1: function(receiver, index) {
    return receiver.disableVertexAttribArray(index);
  },
  drawArrays$3: function(receiver, mode, first, count) {
    return receiver.drawArrays(mode, first, count);
  },
  drawElements$4: function(receiver, mode, count, type, offset) {
    return receiver.drawElements(mode, count, type, offset);
  },
  enable$1: function(receiver, cap) {
    return receiver.enable(cap);
  },
  enableVertexAttribArray$1: function(receiver, index) {
    return receiver.enableVertexAttribArray(index);
  },
  frontFace$1: function(receiver, mode) {
    return receiver.frontFace(mode);
  },
  getActiveAttrib$2: function(receiver, program, index) {
    return receiver.getActiveAttrib(program, index);
  },
  getActiveUniform$2: function(receiver, program, index) {
    return receiver.getActiveUniform(program, index);
  },
  getAttribLocation$2: function(receiver, program, $name) {
    return receiver.getAttribLocation(program, $name);
  },
  getContextAttributes$0: function(receiver) {
    return P.convertNativeToDart_ContextAttributes(receiver.getContextAttributes());
  },
  getExtension$1: function(receiver, $name) {
    return receiver.getExtension($name);
  },
  getParameter$1: function(receiver, pname) {
    return receiver.getParameter(pname);
  },
  getProgramInfoLog$1: function(receiver, program) {
    return receiver.getProgramInfoLog(program);
  },
  getProgramParameter$2: function(receiver, program, pname) {
    return receiver.getProgramParameter(program, pname);
  },
  getShaderInfoLog$1: function(receiver, shader) {
    return receiver.getShaderInfoLog(shader);
  },
  getShaderParameter$2: function(receiver, shader, pname) {
    return receiver.getShaderParameter(shader, pname);
  },
  getUniformLocation$2: function(receiver, program, $name) {
    return receiver.getUniformLocation(program, $name);
  },
  linkProgram$1: function(receiver, program) {
    return receiver.linkProgram(program);
  },
  polygonOffset$2: function(receiver, factor, units) {
    return receiver.polygonOffset(factor, units);
  },
  shaderSource$2: function(receiver, shader, string) {
    return receiver.shaderSource(shader, string);
  },
  texImage2DCanvas$6: function(receiver, target, level, internalformat, format, type, canvas) {
    return receiver.texImage2D(target, level, internalformat, format, type, canvas);
  },
  texImage2DImage$6: function(receiver, target, level, internalformat, format, type, image) {
    return receiver.texImage2D(target, level, internalformat, format, type, image);
  },
  texImage2DVideo$6: function(receiver, target, level, internalformat, format, type, video) {
    return receiver.texImage2D(target, level, internalformat, format, type, video);
  },
  texParameteri$3: function(receiver, target, pname, param) {
    return receiver.texParameteri(target, pname, param);
  },
  uniform1f$2: function(receiver, $location, x) {
    return receiver.uniform1f($location, x);
  },
  uniform1fv$2: function(receiver, $location, v) {
    return receiver.uniform1fv($location, v);
  },
  uniform1i$2: function(receiver, $location, x) {
    return receiver.uniform1i($location, x);
  },
  uniform1iv$2: function(receiver, $location, v) {
    return receiver.uniform1iv($location, v);
  },
  uniform2f$3: function(receiver, $location, x, y) {
    return receiver.uniform2f($location, x, y);
  },
  uniform2fv$2: function(receiver, $location, v) {
    return receiver.uniform2fv($location, v);
  },
  uniform2i$3: function(receiver, $location, x, y) {
    return receiver.uniform2i($location, x, y);
  },
  uniform2iv$2: function(receiver, $location, v) {
    return receiver.uniform2iv($location, v);
  },
  uniform3f$4: function(receiver, $location, x, y, z) {
    return receiver.uniform3f($location, x, y, z);
  },
  uniform3fv$2: function(receiver, $location, v) {
    return receiver.uniform3fv($location, v);
  },
  uniform3i$4: function(receiver, $location, x, y, z) {
    return receiver.uniform3i($location, x, y, z);
  },
  uniform3iv$2: function(receiver, $location, v) {
    return receiver.uniform3iv($location, v);
  },
  uniform4f$5: function(receiver, $location, x, y, z, w) {
    return receiver.uniform4f($location, x, y, z, w);
  },
  uniform4fv$2: function(receiver, $location, v) {
    return receiver.uniform4fv($location, v);
  },
  uniform4i$5: function(receiver, $location, x, y, z, w) {
    return receiver.uniform4i($location, x, y, z, w);
  },
  uniform4iv$2: function(receiver, $location, v) {
    return receiver.uniform4iv($location, v);
  },
  uniformMatrix2fv$3: function(receiver, $location, transpose, array) {
    return receiver.uniformMatrix2fv($location, transpose, array);
  },
  uniformMatrix3fv$3: function(receiver, $location, transpose, array) {
    return receiver.uniformMatrix3fv($location, transpose, array);
  },
  uniformMatrix4fv$3: function(receiver, $location, transpose, array) {
    return receiver.uniformMatrix4fv($location, transpose, array);
  },
  useProgram$1: function(receiver, program) {
    return receiver.useProgram(program);
  },
  vertexAttribPointer$6: function(receiver, indx, size, type, normalized, stride, offset) {
    return receiver.vertexAttribPointer(indx, size, type, normalized, stride, offset);
  },
  viewport$4: function(receiver, x, y, width, height) {
    return receiver.viewport(x, y, width, height);
  },
  "%": "WebGLRenderingContext"
}}],
["dart.dom.web_sql", "dart:web_sql", , P, {
SqlResultSetRowList: {"": "Interceptor_ListMixin_ImmutableListMixin21;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw H.wrapException(P.RangeError$range(index, 0, receiver.length));
    return P.convertNativeToDart_Dictionary(receiver.item(index));
  },
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    return this.$index(receiver, index);
  },
  $asList: function() {
    return [P.Map];
  },
  $isList: true,
  $isEfficientLength: true,
  "%": "SQLResultSetRowList"
},

Interceptor_ListMixin21: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

Interceptor_ListMixin_ImmutableListMixin21: {"": "Interceptor_ListMixin21+ImmutableListMixin;", $asList: null, $isList: true, $isEfficientLength: true}}],
["dart.isolate", "dart:isolate", , P, {
ReceivePort: {"": "Object;"}}],
["dart.math", "dart:math", , P, {
_JenkinsSmiHash_combine0: function(hash, value) {
  hash = 536870911 & hash + value;
  hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
  return (hash ^ C.JSInt_methods.$shr(hash, 6)) >>> 0;
},

_JenkinsSmiHash_finish0: function(hash) {
  hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
  hash = (hash ^ C.JSInt_methods.$shr(hash, 11)) >>> 0;
  return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
},

min: function(a, b) {
  var t1;
  if (typeof a !== "number")
    throw H.wrapException(new P.ArgumentError(a));
  if (typeof b !== "number")
    throw H.wrapException(new P.ArgumentError(b));
  if (a > b)
    return b;
  if (a < b)
    return a;
  if (typeof b === "number") {
    if (typeof a === "number")
      if (a === 0)
        return (a + b) * a * b;
    if (a === 0)
      t1 = b === 0 ? 1 / b < 0 : b < 0;
    else
      t1 = false;
    if (t1 || isNaN(b))
      return b;
    return a;
  }
  return a;
},

pow: function(x, exponent) {
  if (typeof x !== "number")
    H.throwExpression(new P.ArgumentError(x));
  if (typeof exponent !== "number")
    H.throwExpression(new P.ArgumentError(exponent));
  return Math.pow(x, exponent);
},

Point: {"": "Object;x>,y>",
  toString$0: function(_) {
    return "Point(" + H.S(this.x) + ", " + H.S(this.y) + ")";
  },
  $eq: function(_, other) {
    var t1, t2;
    if (other == null)
      return false;
    t1 = J.getInterceptor(other);
    if (typeof other !== "object" || other === null || !t1.$isPoint)
      return false;
    t1 = this.x;
    t2 = other.x;
    if (t1 == null ? t2 == null : t1 === t2) {
      t1 = this.y;
      t2 = other.y;
      t2 = t1 == null ? t2 == null : t1 === t2;
      t1 = t2;
    } else
      t1 = false;
    return t1;
  },
  get$hashCode: function(_) {
    var t1, t2;
    t1 = J.get$hashCode$(this.x);
    t2 = J.get$hashCode$(this.y);
    return P._JenkinsSmiHash_finish0(P._JenkinsSmiHash_combine0(P._JenkinsSmiHash_combine0(0, t1), t2));
  },
  $add: function(_, other) {
    var t1, t2, t3, t4;
    t1 = this.x;
    t2 = J.getInterceptor$x(other);
    t3 = t2.get$x(other);
    if (typeof t1 !== "number")
      throw t1.$add();
    if (typeof t3 !== "number")
      throw H.iae(t3);
    t4 = this.y;
    t2 = t2.get$y(other);
    if (typeof t4 !== "number")
      throw t4.$add();
    if (typeof t2 !== "number")
      throw H.iae(t2);
    t2 = new P.Point(t1 + t3, t4 + t2);
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(this, "Point", 0)]);
    return t2;
  },
  $sub: function(_, other) {
    var t1, t2, t3, t4;
    t1 = this.x;
    t2 = J.getInterceptor$x(other);
    t3 = t2.get$x(other);
    if (typeof t1 !== "number")
      throw t1.$sub();
    if (typeof t3 !== "number")
      throw H.iae(t3);
    t4 = this.y;
    t2 = t2.get$y(other);
    if (typeof t4 !== "number")
      throw t4.$sub();
    if (typeof t2 !== "number")
      throw H.iae(t2);
    t2 = new P.Point(t1 - t3, t4 - t2);
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(this, "Point", 0)]);
    return t2;
  },
  $mul: function(_, factor) {
    var t1, t2;
    t1 = this.x;
    if (typeof t1 !== "number")
      throw t1.$mul();
    if (typeof factor !== "number")
      throw H.iae(factor);
    t2 = this.y;
    if (typeof t2 !== "number")
      throw t2.$mul();
    t2 = new P.Point(t1 * factor, t2 * factor);
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(this, "Point", 0)]);
    return t2;
  },
  $isPoint: true
},

_RectangleBase: {"": "Object;",
  toString$0: function(_) {
    return "Rectangle (" + H.S(this.get$left(this)) + ", " + H.S(this.top) + ") " + H.S(this.width) + " x " + H.S(this.height);
  },
  $eq: function(_, other) {
    var t1, t2, t3;
    if (other == null)
      return false;
    t1 = J.getInterceptor$x(other);
    if (typeof other !== "object" || other === null || !t1.$isRectangle)
      return false;
    t2 = this.get$left(this);
    t3 = t1.get$left(other);
    if (t2 == null ? t3 == null : t2 === t3) {
      t2 = this.top;
      t3 = t1.get$top(other);
      if (t2 == null ? t3 == null : t2 === t3) {
        t2 = this.width;
        t3 = t1.get$width(other);
        if (t2 == null ? t3 == null : t2 === t3) {
          t2 = this.height;
          t1 = t1.get$height(other);
          t1 = t2 == null ? t1 == null : t2 === t1;
        } else
          t1 = false;
      } else
        t1 = false;
    } else
      t1 = false;
    return t1;
  },
  get$hashCode: function(_) {
    var t1, t2, t3, t4;
    t1 = J.get$hashCode$(this.get$left(this));
    t2 = J.get$hashCode$(this.top);
    t3 = J.get$hashCode$(this.width);
    t4 = J.get$hashCode$(this.height);
    return P._JenkinsSmiHash_finish0(P._JenkinsSmiHash_combine0(P._JenkinsSmiHash_combine0(P._JenkinsSmiHash_combine0(P._JenkinsSmiHash_combine0(0, t1), t2), t3), t4));
  }
},

Rectangle: {"": "_RectangleBase;left>,top>,width>,height>", $isRectangle: true, $asRectangle: null, $as_RectangleBase: null}}],
["dart.typed_data", "dart:typed_data", , P, {
TypedData: {"": "Interceptor;",
  _invalidIndex$2: function(receiver, index, $length) {
    var t1 = J.getInterceptor$n(index);
    if (t1.$lt(index, 0) || t1.$ge(index, $length))
      throw H.wrapException(P.RangeError$range(index, 0, $length));
    else
      throw H.wrapException(P.ArgumentError$("Invalid list index " + H.S(index)));
  },
  "%": "DataView;ArrayBufferView;TypedData_ListMixin|TypedData_ListMixin_FixedLengthListMixin|TypedData_ListMixin0|TypedData_ListMixin_FixedLengthListMixin0|TypedData_ListMixin1|TypedData_ListMixin_FixedLengthListMixin1|TypedData_ListMixin2|TypedData_ListMixin_FixedLengthListMixin2|TypedData_ListMixin3|TypedData_ListMixin_FixedLengthListMixin3|TypedData_ListMixin4|TypedData_ListMixin_FixedLengthListMixin4|TypedData_ListMixin5|TypedData_ListMixin_FixedLengthListMixin5|TypedData_ListMixin6|TypedData_ListMixin_FixedLengthListMixin6|TypedData_ListMixin7|TypedData_ListMixin_FixedLengthListMixin7|Int64List|Uint64List"
},

Float32List: {"": "TypedData_ListMixin_FixedLengthListMixin;",
  get$length: function(receiver) {
    return C.JS_CONST_ZYJ(receiver);
  },
  $index: function(receiver, index) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $isFloat32List: true,
  $asList: function() {
    return [J.JSDouble];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "Float32Array"
},

Float64List: {"": "TypedData_ListMixin_FixedLengthListMixin0;",
  get$length: function(receiver) {
    return C.JS_CONST_ZYJ(receiver);
  },
  $index: function(receiver, index) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $asList: function() {
    return [J.JSDouble];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "Float64Array"
},

Int16List: {"": "TypedData_ListMixin_FixedLengthListMixin1;",
  get$length: function(receiver) {
    return C.JS_CONST_ZYJ(receiver);
  },
  $index: function(receiver, index) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $asList: function() {
    return [J.JSInt];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "Int16Array"
},

Int32List: {"": "TypedData_ListMixin_FixedLengthListMixin2;",
  get$length: function(receiver) {
    return C.JS_CONST_ZYJ(receiver);
  },
  $index: function(receiver, index) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $isInt32List: true,
  $asList: function() {
    return [J.JSInt];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "Int32Array"
},

Int8List: {"": "TypedData_ListMixin_FixedLengthListMixin3;",
  get$length: function(receiver) {
    return C.JS_CONST_ZYJ(receiver);
  },
  $index: function(receiver, index) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $asList: function() {
    return [J.JSInt];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "Int8Array"
},

Uint16List: {"": "TypedData_ListMixin_FixedLengthListMixin4;",
  get$length: function(receiver) {
    return C.JS_CONST_ZYJ(receiver);
  },
  $index: function(receiver, index) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $asList: function() {
    return [J.JSInt];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "Uint16Array"
},

Uint32List: {"": "TypedData_ListMixin_FixedLengthListMixin5;",
  get$length: function(receiver) {
    return C.JS_CONST_ZYJ(receiver);
  },
  $index: function(receiver, index) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $asList: function() {
    return [J.JSInt];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "Uint32Array"
},

Uint8ClampedList: {"": "TypedData_ListMixin_FixedLengthListMixin6;",
  get$length: function(receiver) {
    return C.JS_CONST_ZYJ(receiver);
  },
  $index: function(receiver, index) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $asList: function() {
    return [J.JSInt];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "CanvasPixelArray|Uint8ClampedArray"
},

Uint8List: {"": "TypedData_ListMixin_FixedLengthListMixin7;",
  get$length: function(receiver) {
    return C.JS_CONST_ZYJ(receiver);
  },
  $index: function(receiver, index) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $asList: function() {
    return [J.JSInt];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": ";Uint8Array"
},

TypedData_ListMixin: {"": "TypedData+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

TypedData_ListMixin_FixedLengthListMixin: {"": "TypedData_ListMixin+FixedLengthListMixin;", $asList: null},

TypedData_ListMixin0: {"": "TypedData+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

TypedData_ListMixin_FixedLengthListMixin0: {"": "TypedData_ListMixin0+FixedLengthListMixin;", $asList: null},

TypedData_ListMixin1: {"": "TypedData+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

TypedData_ListMixin_FixedLengthListMixin1: {"": "TypedData_ListMixin1+FixedLengthListMixin;", $asList: null},

TypedData_ListMixin2: {"": "TypedData+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

TypedData_ListMixin_FixedLengthListMixin2: {"": "TypedData_ListMixin2+FixedLengthListMixin;", $asList: null},

TypedData_ListMixin3: {"": "TypedData+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

TypedData_ListMixin_FixedLengthListMixin3: {"": "TypedData_ListMixin3+FixedLengthListMixin;", $asList: null},

TypedData_ListMixin4: {"": "TypedData+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

TypedData_ListMixin_FixedLengthListMixin4: {"": "TypedData_ListMixin4+FixedLengthListMixin;", $asList: null},

TypedData_ListMixin5: {"": "TypedData+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

TypedData_ListMixin_FixedLengthListMixin5: {"": "TypedData_ListMixin5+FixedLengthListMixin;", $asList: null},

TypedData_ListMixin6: {"": "TypedData+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

TypedData_ListMixin_FixedLengthListMixin6: {"": "TypedData_ListMixin6+FixedLengthListMixin;", $asList: null},

TypedData_ListMixin7: {"": "TypedData+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

TypedData_ListMixin_FixedLengthListMixin7: {"": "TypedData_ListMixin7+FixedLengthListMixin;", $asList: null},

Int64List: {"": "TypedData;", $isList: true,
  $asList: function() {
    return [J.JSInt];
  },
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  static: {
"": "Int64List_BYTES_PER_ELEMENT",
}

},

Uint64List: {"": "TypedData;", $isList: true,
  $asList: function() {
    return [J.JSInt];
  },
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  static: {
"": "Uint64List_BYTES_PER_ELEMENT",
}

}}],
["disposable", "package:spectre/disposable.dart", , G, {
Disposable: {"": "Object;"}}],
["dullet_physics", "package:dullet_physics/dullet_physics.dart", , N, {
getkeyXfn: function(node) {
  var extents = node.get$extents();
  return extents._min.storage[0] + extents._max.storage[0];
},

getkeyYfn: function(node) {
  var extents = node.get$extents();
  return extents._min.storage[1] + extents._max.storage[1];
},

getkeyZfn: function(node) {
  var extents = node.get$extents();
  return extents._min.storage[2] + extents._max.storage[2];
},

getreversekeyXfn: function(node) {
  var extents = node.get$extents();
  return -(extents._min.storage[0] + extents._max.storage[0]);
},

getreversekeyYfn: function(node) {
  var extents = node.get$extents();
  return -(extents._min.storage[1] + extents._max.storage[1]);
},

getreversekeyZfn: function(node) {
  var extents = node.get$extents();
  return -(extents._min.storage[2] + extents._max.storage[2]);
},

getkeyXZfn: function(node) {
  var extents, t1, t2;
  extents = node.get$extents();
  t1 = extents._min.storage;
  t2 = extents._max.storage;
  return t1[0] + t1[2] + t2[0] + t2[2];
},

getkeyZXfn: function(node) {
  var extents, t1, t2;
  extents = node.get$extents();
  t1 = extents._min.storage;
  t2 = extents._max.storage;
  return t1[0] - t1[2] + t2[0] - t2[2];
},

getreversekeyXZfn: function(node) {
  var extents, t1, t2;
  extents = node.get$extents();
  t1 = extents._min.storage;
  t2 = extents._max.storage;
  return -(t1[0] + t1[2] + t2[0] + t2[2]);
},

getreversekeyZXfn: function(node) {
  var extents, t1, t2;
  extents = node.get$extents();
  t1 = extents._min.storage;
  t2 = extents._max.storage;
  return -(t1[0] - t1[2] + t2[0] - t2[2]);
},

WebGLPhysicsPerformance: {"": "Object;discrete,sleepComputation,prestepContacts,prestepConstraints,integrateVelocities,warmstartContacts,warmstartConstraints,physicsIterations,integratePositions,continuous"},

WebGLPhysicsNarrowCache: {"": "WebGLPhysicsTOIEvent;objectA,objectB,shapeA,shapeB,closestA,closestB,axis,distance,toi,frozenA,frozenB,concave",
  WebGLPhysicsNarrowCache$0: function() {
    var t1 = new Float32Array(3);
    t1.$dartCachedLength = t1.length;
    this.axis = new T.Vector3(t1);
    t1 = new Float32Array(3);
    t1.$dartCachedLength = t1.length;
    this.closestA = new T.Vector3(t1);
    t1 = new Float32Array(3);
    t1.$dartCachedLength = t1.length;
    this.closestB = new T.Vector3(t1);
  },
  static: {
WebGLPhysicsNarrowCache$: function() {
  var t1 = new N.WebGLPhysicsNarrowCache(null, null, null, null, null, null, null, null, null, null, null, null);
  t1.WebGLPhysicsTOIEvent$0();
  t1.WebGLPhysicsNarrowCache$0();
  return t1;
}}

},

FakeBody: {"": "Object;_shape,_transform,_startTransform"},

Matrix43: {"": "Object;storage<",
  copyInto$1: function(dest) {
    var t1, t2;
    t1 = dest.storage;
    t2 = this.storage;
    t1[0] = t2[0];
    t1[1] = t2[1];
    t1[2] = t2[2];
    t1[3] = t2[3];
    t1[4] = t2[4];
    t1[5] = t2[5];
    t1[6] = t2[6];
    t1[7] = t2[7];
    t1[8] = t2[8];
    t1[9] = t2[9];
    t1[10] = t2[10];
    t1[11] = t2[11];
    return dest;
  },
  multiplyMatrix4$2: function(mat, out) {
    var t1, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, t2;
    t1 = this.storage;
    a0 = t1[0];
    a1 = t1[1];
    a2 = t1[2];
    a3 = t1[3];
    a4 = t1[4];
    a5 = t1[5];
    a6 = t1[6];
    a7 = t1[7];
    a8 = t1[8];
    a9 = t1[9];
    a10 = t1[10];
    a11 = t1[11];
    t1 = mat.storage;
    b0 = t1[0];
    b1 = t1[1];
    b2 = t1[2];
    b3 = t1[3];
    b4 = t1[4];
    b5 = t1[5];
    b6 = t1[6];
    b7 = t1[7];
    b8 = t1[8];
    b9 = t1[9];
    b10 = t1[10];
    b11 = t1[11];
    t2 = out.storage;
    t2[0] = b0 * a0 + b4 * a1 + b8 * a2;
    t2[1] = b1 * a0 + b5 * a1 + b9 * a2;
    t2[2] = b2 * a0 + b6 * a1 + b10 * a2;
    t2[3] = b3 * a0 + b7 * a1 + b11 * a2;
    t2[4] = b0 * a3 + b4 * a4 + b8 * a5;
    t2[5] = b1 * a3 + b5 * a4 + b9 * a5;
    t2[6] = b2 * a3 + b6 * a4 + b10 * a5;
    t2[7] = b3 * a3 + b7 * a4 + b11 * a5;
    t2[8] = b0 * a6 + b4 * a7 + b8 * a8;
    t2[9] = b1 * a6 + b5 * a7 + b9 * a8;
    t2[10] = b2 * a6 + b6 * a7 + b10 * a8;
    t2[11] = b3 * a6 + b7 * a7 + b11 * a8;
    t2[12] = b0 * a9 + b4 * a10 + b8 * a11 + t1[12];
    t2[13] = b1 * a9 + b5 * a10 + b9 * a11 + t1[13];
    t2[14] = b2 * a9 + b6 * a10 + b10 * a11 + t1[14];
    t2[15] = b3 * a9 + b7 * a10 + b11 * a11 + t1[15];
    return out;
  },
  $index: function(_, i) {
    var t1 = this.storage;
    if (i >>> 0 !== i || i >= 12)
      throw H.ioore(t1, i);
    return t1[i];
  },
  $indexSet: function(_, i, v) {
    var t1 = this.storage;
    if (i >>> 0 !== i || i >= 12)
      throw H.ioore(t1, i);
    t1[i] = v;
  },
  toString$0: function(_) {
    var t1 = this.storage;
    return "[" + H.S(t1[0]) + "," + H.S(t1[1]) + "," + H.S(t1[2]) + "]\n[" + H.S(t1[3]) + "," + H.S(t1[4]) + "," + H.S(t1[5]) + "]\n[" + H.S(t1[6]) + "," + H.S(t1[7]) + "," + H.S(t1[8]) + "]\n[" + H.S(t1[9]) + "," + H.S(t1[10]) + "," + H.S(t1[11]) + "]";
  },
  Matrix43$identity$0: function() {
    var t1 = this.storage;
    t1[0] = 1;
    t1[1] = 0;
    t1[2] = 0;
    t1[3] = 0;
    t1[4] = 1;
    t1[5] = 0;
    t1[6] = 0;
    t1[7] = 0;
    t1[8] = 1;
    t1[9] = 0;
    t1[10] = 0;
    t1[11] = 0;
  },
  Matrix43$fromTranslation$3: function(x, y, z) {
    var t1 = this.storage;
    t1[0] = 1;
    t1[1] = 0;
    t1[2] = 0;
    t1[3] = 0;
    t1[4] = 1;
    t1[5] = 0;
    t1[6] = 0;
    t1[7] = 0;
    t1[8] = 1;
    t1[9] = x;
    t1[10] = y;
    t1[11] = z;
  },
  static: {
Matrix43$fromTranslation: function(x, y, z) {
  var t1 = new Float32Array(12);
  t1.$dartCachedLength = t1.length;
  t1 = new N.Matrix43(t1);
  t1.Matrix43$fromTranslation$3(x, y, z);
  return t1;
},

Matrix43$identity: function() {
  var t1 = new Float32Array(12);
  t1.$dartCachedLength = t1.length;
  t1 = new N.Matrix43(t1);
  t1.Matrix43$identity$0();
  return t1;
}}

},

WebGLPhysicsArbiter: {"": "Object;objectA,objectB,shapeA,shapeB,friction,restitution,contacts,activeContacts,_active,skipDiscreteCollisions,contactFlags,trigger",
  insertContact$5: function(worldA, worldB, normal, distance, concave) {
    var t1, cn0, cn1, cn2, clsq, scale, objectA, objectB, xformA, xformB, t2, r0, r1, r2, ca0, ca1, ca2, contacts, jAccN, i, min, d0, d1, d2, datad, t3, sep, t4, cta, data, ct0, ct2, contactCallbacks, minDistance, minimum, minDistance0, con1, con2, con3, a0, a1, a2, b0, b1, b2, c0, c1, c2, ab0, ab1, ab2, ac0, ac1, ac2, ad0, ad1, ad2, n0, n1, n2, area, maxArea, discard, bc0, bc1, bc2, bd0, bd1, bd2;
    t1 = normal.storage;
    cn0 = t1[0];
    cn1 = t1[1];
    cn2 = t1[2];
    clsq = cn0 * cn0 + cn1 * cn1 + cn2 * cn2;
    if (clsq < 1e-8)
      return;
    scale = 1 / Math.sqrt(clsq);
    cn0 *= scale;
    cn1 *= scale;
    cn2 *= scale;
    objectA = this.objectA;
    objectB = this.objectB;
    xformA = objectA._transform;
    xformB = objectB._transform;
    t1 = worldA.storage;
    t2 = xformA.storage;
    r0 = t1[0] - t2[9];
    r1 = t1[1] - t2[10];
    r2 = t1[2] - t2[11];
    ca0 = t2[0] * r0 + t2[1] * r1 + t2[2] * r2;
    ca1 = t2[3] * r0 + t2[4] * r1 + t2[5] * r2;
    ca2 = t2[6] * r0 + t2[7] * r1 + t2[8] * r2;
    contacts = this.contacts;
    for (t1 = concave !== true, jAccN = 0, i = 0, min = 179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368, d0 = null, d1 = null, d2 = null; t2 = contacts.length, i < t2;) {
      datad = contacts[i];
      if (t1) {
        t3 = datad._storage;
        t3 = cn0 * t3[12] + cn1 * t3[13] + cn2 * t3[14] < 0.9;
      } else
        t3 = false;
      if (t3) {
        t3 = t2 - 1;
        if (t3 < 0)
          throw H.ioore(contacts, t3);
        contacts[i] = contacts[t3];
        if (0 >= t2)
          throw H.ioore(contacts, 0);
        contacts.pop();
        $.get$WebGLPhysicsContact__contactPool().push(datad);
        datad._storage[40] = 0;
        t2 = this.contactFlags;
        if (typeof t2 !== "number")
          throw t2.$or();
        this.contactFlags = (t2 | 4) >>> 0;
        continue;
      }
      t3 = datad._storage;
      d0 = ca0 - t3[0];
      d1 = ca1 - t3[1];
      d2 = ca2 - t3[2];
      sep = d0 * d0 + d1 * d1 + d2 * d2;
      if (sep < 0.000003) {
        jAccN = t3[40];
        t4 = t2 - 1;
        if (t4 < 0)
          throw H.ioore(contacts, t4);
        contacts[i] = contacts[t4];
        if (0 >= t2)
          throw H.ioore(contacts, 0);
        contacts.pop();
        $.get$WebGLPhysicsContact__contactPool().push(datad);
        t3[40] = 0;
        t3 = this.contactFlags;
        if (typeof t3 !== "number")
          throw t3.$or();
        this.contactFlags = (t3 | 4) >>> 0;
        min = sep;
        continue;
      }
      if (sep < 1.6875 && sep < min) {
        jAccN = t3[40];
        min = sep;
      }
      ++i;
    }
    cta = N.WebGLPhysicsContact_allocate();
    data = cta._storage;
    data[0] = ca0;
    data[1] = ca1;
    data[2] = ca2;
    data[6] = r0;
    data[7] = r1;
    data[8] = r2;
    t1 = worldB.storage;
    t2 = xformB.storage;
    r0 = t1[0] - t2[9];
    data[9] = r0;
    r1 = t1[1] - t2[10];
    data[10] = r1;
    r2 = t1[2] - t2[11];
    data[11] = r2;
    data[3] = t2[0] * r0 + t2[1] * r1 + t2[2] * r2;
    data[4] = t2[3] * r0 + t2[4] * r1 + t2[5] * r2;
    data[5] = t2[6] * r0 + t2[7] * r1 + t2[8] * r2;
    data[21] = distance;
    data[12] = cn0;
    data[13] = cn1;
    data[14] = cn2;
    clsq = cn0 * cn0 + cn2 * cn2;
    if (clsq < 1e-8) {
      data[15] = 1;
      data[16] = 0;
      data[17] = 0;
      ct0 = 1;
      ct2 = 0;
    } else {
      scale = 1 / Math.sqrt(clsq);
      ct0 = -cn2 * scale;
      data[15] = ct0;
      data[16] = 0;
      ct2 = cn0 * scale;
      data[17] = ct2;
    }
    data[18] = cn1 * ct2;
    data[19] = cn2 * ct0 - cn0 * ct2;
    data[20] = -(cn1 * ct0);
    data[40] = jAccN;
    contactCallbacks = objectA._contactCallbacks;
    if (null != contactCallbacks) {
      t1 = contactCallbacks.mask;
      t2 = objectB._group;
      if (typeof t1 !== "number")
        throw t1.$and();
      t2 = 0 !== (t1 & t2) >>> 0;
      t1 = t2;
    } else
      t1 = false;
    if (t1) {
      contactCallbacks.onPreSolveContact;
      if (contactCallbacks.added !== true && contactCallbacks.deferred === true) {
        contactCallbacks.added = true;
        objectA._world._contactCallbackObjects.push(objectA);
      }
      if (contactCallbacks.trigger === true) {
        this.trigger = true;
        objectA._sweepFrozen = false;
        objectB._sweepFrozen = false;
      }
    }
    contactCallbacks = objectB._contactCallbacks;
    if (null != contactCallbacks) {
      t1 = contactCallbacks.mask;
      t2 = objectA._group;
      if (typeof t1 !== "number")
        throw t1.$and();
      t2 = 0 !== (t1 & t2) >>> 0;
      t1 = t2;
    } else
      t1 = false;
    if (t1) {
      contactCallbacks.onPreSolveContact;
      if (contactCallbacks.added !== true && contactCallbacks.deferred === true) {
        contactCallbacks.added = true;
        objectB._world._contactCallbackObjects.push$1(objectB);
      }
      if (contactCallbacks.trigger === true) {
        this.trigger = true;
        objectA._sweepFrozen = false;
        objectB._sweepFrozen = false;
      }
    }
    t1 = this.contactFlags;
    if (typeof t1 !== "number")
      throw t1.$or();
    this.contactFlags = (t1 | 1) >>> 0;
    contacts.push(cta);
    t1 = contacts.length;
    if (t1 === 4) {
      if (0 >= t1)
        throw H.ioore(contacts, 0);
      t2 = contacts[0]._storage;
      minDistance = t2[21];
      for (i = 1, minimum = 0; i < 4; ++i) {
        if (i >= t1)
          throw H.ioore(contacts, i);
        minDistance0 = contacts[i]._storage[21];
        if (minDistance0 < minDistance) {
          minimum = i;
          minDistance = minDistance0;
        }
      }
      if (1 >= t1)
        throw H.ioore(contacts, 1);
      con1 = contacts[1]._storage;
      if (2 >= t1)
        throw H.ioore(contacts, 2);
      con2 = contacts[2]._storage;
      if (3 >= t1)
        throw H.ioore(contacts, 3);
      con3 = contacts[3]._storage;
      a0 = t2[6] + t2[9];
      a1 = t2[7] + t2[10];
      a2 = t2[8] + t2[11];
      b0 = con1[6] + con1[9];
      b1 = con1[7] + con1[10];
      b2 = con1[8] + con1[11];
      c0 = con2[6] + con2[9];
      c1 = con2[7] + con2[10];
      c2 = con2[8] + con2[11];
      d0 = con3[6] + con3[9];
      d1 = con3[7] + con3[10];
      d2 = con3[8] + con3[11];
      ab0 = b0 - a0;
      ab1 = b1 - a1;
      ab2 = b2 - a2;
      ac0 = c0 - a0;
      ac1 = c1 - a1;
      ac2 = c2 - a2;
      ad0 = d0 - a0;
      ad1 = d1 - a1;
      ad2 = d2 - a2;
      if (minimum !== 1) {
        n0 = ac1 * ad2 - ac2 * ad1;
        n1 = ac2 * ad0 - ac0 * ad2;
        n2 = ac0 * ad1 - ac1 * ad0;
        area = n0 * n0 + n1 * n1 + n2 * n2;
        if (area > -179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368) {
          maxArea = area;
          discard = 1;
        } else {
          discard = null;
          maxArea = -179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368;
        }
      } else {
        discard = null;
        maxArea = -179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368;
      }
      if (minimum !== 2) {
        n0 = ab1 * ad2 - ab2 * ad1;
        n1 = ab2 * ad0 - ab0 * ad2;
        n2 = ab0 * ad1 - ab1 * ad0;
        area = n0 * n0 + n1 * n1 + n2 * n2;
        if (area > maxArea) {
          maxArea = area;
          discard = 2;
        }
      }
      if (minimum !== 3) {
        n0 = ab1 * ac2 - ab2 * ac1;
        n1 = ab2 * ac0 - ab0 * ac2;
        n2 = ab0 * ac1 - ab1 * ac0;
        area = n0 * n0 + n1 * n1 + n2 * n2;
        if (area > maxArea) {
          maxArea = area;
          discard = 3;
        }
      }
      if (minimum !== 0) {
        bc0 = c0 - b0;
        bc1 = c1 - b1;
        bc2 = c2 - b2;
        bd0 = d0 - b0;
        bd1 = d1 - b1;
        bd2 = d2 - b2;
        n0 = bc1 * bd2 - bc2 * bd1;
        n1 = bc2 * bd0 - bc0 * bd2;
        n2 = bc0 * bd1 - bc1 * bd0;
        if (n0 * n0 + n1 * n1 + n2 * n2 > maxArea)
          discard = 0;
      }
      cta = C.JSArray_methods.removeAt$1(contacts, discard);
      $.get$WebGLPhysicsContact__contactPool().push(cta);
      cta._storage[40] = 0;
      t1 = this.contactFlags;
      if (typeof t1 !== "number")
        throw t1.$or();
      this.contactFlags = (t1 | 4) >>> 0;
    }
  },
  refreshContacts$0: function() {
    var contacts, objectA, objectB, xformA, xformB, t1, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11, i, data, arr, v0, v1, v2, ra0, ra1, ra2, rb0, rb1, rb2, n0, n1, n2, sep, t2;
    contacts = this.contacts;
    objectA = this.objectA;
    objectB = this.objectB;
    xformA = objectA._transform;
    xformB = objectB._transform;
    t1 = xformA.storage;
    A0 = t1[0];
    A1 = t1[1];
    A2 = t1[2];
    A3 = t1[3];
    A4 = t1[4];
    A5 = t1[5];
    A6 = t1[6];
    A7 = t1[7];
    A8 = t1[8];
    A9 = t1[9];
    A10 = t1[10];
    A11 = t1[11];
    t1 = xformB.storage;
    B0 = t1[0];
    B1 = t1[1];
    B2 = t1[2];
    B3 = t1[3];
    B4 = t1[4];
    B5 = t1[5];
    B6 = t1[6];
    B7 = t1[7];
    B8 = t1[8];
    B9 = t1[9];
    B10 = t1[10];
    B11 = t1[11];
    for (i = 0; t1 = contacts.length, i < t1;) {
      data = contacts[i];
      arr = data._storage;
      v0 = arr[0];
      v1 = arr[1];
      v2 = arr[2];
      ra0 = A0 * v0 + A3 * v1 + A6 * v2;
      arr[6] = ra0;
      ra1 = A1 * v0 + A4 * v1 + A7 * v2;
      arr[7] = ra1;
      ra2 = A2 * v0 + A5 * v1 + A8 * v2;
      arr[8] = ra2;
      v0 = arr[3];
      v1 = arr[4];
      v2 = arr[5];
      rb0 = B0 * v0 + B3 * v1 + B6 * v2;
      arr[9] = rb0;
      rb1 = B1 * v0 + B4 * v1 + B7 * v2;
      arr[10] = rb1;
      rb2 = B2 * v0 + B5 * v1 + B8 * v2;
      arr[11] = rb2;
      v0 = ra0 + A9 - (rb0 + B9);
      v1 = ra1 + A10 - (rb1 + B10);
      v2 = ra2 + A11 - (rb2 + B11);
      n0 = arr[12];
      n1 = arr[13];
      n2 = arr[14];
      sep = n0 * v0 + n1 * v1 + n2 * v2;
      arr[21] = sep;
      if (sep > 0.05) {
        t2 = t1 - 1;
        if (t2 < 0)
          throw H.ioore(contacts, t2);
        contacts[i] = contacts[t2];
        if (0 >= t1)
          throw H.ioore(contacts, 0);
        contacts.pop();
        $.get$WebGLPhysicsContact__contactPool().push(data);
        arr[40] = 0;
        t1 = this.contactFlags;
        if (typeof t1 !== "number")
          throw t1.$or();
        this.contactFlags = (t1 | 4) >>> 0;
        continue;
      }
      v0 -= n0 * sep;
      v1 -= n1 * sep;
      v2 -= n2 * sep;
      if (v0 * v0 + v1 * v1 + v2 * v2 > 0.12004999999999999) {
        t2 = t1 - 1;
        if (t2 < 0)
          throw H.ioore(contacts, t2);
        contacts[i] = contacts[t2];
        if (0 >= t1)
          throw H.ioore(contacts, 0);
        contacts.pop();
        $.get$WebGLPhysicsContact__contactPool().push(data);
        arr[40] = 0;
        t1 = this.contactFlags;
        if (typeof t1 !== "number")
          throw t1.$or();
        this.contactFlags = (t1 | 4) >>> 0;
        continue;
      }
      ++i;
    }
    t1 = this.contactFlags;
    if (typeof t1 !== "number")
      throw t1.$or();
    this.contactFlags = (t1 | 2) >>> 0;
    return contacts.length === 0;
  },
  preStep$2: function(timeStepRatio, timeStep) {
    var objectA, objectB, mass_sum, velA, velB, t1, A0, A1, A2, A3, A4, A5, A6, A7, A8, B0, B1, B2, B3, B4, B5, B6, B7, B8, baum, contacts, limit, t2, i, data, arr, n0, n1, n2, ra0, ra1, ra2, rb0, rb1, rb2, ca0, ca1, ca2, k0, k1, k2, cb0, cb1, cb2, k00, k10, k20, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, bounce, kU, kV, kUV, idet;
    if (this.trigger === true) {
      J.set$length$asx(this.activeContacts, 0);
      return;
    }
    objectA = this.objectA;
    objectB = this.objectB;
    mass_sum = objectA._inverseMass + objectB._inverseMass;
    velA = objectA._velocity;
    velB = objectB._velocity;
    t1 = objectA._inverseInertia.storage;
    A0 = t1[0];
    A1 = t1[1];
    A2 = t1[2];
    A3 = t1[3];
    A4 = t1[4];
    A5 = t1[5];
    A6 = t1[6];
    A7 = t1[7];
    A8 = t1[8];
    t1 = objectB._inverseInertia.storage;
    B0 = t1[0];
    B1 = t1[1];
    B2 = t1[2];
    B3 = t1[3];
    B4 = t1[4];
    B5 = t1[5];
    B6 = t1[6];
    B7 = t1[7];
    B8 = t1[8];
    J.set$length$asx(this.activeContacts, 0);
    baum = objectA._collisionObject || objectB._collisionObject ? 0.65 : 0.35;
    contacts = this.contacts;
    limit = contacts.length;
    for (t1 = velA.storage, t2 = velB.storage, i = 0; i < limit; ++i) {
      if (i >= contacts.length)
        throw H.ioore(contacts, i);
      data = contacts[i];
      arr = data._storage;
      if (arr[21] > 0)
        continue;
      this.activeContacts.push(data);
      arr[42] = 0;
      arr[41] = 0;
      n0 = arr[12];
      n1 = arr[13];
      n2 = arr[14];
      ra0 = arr[6];
      ra1 = arr[7];
      ra2 = arr[8];
      rb0 = arr[9];
      rb1 = arr[10];
      rb2 = arr[11];
      ca0 = ra1 * n2 - ra2 * n1;
      ca1 = ra2 * n0 - ra0 * n2;
      ca2 = ra0 * n1 - ra1 * n0;
      k0 = A0 * ca0 + A3 * ca1 + A6 * ca2;
      arr[22] = k0;
      k1 = A1 * ca0 + A4 * ca1 + A7 * ca2;
      arr[23] = k1;
      k2 = A2 * ca0 + A5 * ca1 + A8 * ca2;
      arr[24] = k2;
      cb0 = rb1 * n2 - rb2 * n1;
      cb1 = rb2 * n0 - rb0 * n2;
      cb2 = rb0 * n1 - rb1 * n0;
      k00 = -(B0 * cb0 + B3 * cb1 + B6 * cb2);
      arr[25] = k00;
      k10 = -(B1 * cb0 + B4 * cb1 + B7 * cb2);
      arr[26] = k10;
      k20 = -(B2 * cb0 + B5 * cb1 + B8 * cb2);
      arr[27] = k20;
      arr[45] = 1 / (mass_sum + (ca0 * k0 + ca1 * k1 + ca2 * k2) - (cb0 * k00 + cb1 * k10 + cb2 * k20));
      t3 = P.min(0, arr[21] + 0.015);
      if (typeof timeStep !== "number")
        throw H.iae(timeStep);
      arr[43] = baum * t3 / timeStep;
      arr[44] = 0;
      t3 = t1[0];
      t4 = t2[0];
      t5 = t1[1];
      t6 = t2[1];
      t7 = t1[2];
      t8 = t2[2];
      t9 = t1[4];
      t10 = t1[5];
      t11 = t1[3];
      t12 = t2[4];
      t13 = t2[5];
      t14 = t2[3];
      t15 = this.restitution;
      if (typeof t15 !== "number")
        throw H.iae(t15);
      bounce = ((t3 - t4 + (t9 * ra2 - t10 * ra1) - (t12 * rb2 - t13 * rb1)) * n0 + (t5 - t6 + (t10 * ra0 - t11 * ra2) - (t13 * rb0 - t14 * rb2)) * n1 + (t7 - t8 + (t11 * ra1 - t9 * ra0) - (t14 * rb1 - t12 * rb0)) * n2) * t15;
      arr[50] = bounce * bounce < 0.01 ? 0 : bounce;
      n0 = arr[15];
      n1 = arr[16];
      n2 = arr[17];
      ca0 = ra1 * n2 - ra2 * n1;
      ca1 = ra2 * n0 - ra0 * n2;
      ca2 = ra0 * n1 - ra1 * n0;
      k0 = A0 * ca0 + A3 * ca1 + A6 * ca2;
      arr[28] = k0;
      k1 = A1 * ca0 + A4 * ca1 + A7 * ca2;
      arr[29] = k1;
      k2 = A2 * ca0 + A5 * ca1 + A8 * ca2;
      arr[30] = k2;
      cb0 = rb1 * n2 - rb2 * n1;
      cb1 = rb2 * n0 - rb0 * n2;
      cb2 = rb0 * n1 - rb1 * n0;
      k00 = -(B0 * cb0 + B3 * cb1 + B6 * cb2);
      arr[31] = k00;
      k10 = -(B1 * cb0 + B4 * cb1 + B7 * cb2);
      arr[32] = k10;
      k20 = -(B2 * cb0 + B5 * cb1 + B8 * cb2);
      arr[33] = k20;
      kU = mass_sum + (ca0 * k0 + ca1 * k1 + ca2 * k2) - (cb0 * k00 + cb1 * k10 + cb2 * k20);
      n0 = arr[18];
      n1 = arr[19];
      n2 = arr[20];
      ca0 = ra1 * n2 - ra2 * n1;
      ca1 = ra2 * n0 - ra0 * n2;
      ca2 = ra0 * n1 - ra1 * n0;
      k0 = A0 * ca0 + A3 * ca1 + A6 * ca2;
      arr[34] = k0;
      k1 = A1 * ca0 + A4 * ca1 + A7 * ca2;
      arr[35] = k1;
      k2 = A2 * ca0 + A5 * ca1 + A8 * ca2;
      arr[36] = k2;
      cb0 = rb1 * n2 - rb2 * n1;
      cb1 = rb2 * n0 - rb0 * n2;
      cb2 = rb0 * n1 - rb1 * n0;
      k00 = -(B0 * cb0 + B3 * cb1 + B6 * cb2);
      arr[37] = k00;
      k10 = -(B1 * cb0 + B4 * cb1 + B7 * cb2);
      arr[38] = k10;
      k20 = -(B2 * cb0 + B5 * cb1 + B8 * cb2);
      arr[39] = k20;
      kV = mass_sum + (ca0 * k0 + ca1 * k1 + ca2 * k2) - (cb0 * k00 + cb1 * k10 + cb2 * k20);
      kUV = 0 + (ca0 * arr[28] + ca1 * arr[29] + ca2 * arr[30]) - (cb0 * arr[31] + cb1 * arr[32] + cb2 * arr[33]);
      idet = 1 / (kU * kV - kUV * kUV);
      arr[46] = kV * idet;
      arr[47] = -kUV * idet;
      arr[48] = kU * idet;
      t3 = arr[40];
      if (typeof timeStepRatio !== "number")
        throw H.iae(timeStepRatio);
      arr[40] = t3 * timeStepRatio;
    }
  },
  applyCachedImpulses$0: function() {
    var objectA, objectB, velA, velB, imA, imB, contacts, t1, t2, t3, i, data, jn, n0, n1, n2;
    if (this.trigger === true)
      return;
    objectA = this.objectA;
    objectB = this.objectB;
    velA = objectA._velocity;
    velB = objectB._velocity;
    imA = objectA._inverseMass;
    imB = objectB._inverseMass;
    contacts = this.activeContacts;
    for (t1 = contacts.length, t2 = velA.storage, t3 = velB.storage, i = 0; i < t1; ++i) {
      data = contacts[i]._storage;
      jn = data[40];
      n0 = data[12] * jn;
      n1 = data[13] * jn;
      n2 = data[14] * jn;
      t2[0] = t2[0] + n0 * imA;
      t2[1] = t2[1] + n1 * imA;
      t2[2] = t2[2] + n2 * imA;
      t3[0] = t3[0] - n0 * imB;
      t3[1] = t3[1] - n1 * imB;
      t3[2] = t3[2] - n2 * imB;
      t2[3] = t2[3] + data[22] * jn;
      t2[4] = t2[4] + data[23] * jn;
      t2[5] = t2[5] + data[24] * jn;
      t3[3] = t3[3] + data[25] * jn;
      t3[4] = t3[4] + data[26] * jn;
      t3[5] = t3[5] + data[27] * jn;
    }
  },
  computeAndApplyBiasImpulses$0: function() {
    var objectA, objectB, t1, va0, va1, va2, wa0, wa1, wa2, t2, vb0, vb1, vb2, wb0, wb1, wb2, imA, imB, contacts, limit, i, data, n0, n1, n2, ra0, ra1, ra2, rb0, rb1, rb2, t3, t4, jOld1, cjAcc1, j1;
    if (this.trigger === true)
      return;
    objectA = this.objectA;
    objectB = this.objectB;
    t1 = objectA._velocity.storage;
    va0 = t1[6];
    va1 = t1[7];
    va2 = t1[8];
    wa0 = t1[9];
    wa1 = t1[10];
    wa2 = t1[11];
    t2 = objectB._velocity.storage;
    vb0 = t2[6];
    vb1 = t2[7];
    vb2 = t2[8];
    wb0 = t2[9];
    wb1 = t2[10];
    wb2 = t2[11];
    imA = objectA._inverseMass;
    imB = objectB._inverseMass;
    contacts = this.activeContacts;
    limit = contacts.length;
    for (i = 0; i < limit; ++i) {
      data = contacts[i]._storage;
      n0 = data[12];
      n1 = data[13];
      n2 = data[14];
      ra0 = data[6];
      ra1 = data[7];
      ra2 = data[8];
      rb0 = data[9];
      rb1 = data[10];
      rb2 = data[11];
      t3 = data[45];
      t4 = data[43];
      jOld1 = data[44];
      cjAcc1 = jOld1 + t3 * (n0 * (vb0 + (wb1 * rb2 - wb2 * rb1) - (va0 + (wa1 * ra2 - wa2 * ra1))) + n1 * (vb1 + (wb2 * rb0 - wb0 * rb2) - (va1 + (wa2 * ra0 - wa0 * ra2))) + n2 * (vb2 + (wb0 * rb1 - wb1 * rb0) - (va2 + (wa0 * ra1 - wa1 * ra0))) - t4);
      if (cjAcc1 < 0)
        cjAcc1 = 0;
      j1 = cjAcc1 - jOld1;
      data[44] = cjAcc1;
      n0 *= j1;
      n1 *= j1;
      n2 *= j1;
      va0 += n0 * imA;
      va1 += n1 * imA;
      va2 += n2 * imA;
      vb0 -= n0 * imB;
      vb1 -= n1 * imB;
      vb2 -= n2 * imB;
      wa0 += data[22] * j1;
      wa1 += data[23] * j1;
      wa2 += data[24] * j1;
      wb0 += data[25] * j1;
      wb1 += data[26] * j1;
      wb2 += data[27] * j1;
    }
    t1[6] = va0;
    t1[7] = va1;
    t1[8] = va2;
    t1[9] = wa0;
    t1[10] = wa1;
    t1[11] = wa2;
    t2[6] = vb0;
    t2[7] = vb1;
    t2[8] = vb2;
    t2[9] = wb0;
    t2[10] = wb1;
    t2[11] = wb2;
  },
  computeAndApplyImpulses$0: function() {
    var objectA, objectB, t1, va0, va1, va2, wa0, wa1, wa2, t2, vb0, vb1, vb2, wb0, wb1, wb2, imA, imB, friction, contacts, limit, i, data, n0, n1, n2, u0, u1, u2, v0, v1, v2, ra0, ra1, ra2, rb0, rb1, rb2, j1, jOld1, cjAcc1, lambdau, lambdav, t3, t4, j2, jOld2, cjAcc2, jMax, fsq;
    if (this.trigger === true)
      return;
    objectA = this.objectA;
    objectB = this.objectB;
    t1 = objectA._velocity.storage;
    va0 = t1[0];
    va1 = t1[1];
    va2 = t1[2];
    wa0 = t1[3];
    wa1 = t1[4];
    wa2 = t1[5];
    t2 = objectB._velocity.storage;
    vb0 = t2[0];
    vb1 = t2[1];
    vb2 = t2[2];
    wb0 = t2[3];
    wb1 = t2[4];
    wb2 = t2[5];
    imA = objectA._inverseMass;
    imB = objectB._inverseMass;
    friction = this.friction;
    contacts = this.activeContacts;
    limit = contacts.length;
    for (i = 0; i < limit; ++i) {
      if (i >= contacts.length)
        throw H.ioore(contacts, i);
      data = contacts[i]._storage;
      n0 = data[12];
      n1 = data[13];
      n2 = data[14];
      u0 = data[15];
      u1 = data[16];
      u2 = data[17];
      v0 = data[18];
      v1 = data[19];
      v2 = data[20];
      ra0 = data[6];
      ra1 = data[7];
      ra2 = data[8];
      rb0 = data[9];
      rb1 = data[10];
      rb2 = data[11];
      j1 = data[45] * (n0 * (vb0 + (wb1 * rb2 - wb2 * rb1) - (va0 + (wa1 * ra2 - wa2 * ra1))) + n1 * (vb1 + (wb2 * rb0 - wb0 * rb2) - (va1 + (wa2 * ra0 - wa0 * ra2))) + n2 * (vb2 + (wb0 * rb1 - wb1 * rb0) - (va2 + (wa0 * ra1 - wa1 * ra0))) - data[50]);
      jOld1 = data[40];
      cjAcc1 = jOld1 + j1;
      if (cjAcc1 < 0) {
        j1 = -jOld1;
        cjAcc1 = 0;
      }
      data[40] = cjAcc1;
      n0 *= j1;
      n1 *= j1;
      n2 *= j1;
      va0 += n0 * imA;
      va1 += n1 * imA;
      va2 += n2 * imA;
      vb0 -= n0 * imB;
      vb1 -= n1 * imB;
      vb2 -= n2 * imB;
      wa0 += data[22] * j1;
      wa1 += data[23] * j1;
      wa2 += data[24] * j1;
      wb0 += data[25] * j1;
      wb1 += data[26] * j1;
      wb2 += data[27] * j1;
      n0 = vb0 - va0 + (wb1 * rb2 - wb2 * rb1) - (wa1 * ra2 - wa2 * ra1);
      n1 = vb1 - va1 + (wb2 * rb0 - wb0 * rb2) - (wa2 * ra0 - wa0 * ra2);
      n2 = vb2 - va2 + (wb0 * rb1 - wb1 * rb0) - (wa0 * ra1 - wa1 * ra0);
      lambdau = u0 * n0 + u1 * n1 + u2 * n2;
      lambdav = v0 * n0 + v1 * n1 + v2 * n2;
      t3 = data[46];
      t4 = data[47];
      j1 = lambdau * t3 + lambdav * t4;
      j2 = lambdau * t4 + lambdav * data[48];
      jOld1 = data[41];
      jOld2 = data[42];
      cjAcc1 = jOld1 + j1;
      cjAcc2 = jOld2 + j2;
      t4 = data[40];
      if (typeof friction !== "number")
        throw friction.$mul();
      jMax = friction * t4;
      fsq = cjAcc1 * cjAcc1 + cjAcc2 * cjAcc2;
      if (fsq > jMax * jMax) {
        fsq = jMax / Math.sqrt(fsq);
        cjAcc1 *= fsq;
        cjAcc2 *= fsq;
        j1 = cjAcc1 - jOld1;
        j2 = cjAcc2 - jOld2;
      }
      data[41] = cjAcc1;
      data[42] = cjAcc2;
      n0 = u0 * j1 + v0 * j2;
      n1 = u1 * j1 + v1 * j2;
      n2 = u2 * j1 + v2 * j2;
      va0 += n0 * imA;
      va1 += n1 * imA;
      va2 += n2 * imA;
      vb0 -= n0 * imB;
      vb1 -= n1 * imB;
      vb2 -= n2 * imB;
      wa0 += data[28] * j1 + data[34] * j2;
      wa1 += data[29] * j1 + data[35] * j2;
      wa2 += data[30] * j1 + data[36] * j2;
      wb0 += data[31] * j1 + data[37] * j2;
      wb1 += data[32] * j1 + data[38] * j2;
      wb2 += data[33] * j1 + data[39] * j2;
    }
    t1[0] = va0;
    t1[1] = va1;
    t1[2] = va2;
    t1[3] = wa0;
    t1[4] = wa1;
    t1[5] = wa2;
    t2[0] = vb0;
    t2[1] = vb1;
    t2[2] = vb2;
    t2[3] = wb0;
    t2[4] = wb1;
    t2[5] = wb2;
  },
  WebGLPhysicsArbiter$0: function() {
    this.objectA = null;
    this.objectB = null;
    this.shapeA = null;
    this.shapeB = null;
    this.friction = 0;
    this.restitution = 0;
    var t1 = [];
    H.setRuntimeTypeInfo(t1, [N.WebGLPhysicsContact]);
    this.contacts = t1;
    t1 = [];
    H.setRuntimeTypeInfo(t1, [N.WebGLPhysicsContact]);
    this.activeContacts = t1;
    this._active = true;
    this.skipDiscreteCollisions = false;
    this.contactFlags = 0;
    this.trigger = false;
  },
  static: {
"": "WebGLPhysicsArbiter_version,WebGLPhysicsArbiter_arbiterPool",
WebGLPhysicsArbiter$: function() {
  var t1 = new N.WebGLPhysicsArbiter(null, null, null, null, null, null, null, null, null, null, null, null);
  t1.WebGLPhysicsArbiter$0();
  return t1;
},

WebGLPhysicsArbiter_allocate: function(shapeA, shapeB, objectA, objectB) {
  var arbiter, t1;
  if ($.get$WebGLPhysicsArbiter_arbiterPool().length === 0)
    arbiter = N.WebGLPhysicsArbiter$();
  else {
    t1 = $.get$WebGLPhysicsArbiter_arbiterPool();
    if (0 >= t1.length)
      throw H.ioore(t1, 0);
    arbiter = t1.pop();
  }
  arbiter._active = true;
  arbiter.shapeA = shapeA;
  arbiter.shapeB = shapeB;
  arbiter.objectA = objectA;
  arbiter.objectB = objectB;
  arbiter.restitution = arbiter.objectA._restitution * arbiter.objectB._restitution;
  arbiter.friction = arbiter.objectA._friction * arbiter.objectB._friction;
  return arbiter;
},

WebGLPhysicsArbiter_deallocate: function(arbiter) {
  arbiter.shapeA = null;
  arbiter.shapeB = null;
  arbiter.objectA = null;
  arbiter.objectB = null;
  arbiter.skipDiscreteCollisions = false;
  J.set$length$asx(arbiter.activeContacts, 0);
  arbiter.contactFlags = 0;
  arbiter.trigger = false;
  $.get$WebGLPhysicsArbiter_arbiterPool().push(arbiter);
}}

},

WebGLPhysicsCollisionObject: {"": "WebGLPhysicsPrivateBody;userData,_fixedRotationtype,aabbTreeIndex,_id,_previouslyActive,_bullet,_world,_shape,_friction,_restitution,_transform,_arbiters,_constraints,_velocity,_linearDamping,_angularDamping,_extents,_startTransform,_endTransform,_prevTransform,_newTransform,_island,_islandRoot,_islandRank,_delaySleep,_wakeTimeStamp,_group,_mask,_kinematic,_fixedRotation,_mass,_inverseMass,_inverseInertiaLocal,_inverseInertia,_collisionObject,_permitSleep,_sweepFrozen,_active,_contactCallbacks",
  get$shape: function(_) {
    return this._shape;
  },
  WebGLPhysicsCollisionObject$16$angularDamping$angularVelocity$friction$group$kinematic$linearDamping$linearVelocity$mask$onAddedContacts$onPreSolveContact$onProcessedContacts$onRemovedContacts$restitution$shape$transform$userData: function(angularDamping, angularVelocity, friction, group, kinematic, linearDamping, linearVelocity, mask, onAddedContacts, onPreSolveContact, onProcessedContacts, onRemovedContacts, restitution, shape, transform, userData) {
    this._group = group;
    this._mask = mask;
    this._kinematic = kinematic;
    this._group = group;
    this._mask = mask;
    this._fixedRotation = !kinematic;
    this._mass = 0;
    this._inverseMass = 0;
    this._inverseInertiaLocal = $.get$WebGLPhysicsCollisionObject_sharedInverseInertiaLocal();
    this._inverseInertia = $.get$WebGLPhysicsCollisionObject_sharedInverseInertia();
    this._collisionObject = true;
    this._permitSleep = false;
    this._sweepFrozen = true;
    this._active = kinematic;
  },
  static: {
"": "WebGLPhysicsCollisionObject_version,WebGLPhysicsCollisionObject_sharedInverseInertiaLocal,WebGLPhysicsCollisionObject_sharedInverseInertia",
WebGLPhysicsCollisionObject$: function(angularDamping, angularVelocity, friction, group, kinematic, linearDamping, linearVelocity, mask, onAddedContacts, onPreSolveContact, onProcessedContacts, onRemovedContacts, restitution, shape, transform, userData) {
  var t1, t2, t3;
  t1 = N.Matrix43$identity();
  t2 = P.List_List(null, N.WebGLPhysicsArbiter);
  H.setRuntimeTypeInfo(t2, [N.WebGLPhysicsArbiter]);
  t3 = new Float32Array(12);
  t3.$dartCachedLength = t3.length;
  t3 = new N.WebGLPhysicsCollisionObject(null, false, null, null, null, false, null, shape, friction, restitution, t1, t2, [], new N.Matrix43(t3), linearDamping, angularDamping, T.Aabb3$(), N.Matrix43$identity(), N.Matrix43$identity(), N.Matrix43$identity(), N.Matrix43$identity(), null, null, 0, true, null, 0, 0, false, false, 0, 0, null, null, false, false, false, false, null);
  t3.WebGLPhysicsPrivateBody$8(shape, transform, linearVelocity, angularVelocity, friction, restitution, linearDamping, angularDamping);
  t3.WebGLPhysicsCollisionObject$16$angularDamping$angularVelocity$friction$group$kinematic$linearDamping$linearVelocity$mask$onAddedContacts$onPreSolveContact$onProcessedContacts$onRemovedContacts$restitution$shape$transform$userData(angularDamping, angularVelocity, friction, group, kinematic, linearDamping, linearVelocity, mask, onAddedContacts, onPreSolveContact, onProcessedContacts, onRemovedContacts, restitution, shape, transform, userData);
  return t3;
}}

},

WebGLPhysicsContact: {"": "Object;_storage",
  $index: function(_, i) {
    var t1 = this._storage;
    if (i >>> 0 !== i || i >= 52)
      throw H.ioore(t1, i);
    return t1[i];
  },
  $indexSet: function(_, i, v) {
    var t1 = this._storage;
    if (i >>> 0 !== i || i >= 52)
      throw H.ioore(t1, i);
    t1[i] = v;
  },
  static: {
"": "WebGLPhysicsContact__contactPool,WebGLPhysicsContact__publicContacts,WebGLPhysicsContact__callbackContacts",
WebGLPhysicsContact_allocate: function() {
  var t1, contact;
  if ($.get$WebGLPhysicsContact__contactPool().length === 0) {
    t1 = new Float32Array(52);
    t1.$dartCachedLength = t1.length;
    contact = new N.WebGLPhysicsContact(t1);
  } else {
    t1 = $.get$WebGLPhysicsContact__contactPool();
    if (0 >= t1.length)
      throw H.ioore(t1, 0);
    contact = t1.pop();
  }
  contact._storage[51] = 1;
  return contact;
}}

},

WebGLContactEPA: {"": "Object;vertex_store,hull,stock,horizon",
  bind$4: function(faceA, edgeA, faceB, edgeB) {
    var t1 = faceA.edge;
    if (edgeA < 0 || edgeA >= 3)
      throw H.ioore(t1, edgeA);
    t1[edgeA] = edgeB;
    faceA.adjFace[edgeA] = faceB;
    t1 = faceB.edge;
    if (edgeB < 0 || edgeB >= 3)
      throw H.ioore(t1, edgeB);
    t1[edgeB] = edgeA;
    faceB.adjFace[edgeB] = faceA;
  },
  append$2: function(_, list, face) {
    var t1;
    face.leaf0 = null;
    face.leaf1 = list.root;
    t1 = list.root;
    if (t1 != null)
      t1.leaf0 = face;
    list.root = face;
    list.count = list.count + 1;
  },
  remove$2: function(_, list, face) {
    var leaf0, leaf1, t1;
    leaf0 = face.leaf0;
    leaf1 = face.leaf1;
    if (leaf1 != null)
      leaf1.leaf0 = leaf0;
    if (leaf0 != null)
      leaf0.leaf1 = leaf1;
    t1 = list.root;
    if (face == null ? t1 == null : face === t1)
      list.root = leaf1;
    list.count = list.count - 1;
  },
  findBest$0: function() {
    var minFace, t1, minDistance, f, sqDistance;
    minFace = this.hull.root;
    t1 = minFace.distance;
    if (typeof t1 !== "number")
      throw t1.$mul();
    minDistance = t1 * t1;
    for (f = minFace.leaf1; f != null; f = f.leaf1) {
      t1 = f.distance;
      if (typeof t1 !== "number")
        throw t1.$mul();
      sqDistance = t1 * t1;
      if (sqDistance < minDistance) {
        minDistance = sqDistance;
        minFace = f;
      }
    }
    return minFace;
  },
  getEdgeDistance$3: function(face, a, b) {
    var vertices, t1, a0, t2, a1, a2, b0, b1, b2, ba0, ba1, ba2, fn0, fn1, fn2, t3, dotAB, dSq;
    vertices = this.vertex_store;
    t1 = C.JS_CONST_ZYJ(vertices);
    if (a < 0 || a >= t1)
      throw H.ioore(vertices, a);
    a0 = vertices[a];
    t2 = a + 1;
    if (t2 >= t1)
      throw H.ioore(vertices, t2);
    a1 = vertices[t2];
    t2 = a + 2;
    if (t2 >= t1)
      throw H.ioore(vertices, t2);
    a2 = vertices[t2];
    if (b < 0 || b >= t1)
      throw H.ioore(vertices, b);
    b0 = vertices[b];
    t2 = b + 1;
    if (t2 >= t1)
      throw H.ioore(vertices, t2);
    b1 = vertices[t2];
    t2 = b + 2;
    if (t2 >= t1)
      throw H.ioore(vertices, t2);
    b2 = vertices[t2];
    ba0 = b0 - a0;
    ba1 = b1 - a1;
    ba2 = b2 - a2;
    t2 = face.normal.storage;
    fn0 = t2[0];
    fn1 = t2[1];
    fn2 = t2[2];
    if (a0 * (ba1 * fn2 - ba2 * fn1) + a1 * (ba2 * fn0 - ba0 * fn2) + a2 * (ba0 * fn1 - ba1 * fn0) <= 0)
      if (a0 * ba0 + a1 * ba1 + a2 * ba2 >= 0)
        return Math.sqrt(a0 * a0 + a1 * a1 + a2 * a2);
      else {
        t1 = b0 * b0;
        t2 = b1 * b1;
        t3 = b2 * b2;
        if (b0 * ba0 + b1 * ba2 + b2 * ba2 <= 0)
          return Math.sqrt(t1 + t2 + t3);
        else {
          dotAB = a0 * b0 + a1 * b1 + a2 * b2;
          dSq = (a0 * a0 + a1 * a1 + a2 * a2) * (t1 + t2 + t3) - dotAB * dotAB;
          if (dSq >= 0)
            t1 = Math.sqrt(dSq / (ba0 * ba0 + ba1 * ba1 + ba2 * ba2));
          else
            t1 = 0;
          return t1;
        }
      }
    else
      return;
  },
  buildNewFace$4: function(a, b, c, forced) {
    var t1, face, t2, vertices, a0, t3, a1, a2, b0, b1, b2, c0, c1, ba0, ba1, ba2, ca0, ca1, ca2, fn0, fn1, fn2, $length, scale;
    t1 = this.stock;
    face = t1.root;
    if (face == null)
      return;
    face.pass = 0;
    t2 = face.vertex;
    t2[0] = a;
    t2[1] = b;
    t2[2] = c;
    vertices = this.vertex_store;
    t2 = C.JS_CONST_ZYJ(vertices);
    if (a < 0 || a >= t2)
      throw H.ioore(vertices, a);
    a0 = vertices[a];
    t3 = a + 1;
    if (t3 >= t2)
      throw H.ioore(vertices, t3);
    a1 = vertices[t3];
    t3 = a + 2;
    if (t3 >= t2)
      throw H.ioore(vertices, t3);
    a2 = vertices[t3];
    if (b < 0 || b >= t2)
      throw H.ioore(vertices, b);
    b0 = vertices[b];
    t3 = b + 1;
    if (t3 >= t2)
      throw H.ioore(vertices, t3);
    b1 = vertices[t3];
    t3 = b + 2;
    if (t3 >= t2)
      throw H.ioore(vertices, t3);
    b2 = vertices[t3];
    if (c < 0 || c >= t2)
      throw H.ioore(vertices, c);
    c0 = vertices[c];
    t3 = c + 1;
    if (t3 >= t2)
      throw H.ioore(vertices, t3);
    c1 = vertices[t3];
    t3 = c + 2;
    if (t3 >= t2)
      throw H.ioore(vertices, t3);
    ba0 = b0 - a0;
    ba1 = b1 - a1;
    ba2 = b2 - a2;
    ca0 = c0 - a0;
    ca1 = c1 - a1;
    ca2 = vertices[t3] - a2;
    fn0 = ba1 * ca2 - ba2 * ca1;
    t3 = face.normal.storage;
    t3[0] = fn0;
    fn1 = ba2 * ca0 - ba0 * ca2;
    t3[1] = fn1;
    fn2 = ba0 * ca1 - ba1 * ca0;
    t3[2] = fn2;
    $length = fn0 * fn0 + fn1 * fn1 + fn2 * fn2;
    if ($length > 1e-8) {
      face.distance = this.getEdgeDistance$3(face, a, b);
      if (face.distance == null)
        face.distance = this.getEdgeDistance$3(face, b, c);
      if (face.distance == null)
        face.distance = this.getEdgeDistance$3(face, c, a);
      scale = 1 / Math.sqrt($length);
      if (face.distance == null)
        face.distance = (a0 * fn0 + a1 * fn1 + a2 * fn2) * scale;
      if (!forced) {
        t2 = face.distance;
        if (typeof t2 !== "number")
          throw t2.$ge();
        t2 = t2 >= -0.000001;
      } else
        t2 = true;
      if (t2) {
        t3[0] = t3[0] * scale;
        t3[1] = t3[1] * scale;
        t3[2] = t3[2] * scale;
        this.remove$2(this, t1, face);
        this.append$2(this, this.hull, face);
        return face;
      }
    }
    return;
  },
  expandFace$5: function(pass, w, face, edge, horizon) {
    var t1, fn0, fn1, fn2, vertices, w0, t2, w1, w2, edge1, newFace, t3, edge2;
    if (face.pass !== pass) {
      t1 = face.normal.storage;
      fn0 = t1[0];
      fn1 = t1[1];
      fn2 = t1[2];
      vertices = this.vertex_store;
      t1 = C.JS_CONST_ZYJ(vertices);
      if (w < 0 || w >= t1)
        throw H.ioore(vertices, w);
      w0 = vertices[w];
      t2 = w + 1;
      if (t2 >= t1)
        throw H.ioore(vertices, t2);
      w1 = vertices[t2];
      t2 = w + 2;
      if (t2 >= t1)
        throw H.ioore(vertices, t2);
      w2 = vertices[t2];
      edge1 = C.JSInt_methods.$mod(edge + 1, 3);
      t1 = face.distance;
      if (typeof t1 !== "number")
        throw H.iae(t1);
      if (fn0 * w0 + fn1 * w1 + fn2 * w2 - t1 < -0.000001) {
        t1 = face.vertex;
        if (edge1 < 0 || edge1 >= 3)
          throw H.ioore(t1, edge1);
        t2 = t1[edge1];
        if (edge < 0 || edge >= 3)
          throw H.ioore(t1, edge);
        newFace = this.buildNewFace$4(t2, t1[edge], w, false);
        if (newFace != null) {
          t1 = newFace.edge;
          t1[0] = edge;
          t2 = newFace.adjFace;
          t2[0] = face;
          face.edge[edge] = 0;
          face.adjFace[edge] = newFace;
          t3 = horizon.cf;
          if (t3 != null) {
            t3.edge[1] = 2;
            t3.adjFace[1] = newFace;
            t1[2] = 1;
            t2[2] = t3;
          } else
            horizon.ff = newFace;
          horizon.cf = newFace;
          t1 = horizon.numFaces;
          if (typeof t1 !== "number")
            throw t1.$add();
          horizon.numFaces = t1 + 1;
          return true;
        }
      } else {
        edge2 = C.JSInt_methods.$mod(edge + 2, 3);
        face.pass = pass;
        t1 = face.adjFace;
        if (edge1 < 0 || edge1 >= 3)
          throw H.ioore(t1, edge1);
        t2 = t1[edge1];
        t3 = face.edge;
        if (this.expandFace$5(pass, w, t2, t3[edge1], horizon)) {
          if (edge2 < 0 || edge2 >= 3)
            throw H.ioore(t1, edge2);
          t1 = this.expandFace$5(pass, w, t1[edge2], t3[edge2], horizon);
        } else
          t1 = false;
        if (t1) {
          this.remove$2(this, this.hull, face);
          this.append$2(this, this.stock, face);
          return true;
        }
      }
    }
    return false;
  },
  evaluate$4: function(_, gjkSimplex, cache, xformA, xformB) {
    var shapeA, shapeB, hull, stock, t1, d0, d1, d2, b0, b1, b2, c0, c1, c2, ind0, ind1, vertices, i, t2, t3, t00, best, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11, supportA, supportB, horizon, nextVertex, pass, iterations, nextVertex0, n0, n1, n2, a0, a1, a2, t4, w0, w1, w2, j, valid, bd, p0, p1, p2, x0, x1, x2, y0, y1, y2, z0, z1, z2, alpha, beta, gamma, scale, t5, t6, t7, t8, t9, t10, t11, t12, t13;
    shapeA = cache.shapeA;
    shapeB = cache.shapeB;
    hull = this.hull;
    stock = this.stock;
    for (; t1 = hull.root, t1 != null;) {
      this.remove$2(this, hull, t1);
      this.append$2(this, stock, t1);
    }
    d0 = gjkSimplex[27];
    d1 = gjkSimplex[28];
    d2 = gjkSimplex[29];
    b0 = gjkSimplex[9] - d0;
    b1 = gjkSimplex[10] - d1;
    b2 = gjkSimplex[11] - d2;
    c0 = gjkSimplex[18] - d0;
    c1 = gjkSimplex[19] - d1;
    c2 = gjkSimplex[20] - d2;
    if ((gjkSimplex[0] - d0) * (b1 * c2 - b2 * c1) + (gjkSimplex[1] - d1) * (b2 * c0 - b0 * c2) + (gjkSimplex[2] - d2) * (b0 * c1 - b1 * c0) < 0) {
      ind0 = 9;
      ind1 = 0;
    } else {
      ind0 = 0;
      ind1 = 9;
    }
    vertices = this.vertex_store;
    for (t1 = C.JS_CONST_ZYJ(vertices), i = 0; i < 9; ++i) {
      t2 = gjkSimplex[ind0 + i];
      if (i >= t1)
        throw H.ioore(vertices, i);
      vertices[i] = t2;
      t2 = 9 + i;
      t3 = gjkSimplex[ind1 + i];
      if (t2 >= t1)
        throw H.ioore(vertices, t2);
      vertices[t2] = t3;
      t3 = 18 + i;
      t2 = gjkSimplex[t3];
      if (t3 >= t1)
        throw H.ioore(vertices, t3);
      vertices[t3] = t2;
      t2 = 27 + i;
      t3 = gjkSimplex[t2];
      if (t2 >= t1)
        throw H.ioore(vertices, t2);
      vertices[t2] = t3;
    }
    t00 = this.buildNewFace$4(0, 9, 18, true);
    t1 = this.buildNewFace$4(9, 0, 27, true);
    t2 = this.buildNewFace$4(18, 9, 27, true);
    t3 = this.buildNewFace$4(0, 18, 27, true);
    if (hull.count !== 4) {
      cache.closestA.setValues$3(gjkSimplex[3], gjkSimplex[4], gjkSimplex[5]);
      cache.closestA.setValues$3(gjkSimplex[6], gjkSimplex[7], gjkSimplex[8]);
      return 0;
    }
    best = this.findBest$0();
    this.bind$4(t00, 0, t1, 0);
    this.bind$4(t00, 1, t2, 0);
    this.bind$4(t00, 2, t3, 0);
    this.bind$4(t1, 1, t3, 2);
    this.bind$4(t1, 2, t2, 1);
    this.bind$4(t2, 2, t3, 1);
    t1 = xformA.storage;
    A0 = t1[0];
    A1 = t1[1];
    A2 = t1[2];
    A3 = t1[3];
    A4 = t1[4];
    A5 = t1[5];
    A6 = t1[6];
    A7 = t1[7];
    A8 = t1[8];
    A9 = t1[9];
    A10 = t1[10];
    A11 = t1[11];
    t1 = xformB.storage;
    B0 = t1[0];
    B1 = t1[1];
    B2 = t1[2];
    B3 = t1[3];
    B4 = t1[4];
    B5 = t1[5];
    B6 = t1[6];
    B7 = t1[7];
    B8 = t1[8];
    B9 = t1[9];
    B10 = t1[10];
    B11 = t1[11];
    supportA = cache.closestA;
    supportB = cache.closestB;
    horizon = this.horizon;
    for (t1 = supportA.storage, t2 = supportB.storage, nextVertex = 36, pass = 0, iterations = 0; iterations < 100; ++iterations, nextVertex = nextVertex0) {
      if (nextVertex >= 576)
        break;
      horizon.ff = null;
      horizon.cf = null;
      horizon.numFaces = 0;
      nextVertex0 = nextVertex + 9;
      ++pass;
      best.pass = pass;
      t3 = best.normal.storage;
      n0 = t3[0];
      n1 = t3[1];
      n2 = t3[2];
      t1[0] = A0 * n0 + A1 * n1 + A2 * n2;
      t1[1] = A3 * n0 + A4 * n1 + A5 * n2;
      t1[2] = A6 * n0 + A7 * n1 + A8 * n2;
      t2[0] = -(B0 * n0 + B1 * n1 + B2 * n2);
      t2[1] = -(B3 * n0 + B4 * n1 + B5 * n2);
      t2[2] = -(B6 * n0 + B7 * n1 + B8 * n2);
      shapeA.localSupportWithoutMargin$2(supportA, supportA);
      shapeB.localSupportWithoutMargin$2(supportB, supportB);
      d0 = t1[0];
      d1 = t1[1];
      d2 = t1[2];
      a0 = A0 * d0 + A3 * d1 + A6 * d2 + A9;
      a1 = A1 * d0 + A4 * d1 + A7 * d2 + A10;
      a2 = A2 * d0 + A5 * d1 + A8 * d2 + A11;
      d0 = t2[0];
      d1 = t2[1];
      d2 = t2[2];
      b0 = B0 * d0 + B3 * d1 + B6 * d2 + B9;
      b1 = B1 * d0 + B4 * d1 + B7 * d2 + B10;
      b2 = B2 * d0 + B5 * d1 + B8 * d2 + B11;
      t3 = nextVertex + 3;
      t4 = C.JS_CONST_ZYJ(vertices);
      if (t3 >= t4)
        throw H.ioore(vertices, t3);
      vertices[t3] = a0;
      t3 = nextVertex + 4;
      if (t3 >= t4)
        throw H.ioore(vertices, t3);
      vertices[t3] = a1;
      t3 = nextVertex + 5;
      if (t3 >= t4)
        throw H.ioore(vertices, t3);
      vertices[t3] = a2;
      t3 = nextVertex + 6;
      if (t3 >= t4)
        throw H.ioore(vertices, t3);
      vertices[t3] = b0;
      t3 = nextVertex + 7;
      if (t3 >= t4)
        throw H.ioore(vertices, t3);
      vertices[t3] = b1;
      t3 = nextVertex + 8;
      if (t3 >= t4)
        throw H.ioore(vertices, t3);
      vertices[t3] = b2;
      w0 = a0 - b0;
      if (nextVertex >= t4)
        throw H.ioore(vertices, nextVertex);
      vertices[nextVertex] = w0;
      t3 = nextVertex + 1;
      w1 = a1 - b1;
      if (t3 >= t4)
        throw H.ioore(vertices, t3);
      vertices[t3] = w1;
      t3 = nextVertex + 2;
      w2 = a2 - b2;
      if (t3 >= t4)
        throw H.ioore(vertices, t3);
      vertices[t3] = w2;
      t3 = best.distance;
      if (typeof t3 !== "number")
        throw H.iae(t3);
      if (n0 * w0 + n1 * w1 + n2 * w2 - t3 > 0.0001) {
        t3 = best.adjFace;
        t4 = best.edge;
        j = 0;
        valid = true;
        while (true) {
          if (!(j < 3 && valid))
            break;
          if (valid) {
            if (j >= 3)
              throw H.ioore(t3, j);
            valid = this.expandFace$5(pass, nextVertex, t3[j], t4[j], horizon);
          } else
            valid = false;
          ++j;
        }
        if (valid) {
          t3 = horizon.numFaces;
          if (typeof t3 !== "number")
            throw t3.$ge();
          t3 = t3 >= 3;
        } else
          t3 = false;
        if (t3) {
          t3 = horizon.cf;
          t4 = horizon.ff;
          t3.edge[1] = 2;
          t3.adjFace[1] = t4;
          t4.edge[2] = 1;
          t4.adjFace[2] = t3;
          this.remove$2(this, hull, best);
          this.append$2(this, stock, best);
          best = this.findBest$0();
        } else
          break;
      } else
        break;
    }
    t3 = best.normal.storage;
    n0 = t3[0];
    n1 = t3[1];
    n2 = t3[2];
    bd = best.distance;
    if (typeof bd !== "number")
      throw H.iae(bd);
    p0 = n0 * bd;
    p1 = n1 * bd;
    p2 = n2 * bd;
    t3 = best.vertex;
    c0 = t3[0];
    c1 = t3[1];
    c2 = t3[2];
    t3 = C.JS_CONST_ZYJ(vertices);
    if (c0 < 0 || c0 >= t3)
      throw H.ioore(vertices, c0);
    x0 = vertices[c0] - p0;
    t4 = c0 + 1;
    if (t4 >= t3)
      throw H.ioore(vertices, t4);
    x1 = vertices[t4] - p1;
    t4 = c0 + 2;
    if (t4 >= t3)
      throw H.ioore(vertices, t4);
    x2 = vertices[t4] - p2;
    if (c1 < 0 || c1 >= t3)
      throw H.ioore(vertices, c1);
    y0 = vertices[c1] - p0;
    t4 = c1 + 1;
    if (t4 >= t3)
      throw H.ioore(vertices, t4);
    y1 = vertices[t4] - p1;
    t4 = c1 + 2;
    if (t4 >= t3)
      throw H.ioore(vertices, t4);
    y2 = vertices[t4] - p2;
    if (c2 < 0 || c2 >= t3)
      throw H.ioore(vertices, c2);
    z0 = vertices[c2] - p0;
    t4 = c2 + 1;
    if (t4 >= t3)
      throw H.ioore(vertices, t4);
    z1 = vertices[t4] - p1;
    t4 = c2 + 2;
    if (t4 >= t3)
      throw H.ioore(vertices, t4);
    z2 = vertices[t4] - p2;
    d0 = y1 * z2 - y2 * z1;
    d1 = y2 * z0 - y0 * z2;
    d2 = y0 * z1 - y1 * z0;
    alpha = Math.sqrt(d0 * d0 + d1 * d1 + d2 * d2);
    d0 = z1 * x2 - z2 * x1;
    d1 = z2 * x0 - z0 * x2;
    d2 = z0 * x1 - z1 * x0;
    beta = Math.sqrt(d0 * d0 + d1 * d1 + d2 * d2);
    d0 = x1 * y2 - x2 * y1;
    d1 = x2 * y0 - x0 * y2;
    d2 = x0 * y1 - x1 * y0;
    gamma = Math.sqrt(d0 * d0 + d1 * d1 + d2 * d2);
    scale = 1 / (alpha + beta + gamma);
    alpha *= scale;
    beta *= scale;
    gamma *= scale;
    t1[2] = 0;
    t1[1] = 0;
    t1[0] = 0;
    t2[2] = 0;
    t2[1] = 0;
    t2[0] = 0;
    for (t3 = c0 + 3, t4 = C.JS_CONST_ZYJ(vertices), t5 = c1 + 3, t6 = c2 + 3, t7 = c0 + 6, t8 = c1 + 6, t9 = c2 + 6, i = 0; i < 3; ++i) {
      t10 = t1[i];
      t11 = t3 + i;
      if (t11 >= t4)
        throw H.ioore(vertices, t11);
      t11 = vertices[t11];
      t12 = t5 + i;
      if (t12 >= t4)
        throw H.ioore(vertices, t12);
      t12 = vertices[t12];
      t13 = t6 + i;
      if (t13 >= t4)
        throw H.ioore(vertices, t13);
      t1[i] = t10 + (alpha * t11 + beta * t12 + gamma * vertices[t13]);
      t13 = t2[i];
      t12 = t7 + i;
      if (t12 >= t4)
        throw H.ioore(vertices, t12);
      t12 = vertices[t12];
      t11 = t8 + i;
      if (t11 >= t4)
        throw H.ioore(vertices, t11);
      t11 = vertices[t11];
      t10 = t9 + i;
      if (t10 >= t4)
        throw H.ioore(vertices, t10);
      t2[i] = t13 + (alpha * t12 + beta * t11 + gamma * vertices[t10]);
    }
    t1 = cache.axis.storage;
    t1[0] = -n0;
    t1[1] = -n1;
    t1[2] = -n2;
    t1 = best.distance;
    if (typeof t1 !== "number")
      throw t1.$negate();
    return -t1;
  },
  WebGLContactEPA$0: function() {
    var face_store, i, t1, t2, t3, t4;
    face_store = P.List_List(128, N.ContactFace);
    H.setRuntimeTypeInfo(face_store, [N.ContactFace]);
    for (i = 0; i < 128; ++i) {
      t1 = new Float32Array(3);
      t1.$dartCachedLength = t1.length;
      t2 = new Uint16Array(3);
      t2.$dartCachedLength = t2.length;
      t3 = P.List_List(3, N.ContactFace);
      t3.$builtinTypeInfo = [N.ContactFace];
      t4 = new Uint16Array(3);
      t4.$dartCachedLength = t4.length;
      face_store[i] = new N.ContactFace(new T.Vector3(t1), 0, t2, t3, t4, null, null, 0);
    }
    for (t1 = this.stock, i = 0; i < 128; ++i)
      this.append$2(this, t1, face_store[128 - i - 1]);
  },
  static: {
"": "WebGLContactEPA_version,WebGLContactEPA_MAX_VERTICES,WebGLContactEPA_MAX_FACES",
WebGLContactEPA$: function() {
  var t1 = new Float32Array(576);
  t1.$dartCachedLength = t1.length;
  t1 = new N.WebGLContactEPA(t1, new N.Hs(null, 0), new N.Hs(null, 0), new N.Horizon(null, null, null));
  t1.WebGLContactEPA$0();
  return t1;
}}

},

Hs: {"": "Object;root,count"},

Horizon: {"": "Object;cf,ff,numFaces"},

ContactFace: {"": "Object;normal,distance,vertex,adjFace,edge,leaf0,leaf1,pass"},

WebGLPhysicsRigidBody: {"": "WebGLPhysicsPrivateBody;userData,_inertia,_fixedRotationtype,aabbTreeIndex,_id,_previouslyActive,_bullet,_world,_shape,_friction,_restitution,_transform,_arbiters,_constraints,_velocity,_linearDamping,_angularDamping,_extents,_startTransform,_endTransform,_prevTransform,_newTransform,_island,_islandRoot,_islandRank,_delaySleep,_wakeTimeStamp,_group,_mask,_kinematic,_fixedRotation,_mass,_inverseMass,_inverseInertiaLocal,_inverseInertia,_collisionObject,_permitSleep,_sweepFrozen,_active,_contactCallbacks",
  set$transform: function(_, transform) {
    var arbiters, limit, i;
    transform.copyInto$1(this._transform);
    arbiters = this._arbiters;
    limit = arbiters.length;
    for (i = 0; i < limit; ++i) {
      if (i >= arbiters.length)
        throw H.ioore(arbiters, i);
      arbiters[i].skipDiscreteCollisions = false;
    }
  },
  get$shape: function(_) {
    return this._shape;
  },
  clone$0: function(_) {
    var t1, t2, t3, t4, t5, t6, t7, t8, t9;
    t1 = new Float32Array(12);
    t1.$dartCachedLength = t1.length;
    t1 = this._transform.copyInto$1(new N.Matrix43(t1));
    t2 = this.userData;
    t3 = this._mask;
    t4 = this._group;
    t5 = this._kinematic;
    t6 = this._inertia;
    t7 = this._mass;
    t8 = this._friction;
    t9 = this._restitution;
    return N.WebGLPhysicsRigidBody$(this._active, this._angularDamping, null, false, t8, null, t4, t6, t5, this._linearDamping, null, t3, t7, null, null, null, null, null, t9, this._shape, t1, t2);
  },
  WebGLPhysicsRigidBody$22$active$angularDamping$angularVelocity$fixedRotation$friction$frozen$group$inertia$kinematic$linearDamping$linearVelocity$mask$mass$onAddedContacts$onPreSolveContact$onProcessedContacts$onRemovedContacts$permitSleep$restitution$shape$transform$userData: function(active, angularDamping, angularVelocity, fixedRotation, friction, frozen, group, inertia, kinematic, linearDamping, linearVelocity, mask, mass, onAddedContacts, onPreSolveContact, onProcessedContacts, onRemovedContacts, permitSleep, restitution, shape, transform, userData) {
    var t1, t2, t3, t4, t5;
    t1 = new Float32Array(3);
    t1.$dartCachedLength = t1.length;
    t1 = new T.Vector3(t1);
    t1.setFrom$1(inertia);
    this._inertia = t1;
    this._kinematic = kinematic;
    this._group = group;
    this._mask = mask;
    if (active != null)
      t1 = active;
    else
      t1 = frozen == null || frozen;
    this._active = t1;
    this._kinematic = kinematic;
    t1 = !kinematic;
    this._fixedRotation = kinematic || fixedRotation;
    if (this._fixedRotation) {
      t2 = new Float32Array(3);
      t2.$dartCachedLength = t2.length;
      t2 = new T.Vector3(t2);
    } else {
      t2 = inertia.storage;
      t3 = t2[0];
      t4 = t2[1];
      t2 = t2[2];
      t5 = new Float32Array(3);
      t5.$dartCachedLength = t5.length;
      t5 = new T.Vector3(t5);
      t5.setValues$3(1 / t3, 1 / t4, 1 / t2);
      t2 = t5;
    }
    this._inverseInertiaLocal = t2;
    t2 = new Float32Array(9);
    t2.$dartCachedLength = t2.length;
    t2 = new T.Matrix3(t2);
    t2.setIdentity$0();
    this._inverseInertia = t2;
    this._mass = mass;
    this._inverseMass = kinematic ? 0 : 1 / this._mass;
    this._collisionObject = false;
    this._permitSleep = t1;
    this._sweepFrozen = kinematic;
    this._contactCallbacks = null;
  },
  static: {
"": "WebGLPhysicsRigidBody_version",
WebGLPhysicsRigidBody$: function(active, angularDamping, angularVelocity, fixedRotation, friction, frozen, group, inertia, kinematic, linearDamping, linearVelocity, mask, mass, onAddedContacts, onPreSolveContact, onProcessedContacts, onRemovedContacts, permitSleep, restitution, shape, transform, userData) {
  var t1, t2, t3;
  t1 = N.Matrix43$identity();
  t2 = P.List_List(null, N.WebGLPhysicsArbiter);
  H.setRuntimeTypeInfo(t2, [N.WebGLPhysicsArbiter]);
  t3 = new Float32Array(12);
  t3.$dartCachedLength = t3.length;
  t3 = new N.WebGLPhysicsRigidBody(userData, null, false, null, null, null, false, null, shape, friction, restitution, t1, t2, [], new N.Matrix43(t3), linearDamping, angularDamping, T.Aabb3$(), N.Matrix43$identity(), N.Matrix43$identity(), N.Matrix43$identity(), N.Matrix43$identity(), null, null, 0, true, null, 0, 0, false, false, 0, 0, null, null, false, false, false, false, null);
  t3.WebGLPhysicsPrivateBody$8(shape, transform, linearVelocity, angularVelocity, friction, restitution, linearDamping, angularDamping);
  t3.WebGLPhysicsRigidBody$22$active$angularDamping$angularVelocity$fixedRotation$friction$frozen$group$inertia$kinematic$linearDamping$linearVelocity$mask$mass$onAddedContacts$onPreSolveContact$onProcessedContacts$onRemovedContacts$permitSleep$restitution$shape$transform$userData(active, angularDamping, angularVelocity, fixedRotation, friction, frozen, group, inertia, kinematic, linearDamping, linearVelocity, mask, mass, onAddedContacts, onPreSolveContact, onProcessedContacts, onRemovedContacts, permitSleep, restitution, shape, transform, userData);
  return t3;
}}

},

AabbTreeNode: {"": "Object;escapeNodeOffset<,externalNode<,extents<",
  reset$8: function(_, minX, minY, minZ, maxX, maxY, maxZ, escapeNodeOffset, externalNode) {
    var oldExtents, t1;
    this.escapeNodeOffset = escapeNodeOffset;
    this.externalNode = externalNode;
    oldExtents = this.extents;
    t1 = oldExtents._min.storage;
    t1[0] = minX;
    t1[1] = minY;
    t1[2] = minZ;
    t1 = oldExtents._max.storage;
    t1[0] = maxX;
    t1[1] = maxY;
    t1[2] = maxZ;
  },
  reset$7: function($receiver, minX, minY, minZ, maxX, maxY, maxZ, escapeNodeOffset) {
    return this.reset$8($receiver, minX, minY, minZ, maxX, maxY, maxZ, escapeNodeOffset, null);
  },
  clear$0: function(_) {
    var oldExtents, t1;
    this.escapeNodeOffset = 1;
    this.externalNode = null;
    oldExtents = this.extents;
    t1 = oldExtents._min.storage;
    t1[0] = 179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368;
    t1[1] = 179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368;
    t1[2] = 179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368;
    t1 = oldExtents._max.storage;
    t1[0] = -179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368;
    t1[1] = -179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368;
    t1[2] = -179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368;
  },
  static: {
"": "AabbTreeNode_version",
}

},

AabbTree: {"": "Object;numNodesLeaf,nodes,endNode,needsRebuild,needsRebound,numAdds,numUpdates,numExternalNodes,startUpdate,endUpdate,highQuality,ignoreY,nodesStack",
  add$2: function(_, externalNode, extents) {
    var endNode, copyExtents, t1, t2;
    endNode = this.endNode;
    externalNode.aabbTreeIndex = endNode;
    copyExtents = T.Aabb3$copy(extents);
    t1 = this.nodes;
    t2 = new N.AabbTreeNode(null, null, null);
    t2.escapeNodeOffset = 1;
    t2.externalNode = externalNode;
    t2.extents = copyExtents;
    t1.push(t2);
    if (typeof endNode !== "number")
      throw endNode.$add();
    this.endNode = endNode + 1;
    this.needsRebuild = true;
    t2 = this.numAdds;
    if (typeof t2 !== "number")
      throw t2.$add();
    this.numAdds = t2 + 1;
    t2 = this.numExternalNodes;
    if (typeof t2 !== "number")
      throw t2.$add();
    this.numExternalNodes = t2 + 1;
  },
  remove$1: function(_, externalNode) {
    var index, t1, nodes, endNode, endNode0;
    index = externalNode.aabbTreeIndex;
    if (index != null) {
      t1 = this.numExternalNodes;
      if (typeof t1 !== "number")
        throw t1.$gt();
      if (t1 > 1) {
        nodes = this.nodes;
        if (index >>> 0 !== index || index >= nodes.length)
          throw H.ioore(nodes, index);
        J.clear$0$ax(nodes[index]);
        endNode = this.endNode;
        if (typeof endNode !== "number")
          throw H.iae(endNode);
        if (index + 1 >= endNode) {
          t1 = nodes.length;
          while (true) {
            endNode0 = endNode - 1;
            if (endNode0 < 0 || endNode0 >= t1)
              throw H.ioore(nodes, endNode0);
            if (!(nodes[endNode0].get$externalNode() == null))
              break;
            endNode = endNode0;
          }
          this.endNode = endNode;
        } else
          this.needsRebuild = true;
        t1 = this.numExternalNodes;
        if (typeof t1 !== "number")
          throw t1.$sub();
        this.numExternalNodes = t1 - 1;
      } else
        this.clear$0(this);
      externalNode.aabbTreeIndex = null;
    }
  },
  findParent$1: function(nodeIndex) {
    var nodes, t1, parentIndex, nodeDist, $parent, t2;
    nodes = this.nodes;
    t1 = nodes.length;
    parentIndex = nodeIndex;
    nodeDist = 0;
    do {
      if (typeof parentIndex !== "number")
        throw parentIndex.$sub();
      --parentIndex;
      ++nodeDist;
      if (parentIndex < 0 || parentIndex >= t1)
        throw H.ioore(nodes, parentIndex);
      $parent = nodes[parentIndex];
      t2 = $parent.get$escapeNodeOffset();
      if (typeof t2 !== "number")
        throw t2.$le();
    } while (t2 <= nodeDist);
    return $parent;
  },
  update$2: function(_, externalNode, extents) {
    var index, t1, min0, min1, min2, max0, max1, max2, needsRebuild, needsRebound, nodes, nodeExtents, t2, t3, doUpdate, parentExtents;
    index = externalNode.aabbTreeIndex;
    if (index != null) {
      t1 = extents._min.storage;
      min0 = t1[0];
      min1 = t1[1];
      min2 = t1[2];
      t1 = extents._max.storage;
      max0 = t1[0];
      max1 = t1[1];
      max2 = t1[2];
      needsRebuild = this.needsRebuild;
      needsRebound = this.needsRebound;
      nodes = this.nodes;
      t1 = nodes.length;
      if (index >>> 0 !== index || index >= t1)
        throw H.ioore(nodes, index);
      nodeExtents = nodes[index].get$extents();
      t2 = needsRebuild !== true;
      if (t2)
        if (needsRebound !== true) {
          t3 = nodeExtents._min.storage;
          if (!(t3[0] > min0))
            if (!(t3[1] > min1))
              if (!(t3[2] > min2)) {
                t3 = nodeExtents._max.storage;
                t3 = t3[0] < max0 || t3[1] < max1 || t3[2] < max2;
              } else
                t3 = true;
            else
              t3 = true;
          else
            t3 = true;
          doUpdate = t3;
        } else
          doUpdate = true;
      else
        doUpdate = true;
      t3 = nodeExtents._min.storage;
      t3[0] = min0;
      t3[1] = min1;
      t3[2] = min2;
      t3 = nodeExtents._max.storage;
      t3[0] = max0;
      t3[1] = max1;
      t3[2] = max2;
      if (doUpdate)
        if (t2 && 1 < t1) {
          t1 = this.numUpdates;
          if (typeof t1 !== "number")
            throw t1.$add();
          this.numUpdates = t1 + 1;
          t1 = this.startUpdate;
          if (typeof t1 !== "number")
            throw t1.$gt();
          if (t1 > index)
            this.startUpdate = index;
          t1 = this.endUpdate;
          if (typeof t1 !== "number")
            throw t1.$lt();
          if (t1 < index)
            this.endUpdate = index;
          if (needsRebound !== true) {
            t1 = this.numUpdates;
            if (typeof t1 !== "number")
              throw H.iae(t1);
            t2 = this.numExternalNodes;
            if (typeof t2 !== "number")
              throw H.iae(t2);
            if (2 * t1 > t2)
              this.needsRebound = true;
            else {
              parentExtents = this.findParent$1(index).extents;
              t1 = parentExtents._min.storage;
              if (!(t1[0] > min0))
                if (!(t1[1] > min1))
                  if (!(t1[2] > min2)) {
                    t1 = parentExtents._max.storage;
                    t1 = t1[0] < max0 || t1[1] < max1 || t1[2] < max2;
                  } else
                    t1 = true;
                else
                  t1 = true;
              else
                t1 = true;
              if (t1)
                this.needsRebound = true;
            }
          } else {
            t1 = this.numUpdates;
            t2 = this.numExternalNodes;
            if (typeof t2 !== "number")
              throw H.iae(t2);
            if (typeof t1 !== "number")
              throw t1.$gt();
            if (t1 > 3 * t2) {
              this.needsRebuild = true;
              this.numAdds = this.numUpdates;
            }
          }
        }
    } else
      this.add$2(this, externalNode, extents);
  },
  rebound$0: function() {
    var nodes, t1, startUpdateNodeIndex, endUpdateNodeIndex, nodesStack, t2, numNodesStack, topNodeIndex, topNode, t3, currentEscapeNodeIndex, nodeIndex, topNodeIndex0, node, escapeNodeIndex, extents, minX, minY, minZ, maxX, maxY, maxZ, minX0, minY0, minZ0, maxX0, maxY0, maxZ0;
    nodes = this.nodes;
    t1 = nodes.length;
    if (t1 > 1) {
      startUpdateNodeIndex = this.startUpdate;
      endUpdateNodeIndex = this.endUpdate;
      nodesStack = this.nodesStack;
      for (t2 = nodesStack.length, numNodesStack = 0, topNodeIndex = 0; true;) {
        if (topNodeIndex >>> 0 !== topNodeIndex || topNodeIndex >= t1)
          throw H.ioore(nodes, topNodeIndex);
        topNode = nodes[topNodeIndex];
        t3 = topNode.get$escapeNodeOffset();
        if (typeof t3 !== "number")
          throw H.iae(t3);
        currentEscapeNodeIndex = topNodeIndex + t3;
        nodeIndex = topNodeIndex + 1;
        if (typeof endUpdateNodeIndex !== "number")
          throw H.iae(endUpdateNodeIndex);
        topNodeIndex0 = topNodeIndex;
        do {
          if (nodeIndex < 0 || nodeIndex >= t1)
            throw H.ioore(nodes, nodeIndex);
          node = nodes[nodeIndex];
          t3 = node.get$escapeNodeOffset();
          if (typeof t3 !== "number")
            throw H.iae(t3);
          escapeNodeIndex = nodeIndex + t3;
          if (nodeIndex < endUpdateNodeIndex) {
            if (node.externalNode == null) {
              if (typeof startUpdateNodeIndex !== "number")
                throw H.iae(startUpdateNodeIndex);
              if (escapeNodeIndex > startUpdateNodeIndex) {
                if (numNodesStack < 0 || numNodesStack >= t2)
                  throw H.ioore(nodesStack, numNodesStack);
                nodesStack[numNodesStack] = topNodeIndex0;
                ++numNodesStack;
                topNodeIndex0 = nodeIndex;
              }
            }
          } else
            break;
          if (escapeNodeIndex < currentEscapeNodeIndex) {
            nodeIndex = escapeNodeIndex;
            continue;
          } else
            break;
        } while (true);
        if (topNodeIndex0 === topNodeIndex) {
          nodeIndex = topNodeIndex0 + 1;
          if (nodeIndex < 0 || nodeIndex >= t1)
            throw H.ioore(nodes, nodeIndex);
          node = nodes[nodeIndex];
          extents = node.get$extents();
          t3 = extents._min.storage;
          minX = t3[0];
          minY = t3[1];
          minZ = t3[2];
          t3 = extents._max.storage;
          maxX = t3[0];
          maxY = t3[1];
          maxZ = t3[2];
          t3 = node.escapeNodeOffset;
          if (typeof t3 !== "number")
            throw H.iae(t3);
          nodeIndex += t3;
          for (; nodeIndex < currentEscapeNodeIndex;) {
            if (nodeIndex < 0 || nodeIndex >= t1)
              throw H.ioore(nodes, nodeIndex);
            node = nodes[nodeIndex];
            extents = node.get$extents();
            t3 = extents._min.storage;
            minX0 = t3[0];
            if (minX > minX0)
              minX = minX0;
            minY0 = t3[1];
            if (minY > minY0)
              minY = minY0;
            minZ0 = t3[2];
            if (minZ > minZ0)
              minZ = minZ0;
            t3 = extents._max.storage;
            maxX0 = t3[0];
            if (maxX < maxX0)
              maxX = maxX0;
            maxY0 = t3[1];
            if (maxY < maxY0)
              maxY = maxY0;
            maxZ0 = t3[2];
            if (maxZ < maxZ0)
              maxZ = maxZ0;
            t3 = node.escapeNodeOffset;
            if (typeof t3 !== "number")
              throw H.iae(t3);
            nodeIndex += t3;
          }
          extents = topNode.extents;
          t3 = extents._min.storage;
          t3[0] = minX;
          t3[1] = minY;
          t3[2] = minZ;
          t3 = extents._max.storage;
          t3[0] = maxX;
          t3[1] = maxY;
          t3[2] = maxZ;
          if (0 < numNodesStack) {
            --numNodesStack;
            if (numNodesStack < 0 || numNodesStack >= t2)
              throw H.ioore(nodesStack, numNodesStack);
            topNodeIndex = nodesStack[numNodesStack];
          } else
            break;
          endUpdateNodeIndex = topNodeIndex0;
        } else
          topNodeIndex = topNodeIndex0;
      }
    }
    this.needsRebuild = false;
    this.needsRebound = false;
    this.numAdds = 0;
    this.startUpdate = 2147483647;
    this.endUpdate = -2147483647;
  },
  rebuild$0: function() {
    var t1, nodes, numBuildNodes, nodes0, buildNodes, endNodeIndex, t2, n, currentNode, extents, deltaX, t3, t4, deltaZ, rootNode;
    t1 = this.numExternalNodes;
    if (typeof t1 !== "number")
      throw t1.$gt();
    if (t1 > 0) {
      nodes = this.nodes;
      numBuildNodes = nodes.length;
      if (t1 === numBuildNodes) {
        nodes0 = [];
        this.nodes = nodes0;
        buildNodes = nodes;
        nodes = nodes0;
      } else {
        buildNodes = [];
        C.JSArray_methods.set$length(buildNodes, t1);
        endNodeIndex = this.endNode;
        if (typeof endNodeIndex !== "number")
          throw H.iae(endNodeIndex);
        t1 = nodes.length;
        t2 = buildNodes.length;
        numBuildNodes = 0;
        n = 0;
        for (; n < endNodeIndex; ++n) {
          if (n >= t1)
            throw H.ioore(nodes, n);
          currentNode = nodes[n];
          if (currentNode.get$externalNode() != null) {
            nodes[n] = null;
            if (numBuildNodes >= t2)
              throw H.ioore(buildNodes, numBuildNodes);
            buildNodes[numBuildNodes] = currentNode;
            ++numBuildNodes;
          }
        }
        if (t2 > numBuildNodes)
          C.JSArray_methods.set$length(buildNodes, numBuildNodes);
      }
      if (numBuildNodes > 1) {
        if (numBuildNodes > this.numNodesLeaf) {
          t1 = this.numAdds;
          if (typeof t1 !== "number")
            throw t1.$gt();
          t1 = t1 > 0;
        } else
          t1 = false;
        if (t1)
          if (this.highQuality)
            this.sortNodesHighQuality$1(buildNodes);
          else if (this.ignoreY === true)
            this.sortNodesNoY$1(buildNodes);
          else
            this.sortNodes$1(buildNodes);
        C.JSArray_methods.set$length(nodes, this.predictNumNodes$3(0, numBuildNodes, 0));
        this.recursiveBuild$4(buildNodes, 0, numBuildNodes, 0);
        t1 = nodes.length;
        if (0 >= t1)
          throw H.ioore(nodes, 0);
        endNodeIndex = nodes[0].get$escapeNodeOffset();
        if (typeof endNodeIndex !== "number")
          throw H.iae(endNodeIndex);
        if (t1 > endNodeIndex)
          C.JSArray_methods.set$length(nodes, endNodeIndex);
        this.endNode = endNodeIndex;
        if (0 >= nodes.length)
          throw H.ioore(nodes, 0);
        extents = nodes[0].get$extents();
        t1 = extents._max.storage;
        t2 = extents._min.storage;
        deltaX = t1[0] - t2[0];
        t3 = t1[1];
        t4 = t2[1];
        deltaZ = t1[2] - t2[2];
        t1 = deltaX <= deltaZ ? deltaX : deltaZ;
        this.ignoreY = 4 * (t3 - t4) < t1;
      } else {
        if (0 >= buildNodes.length)
          throw H.ioore(buildNodes, 0);
        rootNode = buildNodes[0];
        rootNode.get$externalNode().aabbTreeIndex = 0;
        C.JSArray_methods.set$length(nodes, 1);
        if (0 >= nodes.length)
          throw H.ioore(nodes, 0);
        nodes[0] = rootNode;
        this.endNode = 1;
      }
    }
    this.needsRebuild = false;
    this.needsRebound = false;
    this.numAdds = 0;
    this.numUpdates = 0;
    this.startUpdate = 2147483647;
    this.endUpdate = -2147483647;
  },
  sortNodes$1: function(nodes) {
    var t1, numNodes;
    t1 = {};
    numNodes = nodes.length;
    t1.reverse_0 = false;
    t1.axis_1 = 0;
    new N.AabbTree_sortNodes_sortNodesRecursive(t1, this, this.numNodesLeaf).call$3(nodes, 0, numNodes);
  },
  sortNodesNoY$1: function(nodes) {
    var t1, numNodes;
    t1 = {};
    numNodes = nodes.length;
    t1.reverse_0 = false;
    t1.axis_1 = 0;
    new N.AabbTree_sortNodesNoY_sortNodesNoYRecursive(t1, this, this.numNodesLeaf).call$3(nodes, 0, numNodes);
  },
  sortNodesHighQuality$1: function(nodes) {
    var t1, numNodes, calculateSAH;
    t1 = {};
    numNodes = nodes.length;
    calculateSAH = this.get$calculateSAH();
    t1.reverse_0 = false;
    new N.AabbTree_sortNodesHighQuality_sortNodesHighQualityRecursive(t1, this, this.numNodesLeaf, calculateSAH).call$3(nodes, 0, numNodes);
  },
  calculateSAH$3: function(buildNodes, startIndex, endIndex) {
    var t1, extents, t2, minX, minY, minZ, maxX, maxY, maxZ, n, t3, minX0, minY0, minZ0, maxX0, maxY0, maxZ0;
    t1 = J.getInterceptor$asx(buildNodes);
    extents = t1.$index(buildNodes, startIndex).get$extents();
    t2 = extents._min.storage;
    minX = t2[0];
    minY = t2[1];
    minZ = t2[2];
    t2 = extents._max.storage;
    maxX = t2[0];
    maxY = t2[1];
    maxZ = t2[2];
    for (n = J.$add$ns(startIndex, 1); t2 = J.getInterceptor$n(n), t2.$lt(n, endIndex); n = t2.$add(n, 1)) {
      extents = t1.$index(buildNodes, n).get$extents();
      t3 = extents._min.storage;
      minX0 = t3[0];
      if (minX > minX0)
        minX = minX0;
      minY0 = t3[1];
      if (minY > minY0)
        minY = minY0;
      minZ0 = t3[2];
      if (minZ > minZ0)
        minZ = minZ0;
      t3 = extents._max.storage;
      maxX0 = t3[0];
      if (maxX < maxX0)
        maxX = maxX0;
      maxY0 = t3[1];
      if (maxY < maxY0)
        maxY = maxY0;
      maxZ0 = t3[2];
      if (maxZ < maxZ0)
        maxZ = maxZ0;
    }
    return maxX - minX + (maxY - minY) + (maxZ - minZ);
  },
  get$calculateSAH: function() {
    return new N.BoundClosure$3(this, N.AabbTree.prototype.calculateSAH$3, null, "calculateSAH$3");
  },
  nthElement$5: function(nodes, first, nth, last, getkey) {
    var t1, t2, t3, t4, t5, midValue, lastPos, firstPos, midPos, temp;
    t1 = new N.AabbTree_nthElement_medianFn();
    for (t2 = J.getInterceptor$asx(nodes); t3 = J.getInterceptor$n(last), J.$gt$n(t3.$sub(last, first), 8);) {
      t4 = getkey.call$1(t2.$index(nodes, first));
      t5 = t3.$sub(last, first);
      if (typeof t5 !== "number")
        throw t5.$shr();
      midValue = t1.call$3(t4, getkey.call$1(t2.$index(nodes, J.$add$ns(first, C.JSNumber_methods.$shr(t5, 1)))), getkey.call$1(t2.$index(nodes, t3.$sub(last, 1))));
      for (t3 = J.getInterceptor$n(midValue), lastPos = last, firstPos = first; midPos = null, true; firstPos = t4.$add(firstPos, 1)) {
        for (; J.$lt$n(getkey.call$1(t2.$index(nodes, firstPos)), midValue);)
          firstPos = J.$add$ns(firstPos, 1);
        do
          lastPos = J.$sub$n(lastPos, 1);
        while (t3.$lt(midValue, getkey.call$1(t2.$index(nodes, lastPos))));
        t4 = J.getInterceptor$n(firstPos);
        if (t4.$ge(firstPos, lastPos)) {
          midPos = firstPos;
          break;
        } else {
          temp = t2.$index(nodes, firstPos);
          t2.$indexSet(nodes, firstPos, t2.$index(nodes, lastPos));
          t2.$indexSet(nodes, lastPos, temp);
        }
      }
      if (J.$le$n(midPos, nth))
        first = midPos;
      else
        last = midPos;
    }
    new N.AabbTree_nthElement_insertionSortFn().call$4(nodes, first, last, getkey);
  },
  recursiveBuild$4: function(buildNodes, startIndex, endIndex, lastNodeIndex) {
    var nodes, lastNodeIndex0, buildNode, extents, t1, minX, minY, minZ, maxX, maxY, maxZ, n, minX0, minY0, minZ0, maxX0, maxY0, maxZ0, lastNode, splitPosIndex, node, parentExtents, t2;
    nodes = this.nodes;
    lastNodeIndex0 = lastNodeIndex + 1;
    if (startIndex + this.numNodesLeaf >= endIndex) {
      if (startIndex < 0 || startIndex >= buildNodes.length)
        throw H.ioore(buildNodes, startIndex);
      buildNode = buildNodes[startIndex];
      extents = buildNode.get$extents();
      t1 = extents._min.storage;
      minX = t1[0];
      minY = t1[1];
      minZ = t1[2];
      t1 = extents._max.storage;
      maxX = t1[0];
      maxY = t1[1];
      maxZ = t1[2];
      buildNode.externalNode.aabbTreeIndex = lastNodeIndex0;
      this.replaceNode$3(nodes, lastNodeIndex0, buildNode);
      for (n = startIndex + 1; n < endIndex; ++n) {
        if (n >= buildNodes.length)
          throw H.ioore(buildNodes, n);
        buildNode = buildNodes[n];
        extents = buildNode.get$extents();
        t1 = extents._min.storage;
        minX0 = t1[0];
        if (minX > minX0)
          minX = minX0;
        minY0 = t1[1];
        if (minY > minY0)
          minY = minY0;
        minZ0 = t1[2];
        if (minZ > minZ0)
          minZ = minZ0;
        t1 = extents._max.storage;
        maxX0 = t1[0];
        if (maxX < maxX0)
          maxX = maxX0;
        maxY0 = t1[1];
        if (maxY < maxY0)
          maxY = maxY0;
        maxZ0 = t1[2];
        if (maxZ < maxZ0)
          maxZ = maxZ0;
        ++lastNodeIndex0;
        buildNode.externalNode.aabbTreeIndex = lastNodeIndex0;
        this.replaceNode$3(nodes, lastNodeIndex0, buildNode);
      }
      if (lastNodeIndex0 < 0 || lastNodeIndex0 >= nodes.length)
        throw H.ioore(nodes, lastNodeIndex0);
      lastNode = nodes[lastNodeIndex0];
    } else {
      splitPosIndex = C.JSInt_methods.$shr(startIndex + endIndex, 1);
      if (startIndex + 1 >= splitPosIndex) {
        if (startIndex < 0 || startIndex >= buildNodes.length)
          throw H.ioore(buildNodes, startIndex);
        buildNode = buildNodes[startIndex];
        buildNode.get$externalNode().aabbTreeIndex = lastNodeIndex0;
        this.replaceNode$3(nodes, lastNodeIndex0, buildNode);
      } else
        this.recursiveBuild$4(buildNodes, startIndex, splitPosIndex, lastNodeIndex0);
      if (lastNodeIndex0 < 0 || lastNodeIndex0 >= nodes.length)
        throw H.ioore(nodes, lastNodeIndex0);
      lastNode = nodes[lastNodeIndex0];
      extents = lastNode.get$extents();
      t1 = extents._min.storage;
      minX = t1[0];
      minY = t1[1];
      minZ = t1[2];
      t1 = extents._max.storage;
      maxX = t1[0];
      maxY = t1[1];
      maxZ = t1[2];
      t1 = lastNode.escapeNodeOffset;
      if (typeof t1 !== "number")
        throw H.iae(t1);
      lastNodeIndex0 += t1;
      if (splitPosIndex + 1 >= endIndex) {
        if (splitPosIndex < 0 || splitPosIndex >= buildNodes.length)
          throw H.ioore(buildNodes, splitPosIndex);
        buildNode = buildNodes[splitPosIndex];
        buildNode.get$externalNode().aabbTreeIndex = lastNodeIndex0;
        this.replaceNode$3(nodes, lastNodeIndex0, buildNode);
      } else
        this.recursiveBuild$4(buildNodes, splitPosIndex, endIndex, lastNodeIndex0);
      if (lastNodeIndex0 < 0 || lastNodeIndex0 >= nodes.length)
        throw H.ioore(nodes, lastNodeIndex0);
      lastNode = nodes[lastNodeIndex0];
      extents = lastNode.get$extents();
      t1 = extents._min.storage;
      minX0 = t1[0];
      if (minX > minX0)
        minX = minX0;
      minY0 = t1[1];
      if (minY > minY0)
        minY = minY0;
      minZ0 = t1[2];
      if (minZ > minZ0)
        minZ = minZ0;
      t1 = extents._max.storage;
      maxX0 = t1[0];
      if (maxX < maxX0)
        maxX = maxX0;
      maxY0 = t1[1];
      if (maxY < maxY0)
        maxY = maxY0;
      maxZ0 = t1[2];
      if (maxZ < maxZ0)
        maxZ = maxZ0;
    }
    if (lastNodeIndex < 0 || lastNodeIndex >= nodes.length)
      throw H.ioore(nodes, lastNodeIndex);
    node = nodes[lastNodeIndex];
    if (node != null) {
      t1 = lastNode.get$escapeNodeOffset();
      if (typeof t1 !== "number")
        throw H.iae(t1);
      J.reset$7$x(node, minX, minY, minZ, maxX, maxY, maxZ, lastNodeIndex0 + t1 - lastNodeIndex);
    } else {
      parentExtents = T.Aabb3$();
      t1 = parentExtents._min.storage;
      t1[0] = minX;
      t1[1] = minY;
      t1[2] = minZ;
      t1 = parentExtents._max.storage;
      t1[0] = maxX;
      t1[1] = maxY;
      t1[2] = maxZ;
      t1 = lastNode.get$escapeNodeOffset();
      if (typeof t1 !== "number")
        throw H.iae(t1);
      t2 = new N.AabbTreeNode(null, null, null);
      t2.escapeNodeOffset = lastNodeIndex0 + t1 - lastNodeIndex;
      t2.externalNode = null;
      t2.extents = parentExtents;
      if (lastNodeIndex >= nodes.length)
        throw H.ioore(nodes, lastNodeIndex);
      nodes[lastNodeIndex] = t2;
    }
  },
  replaceNode$3: function(nodes, nodeIndex, newNode) {
    var t1, oldNode;
    t1 = nodes.length;
    if (nodeIndex < 0 || nodeIndex >= t1)
      throw H.ioore(nodes, nodeIndex);
    oldNode = nodes[nodeIndex];
    nodes[nodeIndex] = newNode;
    if (oldNode != null) {
      do {
        ++nodeIndex;
        if (nodeIndex >= t1)
          throw H.ioore(nodes, nodeIndex);
      } while (nodes[nodeIndex] != null);
      nodes[nodeIndex] = oldNode;
    }
  },
  predictNumNodes$3: function(startIndex, endIndex, lastNodeIndex) {
    var splitPosIndex;
    ++lastNodeIndex;
    if (startIndex + this.numNodesLeaf >= endIndex)
      lastNodeIndex += endIndex - startIndex;
    else {
      splitPosIndex = C.JSInt_methods.$shr(startIndex + endIndex, 1);
      lastNodeIndex = startIndex + 1 >= splitPosIndex ? lastNodeIndex + 1 : this.predictNumNodes$3(startIndex, splitPosIndex, lastNodeIndex);
      lastNodeIndex = splitPosIndex + 1 >= endIndex ? lastNodeIndex + 1 : this.predictNumNodes$3(splitPosIndex, endIndex, lastNodeIndex);
    }
    return lastNodeIndex;
  },
  getOverlappingNodes$3: function(queryExtents, overlappingNodes, startIndex) {
    var t1, queryMinX, queryMinY, queryMinZ, queryMaxX, queryMaxY, queryMaxZ, nodes, endNodeIndex, storageIndex, endChildren, numOverlappingNodes, nodeIndex, t2, node, extents, t3, minX, minY, minZ, maxX, maxY, maxZ, storageIndex0, nodeIndex0;
    t1 = this.numExternalNodes;
    if (typeof t1 !== "number")
      throw t1.$gt();
    if (t1 > 0) {
      t1 = queryExtents._min.storage;
      queryMinX = t1[0];
      queryMinY = t1[1];
      queryMinZ = t1[2];
      t1 = queryExtents._max.storage;
      queryMaxX = t1[0];
      queryMaxY = t1[1];
      queryMaxZ = t1[2];
      nodes = this.nodes;
      endNodeIndex = this.endNode;
      for (t1 = J.getInterceptor$asx(overlappingNodes), storageIndex = startIndex, endChildren = null, numOverlappingNodes = 0, nodeIndex = 0; true;) {
        t2 = nodes.length;
        if (nodeIndex < 0 || nodeIndex >= t2)
          throw H.ioore(nodes, nodeIndex);
        node = nodes[nodeIndex];
        extents = node.get$extents();
        t3 = extents._min.storage;
        minX = t3[0];
        minY = t3[1];
        minZ = t3[2];
        t3 = extents._max.storage;
        maxX = t3[0];
        maxY = t3[1];
        maxZ = t3[2];
        if (queryMinX <= maxX && queryMinY <= maxY && queryMinZ <= maxZ && queryMaxX >= minX && queryMaxY >= minY && queryMaxZ >= minZ)
          if (node.externalNode != null) {
            storageIndex0 = storageIndex + 1;
            t1.set$length(overlappingNodes, storageIndex0);
            t2 = node.externalNode;
            if (storageIndex < 0 || storageIndex >= overlappingNodes.length)
              throw H.ioore(overlappingNodes, storageIndex);
            overlappingNodes[storageIndex] = t2;
            ++numOverlappingNodes;
            ++nodeIndex;
            if (typeof endNodeIndex !== "number")
              throw H.iae(endNodeIndex);
            if (nodeIndex >= endNodeIndex)
              break;
            storageIndex = storageIndex0;
          } else {
            t3 = queryMaxX >= maxX && queryMaxY >= maxY && queryMaxZ >= maxZ && queryMinX <= minX && queryMinY <= minY && queryMinZ <= minZ;
            nodeIndex0 = nodeIndex + 1;
            if (t3) {
              t3 = node.escapeNodeOffset;
              if (typeof t3 !== "number")
                throw H.iae(t3);
              endChildren = nodeIndex + t3;
              nodeIndex = nodeIndex0;
              do {
                if (nodeIndex >= t2)
                  throw H.ioore(nodes, nodeIndex);
                node = nodes[nodeIndex];
                if (node.get$externalNode() != null) {
                  t3 = node.externalNode;
                  if (storageIndex < 0 || storageIndex >= overlappingNodes.length)
                    throw H.ioore(overlappingNodes, storageIndex);
                  overlappingNodes[storageIndex] = t3;
                  ++storageIndex;
                  ++numOverlappingNodes;
                }
                ++nodeIndex;
              } while (nodeIndex < endChildren);
              if (typeof endNodeIndex !== "number")
                throw H.iae(endNodeIndex);
              if (nodeIndex >= endNodeIndex)
                break;
            } else
              nodeIndex = nodeIndex0;
          }
        else {
          t2 = node.escapeNodeOffset;
          if (typeof t2 !== "number")
            throw H.iae(t2);
          nodeIndex += t2;
          if (typeof endNodeIndex !== "number")
            throw H.iae(endNodeIndex);
          if (nodeIndex >= endNodeIndex)
            break;
        }
      }
      return numOverlappingNodes;
    } else
      return 0;
  },
  getOverlappingPairs$2: function(overlappingPairs, startIndex) {
    var t1, nodes, endNodeIndex, storageIndex, node, numInsertions, currentNodeIndex, currentNode, currentExternalNode, extents, minX, minY, minZ, maxX, maxY, maxZ, nodeIndex, t2, t3;
    t1 = this.numExternalNodes;
    if (typeof t1 !== "number")
      throw t1.$gt();
    if (t1 > 0) {
      nodes = this.nodes;
      endNodeIndex = this.endNode;
      for (storageIndex = startIndex, node = null, numInsertions = 0, currentNodeIndex = 0; true;) {
        t1 = nodes.length;
        if (currentNodeIndex < 0 || currentNodeIndex >= t1)
          throw H.ioore(nodes, currentNodeIndex);
        currentNode = nodes[currentNodeIndex];
        for (; ++currentNodeIndex, currentNode.get$externalNode() == null;) {
          if (currentNodeIndex >= t1)
            throw H.ioore(nodes, currentNodeIndex);
          currentNode = nodes[currentNodeIndex];
        }
        if (typeof endNodeIndex !== "number")
          throw H.iae(endNodeIndex);
        if (currentNodeIndex < endNodeIndex) {
          currentExternalNode = currentNode.externalNode;
          extents = currentNode.extents;
          t1 = extents._min.storage;
          minX = t1[0];
          minY = t1[1];
          minZ = t1[2];
          t1 = extents._max.storage;
          maxX = t1[0];
          maxY = t1[1];
          maxZ = t1[2];
          for (nodeIndex = currentNodeIndex; true;) {
            if (nodeIndex < 0 || nodeIndex >= nodes.length)
              throw H.ioore(nodes, nodeIndex);
            node = nodes[nodeIndex];
            extents = node.get$extents();
            t1 = extents._max.storage;
            if (minX <= t1[0])
              if (minY <= t1[1])
                if (minZ <= t1[2]) {
                  t1 = extents._min.storage;
                  t1 = maxX >= t1[0] && maxY >= t1[1] && maxZ >= t1[2];
                } else
                  t1 = false;
              else
                t1 = false;
            else
              t1 = false;
            if (t1) {
              ++nodeIndex;
              if (node.externalNode != null) {
                overlappingPairs.push(null);
                overlappingPairs.push(null);
                t1 = overlappingPairs.length;
                if (storageIndex < 0 || storageIndex >= t1)
                  throw H.ioore(overlappingPairs, storageIndex);
                overlappingPairs[storageIndex] = currentExternalNode;
                t2 = storageIndex + 1;
                t3 = node.externalNode;
                if (t2 >= t1)
                  throw H.ioore(overlappingPairs, t2);
                overlappingPairs[t2] = t3;
                storageIndex += 2;
                numInsertions += 2;
                if (nodeIndex >= endNodeIndex)
                  break;
              }
            } else {
              t1 = node.escapeNodeOffset;
              if (typeof t1 !== "number")
                throw H.iae(t1);
              nodeIndex += t1;
              if (nodeIndex >= endNodeIndex)
                break;
            }
          }
        } else
          break;
      }
      return numInsertions;
    } else
      return 0;
  },
  clear$0: function(_) {
    this.nodes = [];
    this.endNode = 0;
    this.needsRebuild = false;
    this.needsRebound = false;
    this.numAdds = 0;
    this.numUpdates = 0;
    this.numExternalNodes = 0;
    this.startUpdate = 2147483647;
    this.endUpdate = -2147483647;
  },
  AabbTree$1: function(highQuality) {
    this.nodes = [];
    this.endNode = 0;
    this.needsRebuild = false;
    this.needsRebound = false;
    this.numAdds = 0;
    this.numUpdates = 0;
    this.numExternalNodes = 0;
    this.startUpdate = 2147483647;
    this.endUpdate = -2147483647;
    this.ignoreY = false;
    this.nodesStack = P.List_List(32, null);
  },
  static: {
"": "AabbTree_version",
AabbTree$: function(highQuality) {
  var t1 = new N.AabbTree(4, [], null, null, null, null, null, null, null, null, highQuality, null, []);
  t1.AabbTree$1(highQuality);
  return t1;
}}

},

AabbTree_sortNodes_sortNodesRecursive: {"": "Closure;box_0,this_1,numNodesLeaf_2",
  call$3: function(nodes, startIndex, endIndex) {
    var t1, t2, t3, t4;
    t1 = J.getInterceptor$ns(startIndex);
    t2 = t1.$add(startIndex, endIndex);
    if (typeof t2 !== "number")
      throw t2.$shr();
    t2 = C.JSNumber_methods.$shr(t2, 1);
    t3 = this.box_0;
    t4 = t3.axis_1;
    if (t4 === 0) {
      t4 = this.this_1;
      if (t3.reverse_0)
        t4.nthElement$5(nodes, startIndex, t2, endIndex, N.getreversekeyXfn$closure);
      else
        t4.nthElement$5(nodes, startIndex, t2, endIndex, N.getkeyXfn$closure);
    } else if (t4 === 2) {
      t4 = this.this_1;
      if (t3.reverse_0)
        t4.nthElement$5(nodes, startIndex, t2, endIndex, N.getreversekeyZfn$closure);
      else
        t4.nthElement$5(nodes, startIndex, t2, endIndex, N.getkeyZfn$closure);
    } else {
      t4 = this.this_1;
      if (t3.reverse_0)
        t4.nthElement$5(nodes, startIndex, t2, endIndex, N.getreversekeyYfn$closure);
      else
        t4.nthElement$5(nodes, startIndex, t2, endIndex, N.getkeyYfn$closure);
    }
    t4 = t3.axis_1;
    if (t4 === 0)
      t3.axis_1 = 2;
    else if (t4 === 2)
      t3.axis_1 = 1;
    else
      t3.axis_1 = 0;
    t3.reverse_0 = !t3.reverse_0;
    t3 = this.numNodesLeaf_2;
    if (J.$lt$n(t1.$add(startIndex, t3), t2))
      this.call$3(nodes, startIndex, t2);
    if (typeof endIndex !== "number")
      throw H.iae(endIndex);
    if (t2 + t3 < endIndex)
      this.call$3(nodes, t2, endIndex);
  }
},

AabbTree_sortNodesNoY_sortNodesNoYRecursive: {"": "Closure;box_0,this_1,numNodesLeaf_2",
  call$3: function(nodes, startIndex, endIndex) {
    var t1, t2, t3, t4;
    t1 = J.getInterceptor$ns(startIndex);
    t2 = t1.$add(startIndex, endIndex);
    if (typeof t2 !== "number")
      throw t2.$shr();
    t2 = C.JSNumber_methods.$shr(t2, 1);
    t3 = this.box_0;
    if (t3.axis_1 === 0) {
      t4 = this.this_1;
      if (t3.reverse_0)
        t4.nthElement$5(nodes, startIndex, t2, endIndex, N.getreversekeyXfn$closure);
      else
        t4.nthElement$5(nodes, startIndex, t2, endIndex, N.getkeyXfn$closure);
    } else {
      t4 = this.this_1;
      if (t3.reverse_0)
        t4.nthElement$5(nodes, startIndex, t2, endIndex, N.getreversekeyZfn$closure);
      else
        t4.nthElement$5(nodes, startIndex, t2, endIndex, N.getkeyZfn$closure);
    }
    if (t3.axis_1 === 0)
      t3.axis_1 = 2;
    else
      t3.axis_1 = 0;
    t3.reverse_0 = !t3.reverse_0;
    t3 = this.numNodesLeaf_2;
    if (J.$lt$n(t1.$add(startIndex, t3), t2))
      this.call$3(nodes, startIndex, t2);
    if (typeof endIndex !== "number")
      throw H.iae(endIndex);
    if (t2 + t3 < endIndex)
      this.call$3(nodes, t2, endIndex);
  }
},

AabbTree_sortNodesHighQuality_sortNodesHighQualityRecursive: {"": "Closure;box_0,this_1,numNodesLeaf_2,calculateSAH_3",
  call$3: function(nodes, startIndex, endIndex) {
    var t1, t2, t3, t4, sahX, sahY, sahZ, sahXZ, sahZX;
    t1 = J.getInterceptor$ns(startIndex);
    t2 = t1.$add(startIndex, endIndex);
    if (typeof t2 !== "number")
      throw t2.$shr();
    t2 = C.JSNumber_methods.$shr(t2, 1);
    t3 = this.this_1;
    t3.nthElement$5(nodes, startIndex, t2, endIndex, N.getkeyXfn$closure);
    t4 = this.calculateSAH_3;
    sahX = J.$add$ns(t4.call$3(nodes, startIndex, t2), t4.call$3(nodes, t2, endIndex));
    t3.nthElement$5(nodes, startIndex, t2, endIndex, N.getkeyYfn$closure);
    sahY = J.$add$ns(t4.call$3(nodes, startIndex, t2), t4.call$3(nodes, t2, endIndex));
    t3.nthElement$5(nodes, startIndex, t2, endIndex, N.getkeyZfn$closure);
    sahZ = J.$add$ns(t4.call$3(nodes, startIndex, t2), t4.call$3(nodes, t2, endIndex));
    t3.nthElement$5(nodes, startIndex, t2, endIndex, N.getkeyXZfn$closure);
    sahXZ = J.$add$ns(t4.call$3(nodes, startIndex, t2), t4.call$3(nodes, t2, endIndex));
    t3.nthElement$5(nodes, startIndex, t2, endIndex, N.getkeyZXfn$closure);
    sahZX = J.$add$ns(t4.call$3(nodes, startIndex, t2), t4.call$3(nodes, t2, endIndex));
    t4 = J.getInterceptor$n(sahX);
    if (t4.$le(sahX, sahY) && t4.$le(sahX, sahZ) && t4.$le(sahX, sahXZ) && t4.$le(sahX, sahZX))
      if (this.box_0.reverse_0)
        t3.nthElement$5(nodes, startIndex, t2, endIndex, N.getreversekeyXfn$closure);
      else
        t3.nthElement$5(nodes, startIndex, t2, endIndex, N.getkeyXfn$closure);
    else {
      t4 = J.getInterceptor$n(sahZ);
      if (t4.$le(sahZ, sahY) && t4.$le(sahZ, sahXZ) && t4.$le(sahZ, sahZX))
        if (this.box_0.reverse_0)
          t3.nthElement$5(nodes, startIndex, t2, endIndex, N.getreversekeyZfn$closure);
        else
          t3.nthElement$5(nodes, startIndex, t2, endIndex, N.getkeyZfn$closure);
      else {
        t4 = J.getInterceptor$n(sahY);
        if (t4.$le(sahY, sahXZ) && t4.$le(sahY, sahZX))
          if (this.box_0.reverse_0)
            t3.nthElement$5(nodes, startIndex, t2, endIndex, N.getreversekeyYfn$closure);
          else
            t3.nthElement$5(nodes, startIndex, t2, endIndex, N.getkeyYfn$closure);
        else if (J.$le$n(sahXZ, sahZX))
          if (this.box_0.reverse_0)
            t3.nthElement$5(nodes, startIndex, t2, endIndex, N.getreversekeyXZfn$closure);
          else
            t3.nthElement$5(nodes, startIndex, t2, endIndex, N.getkeyXZfn$closure);
        else if (this.box_0.reverse_0)
          t3.nthElement$5(nodes, startIndex, t2, endIndex, N.getreversekeyZXfn$closure);
        else
          t3.nthElement$5(nodes, startIndex, t2, endIndex, N.getkeyZXfn$closure);
      }
    }
    t3 = this.box_0;
    t3.reverse_0 = !t3.reverse_0;
    t3 = this.numNodesLeaf_2;
    if (J.$lt$n(t1.$add(startIndex, t3), t2))
      this.call$3(nodes, startIndex, t2);
    if (typeof endIndex !== "number")
      throw H.iae(endIndex);
    if (t2 + t3 < endIndex)
      this.call$3(nodes, t2, endIndex);
  }
},

AabbTree_nthElement_medianFn: {"": "Closure;",
  call$3: function(a, b, c) {
    var t1 = J.getInterceptor$n(a);
    if (t1.$lt(a, b))
      if (J.$lt$n(b, c))
        return b;
      else if (t1.$lt(a, c))
        return c;
      else
        return a;
    else if (t1.$lt(a, c))
      return a;
    else if (J.$lt$n(b, c))
      return c;
    return b;
  }
},

AabbTree_nthElement_insertionSortFn: {"": "Closure;",
  call$4: function(nodes, first, last, getkey) {
    var sorted, t1, t2, tempNode, tempKey, current, t3, next, t4;
    sorted = J.$add$ns(first, 1);
    for (t1 = J.getInterceptor$asx(nodes); t2 = J.getInterceptor(sorted), !t2.$eq(sorted, last);) {
      tempNode = t1.$index(nodes, sorted);
      tempKey = getkey.call$1(tempNode);
      current = t2.$sub(sorted, 1);
      t3 = J.getInterceptor$n(tempKey);
      next = sorted;
      while (true) {
        t4 = J.getInterceptor(next);
        if (!(!t4.$eq(next, first) && t3.$lt(tempKey, getkey.call$1(t1.$index(nodes, current)))))
          break;
        t1.$indexSet(nodes, next, t1.$index(nodes, current));
        next = t4.$sub(next, 1);
        current = J.$sub$n(current, 1);
      }
      if (!t4.$eq(next, sorted))
        t1.$indexSet(nodes, next, tempNode);
      sorted = t2.$add(sorted, 1);
    }
  }
},

WebGLPhysicsIsland: {"": "Object;_bodies,_constraints,_wakeTimeStamp,_active", static: {
"": "WebGLPhysicsIsland_version,WebGLPhysicsIsland_islandPool",
WebGLPhysicsIsland_allocate: function() {
  var island, t1;
  if ($.get$WebGLPhysicsIsland_islandPool().length === 0) {
    island = new N.WebGLPhysicsIsland(null, null, null, null);
    t1 = [];
    t1.$builtinTypeInfo = [N.WebGLPhysicsPrivateBody];
    island._bodies = t1;
    t1 = [];
    t1.$builtinTypeInfo = [N.WebGLPhysicsPrivateBody];
    island._constraints = t1;
    island._wakeTimeStamp = 0;
    island._active = false;
  } else {
    t1 = $.get$WebGLPhysicsIsland_islandPool();
    if (0 >= t1.length)
      throw H.ioore(t1, 0);
    island = t1.pop();
  }
  return island;
}}
},

WebGLPhysicsTOIEvent: {"": "Object;objectA,objectB,shapeA,shapeB,closestA,closestB,axis,distance,toi,frozenA,frozenB,concave",
  WebGLPhysicsTOIEvent$0: function() {
    this.objectA = null;
    this.objectB = null;
    this.shapeA = null;
    this.shapeB = null;
    var t1 = new Float32Array(3);
    t1.$dartCachedLength = t1.length;
    this.closestA = new T.Vector3(t1);
    t1 = new Float32Array(3);
    t1.$dartCachedLength = t1.length;
    this.closestB = new T.Vector3(t1);
    t1 = new Float32Array(3);
    t1.$dartCachedLength = t1.length;
    this.axis = new T.Vector3(t1);
    this.distance = 0;
    this.toi = 0;
    this.frozenA = false;
    this.frozenB = false;
    this.concave = false;
  },
  static: {
"": "WebGLPhysicsTOIEvent_version,WebGLPhysicsTOIEvent_eventPool",
WebGLPhysicsTOIEvent$: function() {
  var t1 = new N.WebGLPhysicsTOIEvent(null, null, null, null, null, null, null, null, null, null, null, null);
  t1.WebGLPhysicsTOIEvent$0();
  return t1;
},

WebGLPhysicsTOIEvent_deallocate: function(toi) {
  var t1;
  $.get$WebGLPhysicsTOIEvent_eventPool().push(toi);
  if (toi.concave === true) {
    t1 = H.interceptedTypeCast(toi.shapeB, "$isWebGLPhysicsTriangleShape");
    $.get$WebGLPhysicsTriangleShape_trianglePool().push(t1);
    t1.triangleArray = null;
    toi.concave = false;
  }
  toi.objectA = null;
  toi.objectB = null;
  toi.shapeA = null;
  toi.shapeB = null;
}}

},

WebGLPhysicsPrivateBody: {"": "Object;_arbiters<,_island<,_islandRoot<,_islandRank<",
  _computeDeltaVelocity$4: function(timeStep, from, to, inputVelocity) {
    var t1, from0, from1, from2, from3, from4, from5, from6, from7, from8, from9, from10, from11, to0, to1, to2, to3, to4, to5, to6, to7, to8, to9, to10, velocityX, velocityY, velocityZ, active, m0, m1, m2, m3, m4, m5, m6, m7, m8, trace, w, t2, x, y, z, s, angle, sin_sqrd, scale;
    t1 = from.storage;
    from0 = t1[0];
    from1 = t1[1];
    from2 = t1[2];
    from3 = t1[3];
    from4 = t1[4];
    from5 = t1[5];
    from6 = t1[6];
    from7 = t1[7];
    from8 = t1[8];
    from9 = t1[9];
    from10 = t1[10];
    from11 = t1[11];
    t1 = to.storage;
    to0 = t1[0];
    to1 = t1[1];
    to2 = t1[2];
    to3 = t1[3];
    to4 = t1[4];
    to5 = t1[5];
    to6 = t1[6];
    to7 = t1[7];
    to8 = t1[8];
    to9 = t1[9];
    to10 = t1[10];
    velocityX = to9 - from9;
    velocityY = to10 - from10;
    velocityZ = t1[11] - from11;
    active = (velocityX !== 0 || velocityY !== 0 || velocityZ !== 0) && true;
    if (typeof timeStep !== "number")
      throw H.iae(timeStep);
    t1 = inputVelocity.storage;
    t1[0] = velocityX / timeStep;
    t1[1] = velocityY / timeStep;
    t1[2] = velocityZ / timeStep;
    m0 = from0 * to0 + from3 * to3 + from6 * to6;
    m1 = from0 * to1 + from3 * to4 + from6 * to7;
    m2 = from0 * to2 + from3 * to5 + from6 * to8;
    m3 = from1 * to0 + from4 * to3 + from7 * to6;
    m4 = from1 * to1 + from4 * to4 + from7 * to7;
    m5 = from1 * to2 + from4 * to5 + from7 * to8;
    m6 = from2 * to0 + from5 * to3 + from8 * to6;
    m7 = from2 * to1 + from5 * to4 + from8 * to7;
    m8 = from2 * to2 + from5 * to5 + from8 * to8;
    trace = m0 + m4 + m8 + 1;
    if (trace > 0.000001) {
      w = Math.sqrt(trace) / 2;
      t2 = 4 * w;
      x = (m5 - m7) / t2;
      y = (m6 - m2) / t2;
      z = (m1 - m3) / t2;
    } else if (m0 > m4 && m0 > m8) {
      s = Math.sqrt(1 + m0 - m4 - m8) * 2;
      w = (m5 - m7) / s;
      x = 0.25 * s;
      y = (m3 + m1) / s;
      z = (m6 + m2) / s;
    } else if (m4 > m8) {
      s = Math.sqrt(1 + m4 - m0 - m8) * 2;
      w = (m6 - m2) / s;
      x = (m3 + m1) / s;
      y = 0.25 * s;
      z = (m7 + m5) / s;
    } else {
      s = Math.sqrt(1 + m8 - m0 - m4) * 2;
      w = (m1 - m3) / s;
      x = (m6 + m2) / s;
      y = (m7 + m5) / s;
      z = 0.25 * s;
    }
    angle = Math.acos(w) * 2;
    sin_sqrd = 1 - w * w;
    if (sin_sqrd < 0.000001 || angle === 0) {
      t1[5] = 0;
      t1[4] = 0;
      t1[3] = 0;
    } else {
      scale = angle / (timeStep * Math.sqrt(sin_sqrd));
      t1[3] = x * scale;
      t1[4] = y * scale;
      t1[5] = z * scale;
      active = true;
    }
    return active;
  },
  _calculateSweptExtents$1: function(extents) {
    var radius, t1, x0, x1, x2, y0, y1, y2, t0;
    radius = this._shape._radius;
    t1 = this._startTransform.storage;
    x0 = t1[9];
    x1 = t1[10];
    x2 = t1[11];
    t1 = this._transform.storage;
    y0 = t1[9];
    y1 = t1[10];
    y2 = t1[11];
    if (x0 > y0) {
      t0 = y0;
      y0 = x0;
      x0 = t0;
    }
    if (x1 > y1) {
      t0 = y1;
      y1 = x1;
      x1 = t0;
    }
    if (x2 > y2) {
      t0 = y2;
      y2 = x2;
      x2 = t0;
    }
    t1 = extents._min.storage;
    if (typeof radius !== "number")
      throw H.iae(radius);
    t1[0] = x0 - radius;
    t1[1] = x1 - radius;
    t1[2] = x2 - radius;
    t1 = extents._max.storage;
    t1[0] = y0 + radius;
    t1[1] = y1 + radius;
    t1[2] = y2 + radius;
  },
  _calculateExtents$1: function(extents) {
    var halfExtents, h0, h1, h2, transform, m0, m1, m2, m3, m4, m5, m6, m7, m8, ct0, ct1, ct2, t1, t2, t3, ht0, ht1, ht2;
    halfExtents = this._shape._halfExtents.storage;
    h0 = halfExtents[0];
    h1 = halfExtents[1];
    h2 = halfExtents[2];
    transform = this._transform.storage;
    m0 = transform[0];
    m1 = transform[1];
    m2 = transform[2];
    m3 = transform[3];
    m4 = transform[4];
    m5 = transform[5];
    m6 = transform[6];
    m7 = transform[7];
    m8 = transform[8];
    ct0 = transform[9];
    ct1 = transform[10];
    ct2 = transform[11];
    if (m0 < 0)
      t1 = -m0 * h0;
    else
      t1 = m0 > 0 ? m0 * h0 : 0;
    if (m3 < 0)
      t2 = -m3 * h1;
    else
      t2 = m3 > 0 ? m3 * h1 : 0;
    if (m6 < 0)
      t3 = -m6 * h2;
    else
      t3 = m6 > 0 ? m6 * h2 : 0;
    ht0 = t1 + t2 + t3;
    if (m1 < 0)
      t1 = -m1 * h0;
    else
      t1 = m1 > 0 ? m1 * h0 : 0;
    if (m4 < 0)
      t2 = -m4 * h1;
    else
      t2 = m4 > 0 ? m4 * h1 : 0;
    if (m7 < 0)
      t3 = -m7 * h2;
    else
      t3 = m7 > 0 ? m7 * h2 : 0;
    ht1 = t1 + t2 + t3;
    if (m2 < 0)
      t1 = -m2 * h0;
    else
      t1 = m2 > 0 ? m2 * h0 : 0;
    if (m5 < 0)
      t2 = -m5 * h1;
    else
      t2 = m5 > 0 ? m5 * h1 : 0;
    if (m8 < 0)
      t3 = -m8 * h2;
    else
      t3 = m8 > 0 ? m8 * h2 : 0;
    ht2 = t1 + t2 + t3;
    t3 = extents._min.storage;
    t3[0] = ct0 - ht0;
    t3[1] = ct1 - ht1;
    t3[2] = ct2 - ht2;
    t3 = extents._max.storage;
    t3[0] = ct0 + ht0;
    t3[1] = ct1 + ht1;
    t3[2] = ct2 + ht2;
  },
  _integratePositionWithVelocities$4: function(transform, outTransform, timeStep, offset) {
    var t1, t2, t3, t4, t5, t6, w0, w1, w2, A0, A1, A2, A3, A4, A5, A6, A7, A8, B0, B1, B2, B3, B4, B5, B6, B7, B8, scale;
    t1 = outTransform.storage;
    t2 = transform.storage;
    t3 = t2[9];
    t4 = this._velocity.storage;
    if (offset < 0 || offset >= 12)
      throw H.ioore(t4, offset);
    t5 = J.getInterceptor$n(timeStep);
    t6 = t5.$mul(timeStep, t4[offset]);
    if (typeof t6 !== "number")
      throw H.iae(t6);
    t1[9] = t3 + t6;
    t6 = t2[10];
    t3 = offset + 1;
    if (t3 >= 12)
      throw H.ioore(t4, t3);
    t3 = t5.$mul(timeStep, t4[t3]);
    if (typeof t3 !== "number")
      throw H.iae(t3);
    t1[10] = t6 + t3;
    t3 = t2[11];
    t6 = offset + 2;
    if (t6 >= 12)
      throw H.ioore(t4, t6);
    t6 = t5.$mul(timeStep, t4[t6]);
    if (typeof t6 !== "number")
      throw H.iae(t6);
    t1[11] = t3 + t6;
    t6 = offset + 3;
    if (t6 >= 12)
      throw H.ioore(t4, t6);
    t6 = t4[t6];
    if (typeof timeStep !== "number")
      throw H.iae(timeStep);
    w0 = t6 * timeStep;
    t6 = offset + 4;
    if (t6 >= 12)
      throw H.ioore(t4, t6);
    w1 = t4[t6] * timeStep;
    t6 = offset + 5;
    if (t6 >= 12)
      throw H.ioore(t4, t6);
    w2 = t4[t6] * timeStep;
    A0 = t2[0];
    A1 = t2[1];
    A2 = t2[2];
    A3 = t2[3];
    A4 = t2[4];
    A5 = t2[5];
    A6 = t2[6];
    A7 = t2[7];
    A8 = t2[8];
    B0 = A0 - w2 * A1 + w1 * A2;
    B1 = A1 + w2 * A0 - w0 * A2;
    B2 = A2 - w1 * A0 + w0 * A1;
    B3 = A3 - w2 * A4 + w1 * A5;
    B4 = A4 + w2 * A3 - w0 * A5;
    B5 = A5 - w1 * A3 + w0 * A4;
    B6 = A6 - w2 * A7 + w1 * A8;
    B7 = A7 + w2 * A6 - w0 * A8;
    B8 = A8 - w1 * A6 + w0 * A7;
    scale = 1 / Math.sqrt(B0 * B0 + B1 * B1 + B2 * B2);
    B0 *= scale;
    B1 *= scale;
    B2 *= scale;
    scale = -(B0 * B3 + B1 * B4 + B2 * B5);
    B3 += B0 * scale;
    B4 += B1 * scale;
    B5 += B2 * scale;
    scale = 1 / Math.sqrt(B3 * B3 + B4 * B4 + B5 * B5);
    B3 *= scale;
    B4 *= scale;
    B5 *= scale;
    scale = -(B0 * B6 + B1 * B7 + B2 * B8);
    B6 += B0 * scale;
    B7 += B1 * scale;
    B8 += B2 * scale;
    scale = -(B3 * B6 + B4 * B7 + B5 * B8);
    B6 += B3 * scale;
    B7 += B4 * scale;
    B8 += B5 * scale;
    scale = 1 / Math.sqrt(B6 * B6 + B7 * B7 + B8 * B8);
    t1[0] = B0;
    t1[1] = B1;
    t1[2] = B2;
    t1[3] = B3;
    t1[4] = B4;
    t1[5] = B5;
    t1[6] = B6 * scale;
    t1[7] = B7 * scale;
    t1[8] = B8 * scale;
  },
  _applyBiasVelocities$1: function(timeStep) {
    var t1;
    this._integratePositionWithVelocities$4(this._transform, this._startTransform, timeStep, 6);
    t1 = this._velocity.storage;
    t1[8] = 0;
    t1[7] = 0;
    t1[6] = 0;
    t1[11] = 0;
    t1[10] = 0;
    t1[9] = 0;
  },
  calculateTransform$2: function(transform, origin) {
    this._transform.copyInto$1(transform);
  },
  calculateTransform$1: function(transform) {
    return this.calculateTransform$2(transform, null);
  },
  _refreshInertiaTensor$0: function() {
    var $A, inertia, i0, i1, i2, A0, A1, A2, A3, A4, A5, A6, A7, A8, I;
    $A = this._transform.storage;
    inertia = this._inverseInertiaLocal.storage;
    i0 = inertia[0];
    i1 = inertia[1];
    i2 = inertia[2];
    A0 = $A[0];
    A1 = $A[1];
    A2 = $A[2];
    A3 = $A[3];
    A4 = $A[4];
    A5 = $A[5];
    A6 = $A[6];
    A7 = $A[7];
    A8 = $A[8];
    I = this._inverseInertia.storage;
    I[0] = A0 * A0 * i0 + A3 * A3 * i1 + A6 * A6 * i2;
    I[1] = A0 * A1 * i0 + A3 * A4 * i1 + A6 * A7 * i2;
    I[2] = A0 * A2 * i0 + A3 * A5 * i1 + A6 * A8 * i2;
    I[3] = A1 * A0 * i0 + A4 * A3 * i1 + A7 * A6 * i2;
    I[4] = A1 * A1 * i0 + A4 * A4 * i1 + A7 * A7 * i2;
    I[5] = A1 * A2 * i0 + A4 * A5 * i1 + A7 * A8 * i2;
    I[6] = A2 * A0 * i0 + A5 * A3 * i1 + A8 * A6 * i2;
    I[7] = A2 * A1 * i0 + A5 * A4 * i1 + A8 * A7 * i2;
    I[8] = A2 * A2 * i0 + A5 * A5 * i1 + A8 * A8 * i2;
  },
  _integrateVelocity$2: function(gravity, timeStep) {
    var linDrag, t1, t2, t3, t4, t5, angDrag, w0, w1, w2, max_angular, wlsq, scale;
    linDrag = P.pow$closure.call$2(1 - this._linearDamping, timeStep);
    t1 = this._velocity.storage;
    t2 = t1[0];
    t3 = gravity.storage;
    t4 = J.getInterceptor$n(timeStep);
    t5 = t4.$mul(timeStep, t3[0]);
    if (typeof t5 !== "number")
      throw H.iae(t5);
    if (typeof linDrag !== "number")
      throw H.iae(linDrag);
    t1[0] = (t2 + t5) * linDrag;
    t5 = t1[1];
    t2 = t4.$mul(timeStep, t3[1]);
    if (typeof t2 !== "number")
      throw H.iae(t2);
    t1[1] = (t5 + t2) * linDrag;
    t2 = t1[2];
    t3 = t4.$mul(timeStep, t3[2]);
    if (typeof t3 !== "number")
      throw H.iae(t3);
    t1[2] = (t2 + t3) * linDrag;
    angDrag = P.pow$closure.call$2(1 - this._angularDamping, timeStep);
    t3 = t1[3];
    if (typeof angDrag !== "number")
      throw H.iae(angDrag);
    w0 = t3 * angDrag;
    w1 = t1[4] * angDrag;
    w2 = t1[5] * angDrag;
    if (typeof timeStep !== "number")
      throw H.iae(timeStep);
    max_angular = 3.141592653589793 / timeStep;
    wlsq = w0 * w0 + w1 * w1 + w2 * w2;
    if (wlsq > max_angular * max_angular) {
      scale = max_angular / Math.sqrt(wlsq);
      w0 *= scale;
      w1 *= scale;
      w2 *= scale;
    }
    t1[3] = w0;
    t1[4] = w1;
    t1[5] = w2;
  },
  _isActiveVelocity$2: function(linear, angular) {
    var r, t1, v0, v1, v2;
    r = this._shape._radius;
    t1 = this._velocity.storage;
    v0 = t1[0];
    v1 = t1[1];
    v2 = t1[2];
    if (typeof r !== "number")
      throw H.iae(r);
    if (v0 * v0 + v1 * v1 + v2 * v2 > linear * r * r)
      return true;
    v0 = t1[3];
    v1 = t1[4];
    v2 = t1[5];
    if (v0 * v0 + v1 * v1 + v2 * v2 > angular)
      return true;
    return false;
  },
  isActive$0: function(_) {
    var t1, t2, t3;
    if (this._permitSleep !== true)
      return true;
    if (this._isActiveVelocity$2(0.01, 0.1)) {
      this._wakeTimeStamp = this._world._timeStamp;
      return true;
    }
    t1 = this._wakeTimeStamp;
    t2 = $.WebGLPhysicsConfig_SLEEP_DELAY;
    if (typeof t1 !== "number")
      throw t1.$add();
    t3 = this._world._timeStamp;
    if (typeof t3 !== "number")
      throw H.iae(t3);
    return t1 + t2 > t3;
  },
  WebGLPhysicsPrivateBody$8: function(_shape, transform, linearVelocity, angularVelocity, _friction, _restitution, _linearDamping, _angularDamping) {
    var t1 = $.WebGLPhysicsPrivateBody_uniqueId;
    this._id = t1;
    $.WebGLPhysicsPrivateBody_uniqueId = t1 + 1;
    if (transform != null)
      transform.copyInto$1(this._transform);
    this._islandRoot = this;
  }
},

WebGLPhysicsBoxShape: {"": "WebGLPhysicsShape;_margin,_radius,_collisionRadius,_halfExtents,_inertia,_center",
  localSupportWithoutMargin$2: function(vec, dst) {
    var t1, v0, v1, v2, h0, h1, h2;
    t1 = vec.storage;
    v0 = t1[0];
    v1 = t1[1];
    v2 = t1[2];
    t1 = this._halfExtents.storage;
    h0 = t1[0];
    h1 = t1[1];
    h2 = t1[2];
    t1 = dst.storage;
    t1[0] = v0 < 0 ? -h0 : h0;
    t1[1] = v1 < 0 ? -h1 : h1;
    t1[2] = v2 < 0 ? -h2 : h2;
  },
  WebGLPhysicsBoxShape$2$margin: function(halfExtents, margin) {
    var t1, h0, h1, h2, lx, ly, lz;
    this._margin = margin;
    t1 = halfExtents.storage;
    h0 = t1[0] + margin;
    h1 = t1[1] + margin;
    h2 = t1[2] + margin;
    lx = 2 * h0;
    ly = 2 * h1;
    lz = 2 * h2;
    lx *= lx;
    ly *= ly;
    lz *= lz;
    this._center = null;
    this._radius = Math.sqrt(h0 * h0 + h1 * h1 + h2 * h2);
    t1 = new Float32Array(3);
    t1.$dartCachedLength = t1.length;
    t1 = new T.Vector3(t1);
    t1.setValues$3(h0, h1, h2);
    this._halfExtents = t1;
    t1 = new Float32Array(3);
    t1.$dartCachedLength = t1.length;
    t1 = new T.Vector3(t1);
    t1.setValues$3(0.08333333333333333 * (ly + lz), 0.08333333333333333 * (lx + lz), 0.08333333333333333 * (lx + ly));
    this._inertia = t1;
    this._collisionRadius = margin;
  },
  static: {
WebGLPhysicsBoxShape$: function(halfExtents, margin) {
  var t1 = new N.WebGLPhysicsBoxShape(null, null, null, null, null, null);
  t1.WebGLPhysicsBoxShape$2$margin(halfExtents, margin);
  return t1;
}}

},

WebGLPhysicsPlaneShape: {"": "WebGLPhysicsShape;distance,normal<,_margin,_radius,_collisionRadius,_halfExtents,_inertia,_center",
  WebGLPhysicsPlaneShape$3$distance$margin$normal: function(distance, margin, normal) {
    var t1, t2;
    this._collisionRadius = margin;
    this.distance = distance;
    t1 = new Float32Array(3);
    t1.$dartCachedLength = t1.length;
    t1 = new T.Vector3(t1);
    t1.setFrom$1(normal);
    this.normal = t1;
    this._radius = 179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368;
    t1 = normal.storage;
    if (Math.abs(t1[0]) === 1) {
      t1 = Math.abs(distance);
      t2 = new Float32Array(3);
      t2.$dartCachedLength = t2.length;
      t2 = new T.Vector3(t2);
      t2.setValues$3(t1, 179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368, 179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368);
      this._halfExtents = t2;
    } else if (Math.abs(t1[1]) === 1) {
      t1 = Math.abs(distance);
      t2 = new Float32Array(3);
      t2.$dartCachedLength = t2.length;
      t2 = new T.Vector3(t2);
      t2.setValues$3(179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368, t1, 179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368);
      this._halfExtents = t2;
    } else if (Math.abs(t1[2]) === 1) {
      t1 = Math.abs(distance);
      t2 = new Float32Array(3);
      t2.$dartCachedLength = t2.length;
      t2 = new T.Vector3(t2);
      t2.setValues$3(179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368, 179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368, t1);
      this._halfExtents = t2;
    }
    this._center = null;
    t1 = new Float32Array(3);
    t1.$dartCachedLength = t1.length;
    this._inertia = new T.Vector3(t1);
  },
  $isWebGLPhysicsPlaneShape: true,
  static: {
"": "WebGLPhysicsPlaneShape_version",
WebGLPhysicsPlaneShape$: function(distance, margin, normal) {
  var t1 = new N.WebGLPhysicsPlaneShape(null, null, null, null, null, null, null, null);
  t1.WebGLPhysicsPlaneShape$3$distance$margin$normal(distance, margin, normal);
  return t1;
}}

},

WebGLPhysicsShape: {"": "Object;_collisionRadius<",
  localSupportWithoutMargin$2: function(vec, dst) {
  }
},

WebGLPhysicsTriangleShape: {"": "Object;index>,collisionRadius,triangleArray",
  localSupportWithoutMargin$2: function(vec, dst) {
    var t1, vec0, vec1, vec2, triangles, triangle, v00, v01, v02, u0, u1, u2, v0, v1, v2, dotu, dotv;
    t1 = vec.storage;
    vec0 = t1[0];
    vec1 = t1[1];
    vec2 = t1[2];
    triangles = this.triangleArray.get$triangles();
    triangle = this.index;
    if (typeof triangle !== "number")
      throw triangle.$add();
    v00 = triangles.$index(triangles, triangle + 3);
    v01 = triangles.$index(triangles, triangle + 4);
    v02 = triangles.$index(triangles, triangle + 5);
    u0 = triangles.$index(triangles, triangle + 6);
    u1 = triangles.$index(triangles, triangle + 7);
    u2 = triangles.$index(triangles, triangle + 8);
    v0 = triangles.$index(triangles, triangle + 9);
    v1 = triangles.$index(triangles, triangle + 10);
    v2 = triangles.$index(triangles, triangle + 11);
    dotu = C.JSNumber_methods.$mul(vec0, u0) + C.JSNumber_methods.$mul(vec1, u1) + C.JSNumber_methods.$mul(vec2, u2);
    dotv = C.JSNumber_methods.$mul(vec0, v0) + C.JSNumber_methods.$mul(vec1, v1) + C.JSNumber_methods.$mul(vec2, v2);
    if (dotu <= 0 && dotv <= 0) {
      t1 = dst.storage;
      t1[0] = v00;
      t1[1] = v01;
      t1[2] = v02;
    } else {
      t1 = dst.storage;
      if (dotu >= dotv) {
        t1[0] = v00.$add(v00, u0);
        t1[1] = v01.$add(v01, u1);
        t1[2] = v02.$add(v02, u2);
      } else {
        t1[0] = v00.$add(v00, v0);
        t1[1] = v01.$add(v01, v1);
        t1[2] = v02.$add(v02, v2);
      }
    }
  },
  $isWebGLPhysicsTriangleShape: true,
  static: {
"": "WebGLPhysicsTriangleShape_version,WebGLPhysicsTriangleShape_trianglePool",
WebGLPhysicsTriangleShape_allocate: function() {
  var triangle, t1;
  if ($.get$WebGLPhysicsTriangleShape_trianglePool().length === 0) {
    triangle = new N.WebGLPhysicsTriangleShape(null, null, null);
    triangle.index = 0;
    triangle.collisionRadius = 0;
    triangle.triangleArray = null;
  } else {
    t1 = $.get$WebGLPhysicsTriangleShape_trianglePool();
    if (0 >= t1.length)
      throw H.ioore(t1, 0);
    triangle = t1.pop();
  }
  return triangle;
}}

},

WebGLGJKContactSolver: {"": "Object;simplex,numVertices,closest,cachedCoords,tempCoords",
  removeVertex$1: function(index) {
    var simplex, replace, withv, t1, t2;
    this.numVertices = this.numVertices - 1;
    simplex = this.simplex;
    replace = index * 9;
    withv = this.numVertices * 9;
    if (withv < 0 || withv >= 36)
      throw H.ioore(simplex, withv);
    t1 = simplex[withv];
    if (replace < 0 || replace >= 36)
      throw H.ioore(simplex, replace);
    simplex[replace] = t1;
    t1 = replace + 1;
    t2 = withv + 1;
    if (t2 >= 36)
      throw H.ioore(simplex, t2);
    t2 = simplex[t2];
    if (t1 >= 36)
      throw H.ioore(simplex, t1);
    simplex[t1] = t2;
    t2 = replace + 2;
    t1 = withv + 2;
    if (t1 >= 36)
      throw H.ioore(simplex, t1);
    t1 = simplex[t1];
    if (t2 >= 36)
      throw H.ioore(simplex, t2);
    simplex[t2] = t1;
    t1 = replace + 3;
    t2 = withv + 3;
    if (t2 >= 36)
      throw H.ioore(simplex, t2);
    t2 = simplex[t2];
    if (t1 >= 36)
      throw H.ioore(simplex, t1);
    simplex[t1] = t2;
    t2 = replace + 4;
    t1 = withv + 4;
    if (t1 >= 36)
      throw H.ioore(simplex, t1);
    t1 = simplex[t1];
    if (t2 >= 36)
      throw H.ioore(simplex, t2);
    simplex[t2] = t1;
    t1 = replace + 5;
    t2 = withv + 5;
    if (t2 >= 36)
      throw H.ioore(simplex, t2);
    t2 = simplex[t2];
    if (t1 >= 36)
      throw H.ioore(simplex, t1);
    simplex[t1] = t2;
    t2 = replace + 6;
    t1 = withv + 6;
    if (t1 >= 36)
      throw H.ioore(simplex, t1);
    t1 = simplex[t1];
    if (t2 >= 36)
      throw H.ioore(simplex, t2);
    simplex[t2] = t1;
    t1 = replace + 7;
    t2 = withv + 7;
    if (t2 >= 36)
      throw H.ioore(simplex, t2);
    t2 = simplex[t2];
    if (t1 >= 36)
      throw H.ioore(simplex, t1);
    simplex[t1] = t2;
    t2 = replace + 8;
    t1 = withv + 8;
    if (t1 >= 36)
      throw H.ioore(simplex, t1);
    t1 = simplex[t1];
    if (t2 >= 36)
      throw H.ioore(simplex, t2);
    simplex[t2] = t1;
  },
  reduceVertices$1: function(coords) {
    var t1, simplex, withv;
    t1 = this.numVertices;
    if (t1 >= 4 && coords[3] === 0)
      this.numVertices = t1 - 1;
    simplex = this.simplex;
    t1 = this.numVertices;
    if (t1 >= 3 && coords[2] === 0) {
      this.numVertices = t1 - 1;
      withv = this.numVertices * 9;
      if (withv < 0 || withv >= 36)
        throw H.ioore(simplex, withv);
      simplex[18] = simplex[withv];
      t1 = withv + 1;
      if (t1 >= 36)
        throw H.ioore(simplex, t1);
      simplex[19] = simplex[t1];
      t1 = withv + 2;
      if (t1 >= 36)
        throw H.ioore(simplex, t1);
      simplex[20] = simplex[t1];
      t1 = withv + 3;
      if (t1 >= 36)
        throw H.ioore(simplex, t1);
      simplex[21] = simplex[t1];
      t1 = withv + 4;
      if (t1 >= 36)
        throw H.ioore(simplex, t1);
      simplex[22] = simplex[t1];
      t1 = withv + 5;
      if (t1 >= 36)
        throw H.ioore(simplex, t1);
      simplex[23] = simplex[t1];
      t1 = withv + 6;
      if (t1 >= 36)
        throw H.ioore(simplex, t1);
      simplex[24] = simplex[t1];
      t1 = withv + 7;
      if (t1 >= 36)
        throw H.ioore(simplex, t1);
      simplex[25] = simplex[t1];
      t1 = withv + 8;
      if (t1 >= 36)
        throw H.ioore(simplex, t1);
      simplex[26] = simplex[t1];
    }
    t1 = this.numVertices;
    if (t1 >= 2 && coords[1] === 0) {
      this.numVertices = t1 - 1;
      withv = this.numVertices * 9;
      if (withv < 0 || withv >= 36)
        throw H.ioore(simplex, withv);
      simplex[9] = simplex[withv];
      t1 = withv + 1;
      if (t1 >= 36)
        throw H.ioore(simplex, t1);
      simplex[10] = simplex[t1];
      t1 = withv + 2;
      if (t1 >= 36)
        throw H.ioore(simplex, t1);
      simplex[11] = simplex[t1];
      t1 = withv + 3;
      if (t1 >= 36)
        throw H.ioore(simplex, t1);
      simplex[12] = simplex[t1];
      t1 = withv + 4;
      if (t1 >= 36)
        throw H.ioore(simplex, t1);
      simplex[13] = simplex[t1];
      t1 = withv + 5;
      if (t1 >= 36)
        throw H.ioore(simplex, t1);
      simplex[14] = simplex[t1];
      t1 = withv + 6;
      if (t1 >= 36)
        throw H.ioore(simplex, t1);
      simplex[15] = simplex[t1];
      t1 = withv + 7;
      if (t1 >= 36)
        throw H.ioore(simplex, t1);
      simplex[16] = simplex[t1];
      t1 = withv + 8;
      if (t1 >= 36)
        throw H.ioore(simplex, t1);
      simplex[17] = simplex[t1];
    }
    t1 = this.numVertices;
    if (t1 >= 1 && coords[0] === 0) {
      this.numVertices = t1 - 1;
      withv = this.numVertices * 9;
      if (withv < 0 || withv >= 36)
        throw H.ioore(simplex, withv);
      simplex[0] = simplex[withv];
      t1 = withv + 1;
      if (t1 >= 36)
        throw H.ioore(simplex, t1);
      simplex[1] = simplex[t1];
      t1 = withv + 2;
      if (t1 >= 36)
        throw H.ioore(simplex, t1);
      simplex[2] = simplex[t1];
      t1 = withv + 3;
      if (t1 >= 36)
        throw H.ioore(simplex, t1);
      simplex[3] = simplex[t1];
      t1 = withv + 4;
      if (t1 >= 36)
        throw H.ioore(simplex, t1);
      simplex[4] = simplex[t1];
      t1 = withv + 5;
      if (t1 >= 36)
        throw H.ioore(simplex, t1);
      simplex[5] = simplex[t1];
      t1 = withv + 6;
      if (t1 >= 36)
        throw H.ioore(simplex, t1);
      simplex[6] = simplex[t1];
      t1 = withv + 7;
      if (t1 >= 36)
        throw H.ioore(simplex, t1);
      simplex[7] = simplex[t1];
      t1 = withv + 8;
      if (t1 >= 36)
        throw H.ioore(simplex, t1);
      simplex[8] = simplex[t1];
    }
  },
  updateClosestPoints$0: function() {
    var numVertices, simplex, closest, a0, a1, a2, b0, b1, b2, w0, w1, w2, dot, wlsq, dot1, i, coords, alpha, beta, gamma, delta;
    numVertices = this.numVertices;
    if (numVertices === 0)
      return false;
    simplex = this.simplex;
    closest = this.closest;
    if (numVertices === 1) {
      closest[0] = simplex[3];
      closest[1] = simplex[4];
      closest[2] = simplex[5];
      closest[3] = simplex[6];
      closest[4] = simplex[7];
      closest[5] = simplex[8];
      return true;
    }
    a0 = simplex[0];
    a1 = simplex[1];
    a2 = simplex[2];
    b0 = simplex[9];
    b1 = simplex[10];
    b2 = simplex[11];
    if (numVertices === 2) {
      w0 = a0 - b0;
      w1 = a1 - b1;
      w2 = a2 - b2;
      dot = a0 * w0 + a1 * w1 + a2 * w2;
      if (dot > 0) {
        wlsq = w0 * w0 + w1 * w1 + w2 * w2;
        if (dot < wlsq) {
          dot /= wlsq;
          dot1 = 1 - dot;
          closest[0] = simplex[3] * dot1 + simplex[12] * dot;
          closest[1] = simplex[4] * dot1 + simplex[13] * dot;
          closest[2] = simplex[5] * dot1 + simplex[14] * dot;
          closest[3] = simplex[6] * dot1 + simplex[15] * dot;
          closest[4] = simplex[7] * dot1 + simplex[16] * dot;
          closest[5] = simplex[8] * dot1 + simplex[17] * dot;
          return true;
        } else
          this.removeVertex$1(0);
      } else
        this.removeVertex$1(1);
      for (i = 0; i < 6; ++i)
        closest[i] = simplex[i + 3];
      return true;
    }
    coords = this.cachedCoords;
    if (numVertices === 3) {
      this.closestPointTriangle$4(0, 9, 18, coords);
      this.reduceVertices$1(coords);
      alpha = coords[0];
      beta = coords[1];
      gamma = coords[2];
      closest[0] = alpha * simplex[3] + beta * simplex[12] + gamma * simplex[21];
      closest[1] = alpha * simplex[4] + beta * simplex[13] + gamma * simplex[22];
      closest[2] = alpha * simplex[5] + beta * simplex[14] + gamma * simplex[23];
      closest[3] = alpha * simplex[6] + beta * simplex[15] + gamma * simplex[24];
      closest[4] = alpha * simplex[7] + beta * simplex[16] + gamma * simplex[25];
      closest[5] = alpha * simplex[8] + beta * simplex[17] + gamma * simplex[26];
      return true;
    }
    if (numVertices === 4)
      if (this.closestPointTetrahedron$1(coords)) {
        this.reduceVertices$1(coords);
        alpha = coords[0];
        beta = coords[1];
        gamma = coords[2];
        delta = coords[3];
        closest[0] = alpha * simplex[3] + beta * simplex[12] + gamma * simplex[21] + delta * simplex[30];
        closest[1] = alpha * simplex[4] + beta * simplex[13] + gamma * simplex[22] + delta * simplex[31];
        closest[2] = alpha * simplex[5] + beta * simplex[14] + gamma * simplex[23] + delta * simplex[32];
        closest[3] = alpha * simplex[6] + beta * simplex[15] + gamma * simplex[24] + delta * simplex[33];
        closest[4] = alpha * simplex[7] + beta * simplex[16] + gamma * simplex[25] + delta * simplex[34];
        closest[5] = alpha * simplex[8] + beta * simplex[17] + gamma * simplex[26] + delta * simplex[35];
        return true;
      } else
        return false;
    return false;
  },
  closestPointTetrahedron$1: function(coords) {
    var simplex, a0, a1, a2, b0, b1, b2, c0, c1, c2, d0, d1, d2, ab0, ab1, ab2, ac0, ac1, ac2, ad0, ad1, ad2, bc0, bc1, bc2, bd0, bd1, bd2, n0, n1, n2, sideABC, sideACD, sideADB, sideBDC, tempCoords, sqDist, minSqDist;
    simplex = this.simplex;
    a0 = simplex[0];
    a1 = simplex[1];
    a2 = simplex[2];
    b0 = simplex[9];
    b1 = simplex[10];
    b2 = simplex[11];
    c0 = simplex[18];
    c1 = simplex[19];
    c2 = simplex[20];
    d0 = simplex[27];
    d1 = simplex[28];
    d2 = simplex[29];
    ab0 = b0 - a0;
    ab1 = b1 - a1;
    ab2 = b2 - a2;
    ac0 = c0 - a0;
    ac1 = c1 - a1;
    ac2 = c2 - a2;
    ad0 = d0 - a0;
    ad1 = d1 - a1;
    ad2 = d2 - a2;
    bc0 = c0 - b0;
    bc1 = c1 - b1;
    bc2 = c2 - b2;
    bd0 = d0 - b0;
    bd1 = d1 - b1;
    bd2 = d2 - b2;
    n0 = ab1 * ac2 - ab2 * ac1;
    n1 = ab2 * ac0 - ab0 * ac2;
    n2 = ab0 * ac1 - ab1 * ac0;
    sideABC = -(a0 * n0 + a1 * n1 + a2 * n2) * (ad0 * n0 + ad1 * n1 + ad2 * n2) <= 0;
    n0 = ac1 * ad2 - ac2 * ad1;
    n1 = ac2 * ad0 - ac0 * ad2;
    n2 = ac0 * ad1 - ac1 * ad0;
    sideACD = -(a0 * n0 + a1 * n1 + a2 * n2) * (ab0 * n0 + ab1 * n1 + ab2 * n2) <= 0;
    n0 = ad1 * ab2 - ad2 * ab1;
    n1 = ad2 * ab0 - ad0 * ab2;
    n2 = ad0 * ab1 - ad1 * ab0;
    sideADB = -(a0 * n0 + a1 * n1 + a2 * n2) * (ac0 * n0 + ac1 * n1 + ac2 * n2) <= 0;
    n0 = bd1 * bc2 - bd2 * bc1;
    n1 = bd2 * bc0 - bd0 * bc2;
    n2 = bd0 * bc1 - bd1 * bc0;
    sideBDC = (b0 * n0 + b1 * n1 + b2 * n2) * (ab0 * n0 + ab1 * n1 + ab2 * n2) <= 0;
    coords[3] = 0;
    coords[2] = 0;
    coords[1] = 0;
    coords[0] = 0;
    if (!sideABC && !sideACD && !sideADB && !sideBDC)
      return false;
    tempCoords = this.tempCoords;
    if (sideABC) {
      sqDist = this.closestPointTriangle$5(0, 9, 18, tempCoords, true);
      if (typeof sqDist !== "number")
        throw sqDist.$lt();
      if (sqDist < 179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368) {
        coords[0] = tempCoords[0];
        coords[1] = tempCoords[1];
        coords[2] = tempCoords[2];
        coords[3] = 0;
        minSqDist = sqDist;
      } else
        minSqDist = 179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368;
    } else
      minSqDist = 179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368;
    if (sideACD) {
      sqDist = this.closestPointTriangle$5(0, 18, 27, tempCoords, true);
      if (typeof sqDist !== "number")
        throw sqDist.$lt();
      if (sqDist < minSqDist) {
        coords[0] = tempCoords[0];
        coords[1] = 0;
        coords[2] = tempCoords[1];
        coords[3] = tempCoords[2];
        minSqDist = sqDist;
      }
    }
    if (sideADB) {
      sqDist = this.closestPointTriangle$5(0, 27, 9, tempCoords, true);
      if (typeof sqDist !== "number")
        throw sqDist.$lt();
      if (sqDist < minSqDist) {
        coords[0] = tempCoords[0];
        coords[1] = tempCoords[2];
        coords[2] = 0;
        coords[3] = tempCoords[1];
        minSqDist = sqDist;
      }
    }
    if (sideBDC) {
      sqDist = this.closestPointTriangle$5(9, 27, 18, tempCoords, true);
      if (typeof sqDist !== "number")
        throw sqDist.$lt();
      if (sqDist < minSqDist) {
        coords[0] = 0;
        coords[1] = tempCoords[0];
        coords[2] = tempCoords[2];
        coords[3] = tempCoords[1];
      }
    }
    return true;
  },
  closestPointTriangle$5: function(a, b, c, coords, computeDistance) {
    var simplex, a0, t1, a1, a2, b0, b1, b2, c0, c1, c2, ba0, ba1, ba2, ca0, ca1, ca2, dot1, dot2, dot3, dot4, vc, v, d0, d1, d2, dot5, dot6, vb, va, denom, w;
    simplex = this.simplex;
    if (a < 0 || a >= 36)
      throw H.ioore(simplex, a);
    a0 = simplex[a];
    t1 = a + 1;
    if (t1 >= 36)
      throw H.ioore(simplex, t1);
    a1 = simplex[t1];
    t1 = a + 2;
    if (t1 >= 36)
      throw H.ioore(simplex, t1);
    a2 = simplex[t1];
    if (b < 0 || b >= 36)
      throw H.ioore(simplex, b);
    b0 = simplex[b];
    t1 = b + 1;
    if (t1 >= 36)
      throw H.ioore(simplex, t1);
    b1 = simplex[t1];
    t1 = b + 2;
    if (t1 >= 36)
      throw H.ioore(simplex, t1);
    b2 = simplex[t1];
    if (c < 0 || c >= 36)
      throw H.ioore(simplex, c);
    c0 = simplex[c];
    t1 = c + 1;
    if (t1 >= 36)
      throw H.ioore(simplex, t1);
    c1 = simplex[t1];
    t1 = c + 2;
    if (t1 >= 36)
      throw H.ioore(simplex, t1);
    c2 = simplex[t1];
    ba0 = a0 - b0;
    ba1 = a1 - b1;
    ba2 = a2 - b2;
    ca0 = a0 - c0;
    ca1 = a1 - c1;
    ca2 = a2 - c2;
    dot1 = a0 * ba0 + a1 * ba1 + a2 * ba2;
    dot2 = a0 * ca0 + a1 * ca1 + a2 * ca2;
    if (dot1 <= 0 && dot2 <= 0) {
      coords[0] = 1;
      coords[2] = 0;
      coords[1] = 0;
      if (computeDistance)
        return a0 * a0 + a1 * a1 + a2 * a2;
      else
        return;
    }
    dot3 = b0 * ba0 + b1 * ba1 + b2 * ba2;
    dot4 = b0 * ca0 + b1 * ca1 + b2 * ca2;
    if (dot3 >= 0 && dot4 <= dot3) {
      coords[1] = 1;
      coords[2] = 0;
      coords[0] = 0;
      if (computeDistance)
        return b0 * b0 + b1 * b1 + b2 * b2;
      else
        return;
    }
    vc = dot1 * dot4 - dot3 * dot2;
    if (vc <= 0 && dot1 >= 0 && dot3 <= 0) {
      v = dot1 / (dot1 - dot3);
      coords[0] = 1 - v;
      coords[1] = v;
      coords[2] = 0;
      if (computeDistance) {
        d0 = a0 - v * ba0;
        d1 = a1 - v * ba1;
        d2 = a2 - v * ba2;
        return d0 * d0 + d1 * d1 + d2 * d2;
      } else
        return;
    }
    dot5 = c0 * ba0 + c1 * ba1 + c2 * ba2;
    dot6 = c0 * ca0 + c1 * ca1 + c2 * ca2;
    if (dot6 >= 0 && dot5 <= dot6) {
      coords[1] = 0;
      coords[0] = 0;
      coords[2] = 1;
      if (computeDistance)
        return c0 * c0 + c1 * c1 + c2 * c2;
      else
        return;
    }
    vb = dot5 * dot2 - dot1 * dot6;
    if (vb <= 0 && dot2 >= 0 && dot6 <= 0) {
      v = dot2 / (dot2 - dot6);
      coords[0] = 1 - v;
      coords[1] = 0;
      coords[2] = v;
      if (computeDistance) {
        d0 = a0 - v * ca0;
        d1 = a1 - v * ca1;
        d2 = a2 - v * ca2;
        return d0 * d0 + d1 * d1 + d2 * d2;
      } else
        return;
    }
    va = dot3 * dot6 - dot5 * dot4;
    if (va <= 0 && dot4 - dot3 >= 0 && dot5 - dot6 >= 0) {
      t1 = dot4 - dot3;
      v = t1 / (t1 + (dot5 - dot6));
      coords[0] = 0;
      dot6 = 1 - v;
      coords[1] = dot6;
      coords[2] = v;
      if (computeDistance) {
        d0 = b0 * dot6 + c0 * v;
        d1 = b1 * dot6 + c1 * v;
        d2 = b2 * dot6 + c2 * v;
        return d0 * d0 + d1 * d1 + d2 * d2;
      } else
        return;
    }
    denom = 1 / (va + vb + vc);
    v = vb * denom;
    w = vc * denom;
    coords[0] = 1 - v - w;
    coords[1] = v;
    coords[2] = w;
    if (computeDistance) {
      d0 = a0 - ba0 * v - ca0 * w;
      d1 = a1 - ba1 * v - ca1 * w;
      d2 = a2 - ba2 * v - ca2 * w;
      return d0 * d0 + d1 * d1 + d2 * d2;
    } else
      return;
  },
  closestPointTriangle$4: function(a, b, c, coords) {
    return this.closestPointTriangle$5(a, b, c, coords, false);
  },
  evaluate$3: function(_, cache, xformA, xformB) {
    var axis, shapeA, shapeB, t1, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11, axis0, axis1, axis2, supportA, supportB, closest, simplex, t2, t3, lastW0, lastW1, lastW2, curIter, squaredDistance, seperated, d0, d1, d2, sa0, sa1, sa2, sb0, sb1, sb2, w0, w1, w2, t4, index, inSimplex, i, t5, axislsq, scale;
    axis = cache.axis;
    shapeA = cache.shapeA;
    shapeB = cache.shapeB;
    this.numVertices = 0;
    t1 = xformA.storage;
    A0 = t1[0];
    A1 = t1[1];
    A2 = t1[2];
    A3 = t1[3];
    A4 = t1[4];
    A5 = t1[5];
    A6 = t1[6];
    A7 = t1[7];
    A8 = t1[8];
    A9 = t1[9];
    A10 = t1[10];
    A11 = t1[11];
    t1 = xformB.storage;
    B0 = t1[0];
    B1 = t1[1];
    B2 = t1[2];
    B3 = t1[3];
    B4 = t1[4];
    B5 = t1[5];
    B6 = t1[6];
    B7 = t1[7];
    B8 = t1[8];
    B9 = t1[9];
    B10 = t1[10];
    B11 = t1[11];
    t1 = axis.storage;
    axis0 = t1[0];
    axis1 = t1[1];
    axis2 = t1[2];
    supportA = cache.closestA;
    supportB = cache.closestB;
    closest = this.closest;
    simplex = this.simplex;
    for (t2 = supportA.storage, t3 = supportB.storage, lastW0 = 179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368, lastW1 = 179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368, lastW2 = 179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368, curIter = 0, squaredDistance = 179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368; seperated = false, true; axis2 = d2, axis1 = d1, axis0 = d0, squaredDistance = axislsq, lastW2 = w2, lastW1 = w1, lastW0 = w0) {
      ++curIter;
      t2[0] = -(A0 * axis0 + A1 * axis1 + A2 * axis2);
      t2[1] = -(A3 * axis0 + A4 * axis1 + A5 * axis2);
      t2[2] = -(A6 * axis0 + A7 * axis1 + A8 * axis2);
      t3[0] = B0 * axis0 + B1 * axis1 + B2 * axis2;
      t3[1] = B3 * axis0 + B4 * axis1 + B5 * axis2;
      t3[2] = B6 * axis0 + B7 * axis1 + B8 * axis2;
      shapeA.localSupportWithoutMargin$2(supportA, supportA);
      shapeB.localSupportWithoutMargin$2(supportB, supportB);
      d0 = t2[0];
      d1 = t2[1];
      d2 = t2[2];
      sa0 = A0 * d0 + A3 * d1 + A6 * d2 + A9;
      t2[0] = sa0;
      sa1 = A1 * d0 + A4 * d1 + A7 * d2 + A10;
      t2[1] = sa1;
      sa2 = A2 * d0 + A5 * d1 + A8 * d2 + A11;
      t2[2] = sa2;
      d0 = t3[0];
      d1 = t3[1];
      d2 = t3[2];
      sb0 = B0 * d0 + B3 * d1 + B6 * d2 + B9;
      t3[0] = sb0;
      sb1 = B1 * d0 + B4 * d1 + B7 * d2 + B10;
      t3[1] = sb1;
      sb2 = B2 * d0 + B5 * d1 + B8 * d2 + B11;
      t3[2] = sb2;
      w0 = sa0 - sb0;
      w1 = sa1 - sb1;
      w2 = sa2 - sb2;
      t4 = this.numVertices;
      index = t4 * 9;
      for (inSimplex = false, i = 0; i < index; i += 9) {
        if (i >= 36)
          throw H.ioore(simplex, i);
        d0 = w0 - simplex[i];
        t5 = i + 1;
        if (t5 >= 36)
          throw H.ioore(simplex, t5);
        d1 = w1 - simplex[t5];
        t5 = i + 2;
        if (t5 >= 36)
          throw H.ioore(simplex, t5);
        d2 = w2 - simplex[t5];
        if (d0 * d0 + d1 * d1 + d2 * d2 < 0.0001)
          inSimplex = true;
      }
      if (!inSimplex) {
        d0 = w0 - lastW0;
        d1 = w1 - lastW1;
        d2 = w2 - lastW2;
        inSimplex = d0 * d0 + d1 * d1 + d2 * d2 < 0.0001;
      }
      if (inSimplex) {
        seperated = true;
        break;
      }
      if (squaredDistance - (axis0 * w0 + axis1 * w1 + axis2 * w2) <= squaredDistance * 0.0001) {
        seperated = true;
        break;
      }
      if (index < 0 || index >= 36)
        throw H.ioore(simplex, index);
      simplex[index] = w0;
      t5 = index + 1;
      if (t5 >= 36)
        throw H.ioore(simplex, t5);
      simplex[t5] = w1;
      t5 = index + 2;
      if (t5 >= 36)
        throw H.ioore(simplex, t5);
      simplex[t5] = w2;
      t5 = index + 3;
      if (t5 >= 36)
        throw H.ioore(simplex, t5);
      simplex[t5] = sa0;
      t5 = index + 4;
      if (t5 >= 36)
        throw H.ioore(simplex, t5);
      simplex[t5] = sa1;
      t5 = index + 5;
      if (t5 >= 36)
        throw H.ioore(simplex, t5);
      simplex[t5] = sa2;
      t5 = index + 6;
      if (t5 >= 36)
        throw H.ioore(simplex, t5);
      simplex[t5] = sb0;
      t5 = index + 7;
      if (t5 >= 36)
        throw H.ioore(simplex, t5);
      simplex[t5] = sb1;
      t5 = index + 8;
      if (t5 >= 36)
        throw H.ioore(simplex, t5);
      simplex[t5] = sb2;
      this.numVertices = t4 + 1;
      if (!this.updateClosestPoints$0()) {
        seperated = false;
        break;
      }
      d0 = closest[0] - closest[3];
      d1 = closest[1] - closest[4];
      d2 = closest[2] - closest[5];
      axislsq = d0 * d0 + d1 * d1 + d2 * d2;
      if (axislsq <= 0.0001) {
        seperated = true;
        break;
      }
      if (squaredDistance - axislsq <= 0.0001 * squaredDistance) {
        axis2 = d2;
        axis1 = d1;
        axis0 = d0;
        squaredDistance = axislsq;
        seperated = true;
        break;
      }
      if (curIter >= 100) {
        axis2 = d2;
        axis1 = d1;
        axis0 = d0;
        squaredDistance = axislsq;
        seperated = true;
        break;
      }
      if (this.numVertices === 4) {
        axis2 = d2;
        axis1 = d1;
        axis0 = d0;
        squaredDistance = axislsq;
        seperated = false;
        break;
      }
    }
    axislsq = axis0 * axis0 + axis1 * axis1 + axis2 * axis2;
    if (axislsq < 1e-8) {
      t1[0] = axis0;
      t1[1] = axis1;
      t1[2] = axis2;
      return;
    }
    scale = 1 / Math.sqrt(axislsq);
    t1[0] = axis0 * scale;
    t1[1] = axis1 * scale;
    t1[2] = axis2 * scale;
    if (seperated) {
      t2[0] = closest[0];
      t2[1] = closest[1];
      t2[2] = closest[2];
      t3[0] = closest[3];
      t3[1] = closest[4];
      t3[2] = closest[5];
      return Math.sqrt(squaredDistance);
    } else
      return;
  },
  static: {
"": "WebGLGJKContactSolver_version",
}

},

WebGLPhysicsWorld: {"": "Object;timeStamp>,contactCallbackObjects,_getTime,_gravity,_maxSubSteps,_fixedTimeStep,_variableMinStep,_variableMaxStep,_variableStep,_maxGiveUpTimeStep,_staticSpatialMap,_dynamicSpatialMap,_collisionObjects,_rigidBodies,_constraints,_kinematicBodies,_planeAxis,_planeSA,_planeSB,_midStep,_narrowTriangle,_narrowCache,_narrowCache2,_narrowFakeBody,_narrowTransform,_narrowExtents,_continuousFakeBody,_continuousInvTransform,_continuousExtents,_activeArbiters,_activeBodies,_activeKinematics,_activeConstraints,_persistantObjectsList,_persistantObjectsList2,_persistantTrianglesList,_persistantTOIEventList,_prevTimeStep,_prevTimeStamp,_timeStamp,_contactGJK,_contactEPA,_sweepTriangle,_sweepDelta,_sweepFromExtents,_sweepToExtents,_sweepExtents,_sweepCache,_sweepFakeBody,_sweepTransform,_sweepTransform2,_performanceData,_syncExtents,_contactCallbackObjects,_contactCallbackRemovedArbiters",
  _getTime$0: function() {
    return this._getTime.call$0();
  },
  _filtered$2: function(objectA, objectB) {
    var t1;
    if (objectA == null ? objectB == null : objectA === objectB)
      return true;
    if (objectA._collisionObject || objectA._kinematic)
      t1 = objectB._collisionObject || objectB._kinematic;
    else
      t1 = false;
    if (t1)
      return true;
    if ((objectA._mask & objectB._group) >>> 0 === 0 || (objectB._mask & objectA._group) >>> 0 === 0)
      return true;
    return false;
  },
  _narrowPhase$4: function(shapeA, shapeB, objectA, objectB) {
    var triangle, t1, t2, t3, t4, arbitersA, arbitersB, arbiters, numArbiters, i, arb, carb, cache, data, contact, collided;
    if (this._narrowTriangle == null) {
      if ($.get$WebGLPhysicsTriangleShape_trianglePool().length === 0) {
        triangle = new N.WebGLPhysicsTriangleShape(null, null, null);
        triangle.index = 0;
        triangle.collisionRadius = 0;
        triangle.triangleArray = null;
      } else {
        t1 = $.get$WebGLPhysicsTriangleShape_trianglePool();
        if (0 >= t1.length)
          throw H.ioore(t1, 0);
        triangle = t1.pop();
      }
      this._narrowTriangle = triangle;
      t1 = new Float32Array(3);
      t1.$dartCachedLength = t1.length;
      t1 = new T.Vector3(t1);
      t2 = t1.storage;
      t2[0] = 1;
      t2[1] = 0;
      t2[2] = 0;
      t2 = new Float32Array(3);
      t2.$dartCachedLength = t2.length;
      t3 = new Float32Array(3);
      t3.$dartCachedLength = t3.length;
      t4 = new N.WebGLPhysicsNarrowCache(null, null, null, null, null, null, null, null, null, null, null, null);
      t4.WebGLPhysicsTOIEvent$0();
      t4.axis = t1;
      t4.shapeA = null;
      t4.shapeB = null;
      t4.closestA = new T.Vector3(t2);
      t4.closestB = new T.Vector3(t3);
      this._narrowCache = t4;
      t4 = this._narrowCache;
      t3 = t4.axis;
      t2 = t4.closestA;
      t4 = t4.closestB;
      t1 = new N.WebGLPhysicsNarrowCache(null, null, null, null, null, null, null, null, null, null, null, null);
      t1.WebGLPhysicsTOIEvent$0();
      t1.axis = t3;
      t1.shapeA = null;
      t1.shapeB = null;
      t1.closestA = t2;
      t1.closestB = t4;
      this._narrowCache2 = t1;
      t1 = this._narrowFakeBody;
      t1._transform = N.Matrix43$identity();
      t1._shape = null;
      this._narrowTransform = N.Matrix43$identity();
      t1 = new Float32Array(6);
      t1.$dartCachedLength = t1.length;
      this._narrowExtents = t1;
    }
    arbitersA = objectA._arbiters;
    arbitersB = objectB._arbiters;
    arbiters = arbitersA.length <= arbitersB.length ? arbitersA : arbitersB;
    numArbiters = arbiters.length;
    for (i = 0; arb = null, i < numArbiters; ++i) {
      carb = arbiters[i];
      if (carb.shapeA === shapeA && carb.shapeB === shapeB && carb.objectA === objectA && carb.objectB === objectB) {
        arb = carb;
        break;
      }
    }
    t1 = arb == null;
    if (!t1 && arb.skipDiscreteCollisions === true) {
      arb.skipDiscreteCollisions = false;
      return;
    }
    if (t1)
      arb = N.WebGLPhysicsArbiter_allocate(shapeA, shapeB, objectA, objectB);
    cache = this._narrowCache;
    cache.shapeA = shapeA;
    cache.shapeB = shapeB;
    t2 = arb.contacts;
    t3 = t2.length;
    if (t3 !== 0) {
      if (0 >= t3)
        throw H.ioore(t2, 0);
      data = t2[0];
      t2 = cache.axis;
      t3 = data._storage;
      t4 = t3[12];
      t2 = t2.storage;
      t2[0] = t4;
      t2[1] = t3[13];
      t2[2] = t3[14];
    }
    contact = this._contactPairTest$3(cache, objectA._transform, objectB._transform);
    if (typeof contact !== "number")
      throw contact.$lt();
    if (contact < 0) {
      arb.insertContact$5(cache.closestA, cache.closestB, cache.axis, contact, false);
      collided = true;
    } else
      collided = false;
    if (collided) {
      if (t1) {
        this._activeArbiters.push(arb);
        arb._active = true;
        arbitersA.push(arb);
        arbitersB.push(arb);
      }
      if (objectA._permitSleep === true && objectA._active !== true)
        this._wakeBody$1(objectA);
      if (objectB._permitSleep === true && objectB._active !== true)
        this._wakeBody$1(objectB);
      if (arb._active !== true) {
        arb._active = true;
        this._activeArbiters.push(arb);
      }
    } else if (t1)
      N.WebGLPhysicsArbiter_deallocate(arb);
  },
  _computeSleeping$1: function(timeStep) {
    var t1, t2, arbiters, bodies, constraints, maxN, n, arb, objectA, objectB, con, islands, body, root, island, t3;
    t1 = new N.WebGLPhysicsWorld__computeSleeping__find();
    t2 = new N.WebGLPhysicsWorld__computeSleeping__unify(t1);
    arbiters = this._activeArbiters;
    bodies = this._activeBodies;
    constraints = this._activeConstraints;
    maxN = arbiters.length;
    for (n = 0; n < maxN; ++n) {
      if (n >= arbiters.length)
        throw H.ioore(arbiters, n);
      arb = arbiters[n];
      objectA = arb.objectA;
      objectB = arb.objectB;
      if (objectA._permitSleep === true && objectB._permitSleep === true)
        t2.call$2(objectA, objectB);
    }
    maxN = constraints.length;
    for (n = 0, con = null; n < maxN; ++n) {
      con = constraints[n];
      objectA = con.get$bodyA();
      objectB = con.get$bodyB();
      objectA.get$_permitSleep();
      objectB.get$_permitSleep();
    }
    islands = [];
    islands.$builtinTypeInfo = [N.WebGLPhysicsIsland];
    for (body = null; bodies.length > 0;) {
      body = bodies.pop();
      root = t1.call$1(body);
      island = root.get$_island();
      if (island == null) {
        island = N.WebGLPhysicsIsland_allocate();
        root._island = island;
        islands.push(island);
        island._active = false;
      }
      body._island = island;
      island._bodies.push(body);
      island._active = island._active === true || body.isActive$0(body);
      t2 = body._wakeTimeStamp;
      t3 = island._wakeTimeStamp;
      if (typeof t2 !== "number")
        throw t2.$gt();
      if (typeof t3 !== "number")
        throw H.iae(t3);
      if (t2 > t3)
        island._wakeTimeStamp = t2;
    }
    for (; constraints.length > 0;) {
      con = constraints.pop();
      root = t1.call$1(con);
      island = root.get$_island();
      island = N.WebGLPhysicsIsland_allocate();
      root._island = island;
      islands.push(island);
      island._active = true;
      con.set$_island(island);
      island._constraints.push(con);
      t2 = con.get$_wakeTimeStamp();
      t2.$gt(t2, island._wakeTimeStamp);
    }
    for (; islands.length > 0;) {
      island = islands.pop();
      if (island._active === true) {
        for (; t1 = island._bodies, t1.length > 0;) {
          body = t1.pop();
          body._wakeTimeStamp = island._wakeTimeStamp;
          bodies.push(body);
          body._islandRoot = body;
          body._islandRank = 0;
          body._island = null;
        }
        for (; t1 = island._constraints, t1.length > 0;) {
          con = t1.pop();
          con.set$_wakeTimeStamp(island._wakeTimeStamp);
          constraints.push(con);
          con.set$_islandRoot(con);
          con.set$_islandRank(0);
          con.set$_island(null);
        }
        $.get$WebGLPhysicsIsland_islandPool().push(island);
        island._wakeTimeStamp = 0;
      } else {
        maxN = island._bodies.length;
        for (n = 0; n < maxN; ++n) {
          t1 = island._bodies;
          if (n >= t1.length)
            throw H.ioore(t1, n);
          body = t1[n];
          t1 = body._velocity.storage;
          t1[2] = 0;
          t1[1] = 0;
          t1[0] = 0;
          t1[5] = 0;
          t1[4] = 0;
          t1[3] = 0;
          body._active = false;
          this._syncBody$1(body);
          body._islandRoot = body;
          body._islandRank = 0;
        }
        t1 = island._constraints;
        maxN = t1.length;
        for (n = 0; n < maxN; ++n) {
          con = t1[n];
          con.set$_active(false);
          con.set$_islandRoot(con);
          con.set$_islandRank(0);
        }
      }
    }
  },
  _wakeIsland$1: function(island) {
    var t1, body, t2, arbiters, maxN, n, arb, constraint;
    for (; t1 = island._bodies, t1.length > 0;) {
      body = t1.pop();
      t1 = this._timeStamp;
      t2 = this._midStep ? 0 : 1;
      if (typeof t1 !== "number")
        throw t1.$add();
      body._wakeTimeStamp = t1 + t2;
      this._activeBodies.push(body);
      arbiters = body._arbiters;
      maxN = arbiters.length;
      for (n = 0; n < maxN; ++n) {
        if (n >= arbiters.length)
          throw H.ioore(arbiters, n);
        arb = arbiters[n];
        if (arb._active !== true) {
          arb._active = true;
          this._activeArbiters.push(arb);
        }
      }
      body._active = true;
      body._island = null;
      this._syncBody$1(body);
    }
    for (; t1 = island._constraints, t1.length > 0;) {
      constraint = t1.pop();
      t1 = this._timeStamp;
      t2 = this._midStep ? 0 : 1;
      if (typeof t1 !== "number")
        throw t1.$add();
      constraint.set$_wakeTimeStamp(t1 + t2);
      this._activeConstraints.push(constraint);
      constraint.set$_active(true);
      constraint.set$_island(null);
    }
    $.get$WebGLPhysicsIsland_islandPool().push(island);
    island._wakeTimeStamp = 0;
  },
  _wakeRelated$1: function(body) {
    var constraints, maxN, n, arbiters, arb, t1;
    constraints = body._constraints;
    maxN = constraints.length;
    for (n = 0; n < maxN; ++n) {
      if (n >= constraints.length)
        throw H.ioore(constraints, n);
      this._wakeConstraint$1(constraints[n]);
    }
    arbiters = body._arbiters;
    maxN = arbiters.length;
    for (n = 0; n < maxN; ++n) {
      if (n >= arbiters.length)
        throw H.ioore(arbiters, n);
      arb = arbiters[n];
      if (arb._active !== true) {
        arb._active = true;
        this._activeArbiters.push(arb);
      }
      t1 = arb.objectA;
      if (t1._permitSleep === true && t1._active !== true)
        this._wakeBody$1(t1);
      t1 = arb.objectB;
      if (t1._permitSleep === true && t1._active !== true)
        this._wakeBody$1(t1);
    }
  },
  _wakeBody$1: function(body) {
    var t1, t2;
    if (body._collisionObject && !body._kinematic) {
      this._wakeRelated$1(body);
      this._syncBody$1(body);
    } else if (body._kinematic) {
      body._delaySleep = true;
      if (body._active !== true) {
        body._active = true;
        this._activeKinematics.push(body);
        this._wakeRelated$1(body);
        this._syncBody$1(body);
      }
    } else {
      t1 = this._timeStamp;
      t2 = this._midStep ? 0 : 1;
      if (typeof t1 !== "number")
        throw t1.$add();
      body._wakeTimeStamp = t1 + t2;
      if (body._active !== true) {
        t1 = body._island;
        if (t1 == null) {
          body._active = true;
          this._activeBodies.push(body);
          this._wakeRelated$1(body);
          this._syncBody$1(body);
        } else
          this._wakeIsland$1(t1);
        this._syncBody$1(body);
      }
    }
  },
  _syncBody$1: function(body) {
    var extents, t1;
    extents = this._syncExtents;
    body._calculateExtents$1(extents);
    if (body._collisionObject && !body._kinematic) {
      t1 = this._staticSpatialMap;
      t1.update$2(t1, body, extents);
    } else {
      if (body._active === true)
        if (body._previouslyActive !== true) {
          t1 = this._staticSpatialMap;
          t1.remove$1(t1, body);
          t1 = this._dynamicSpatialMap;
          t1.add$2(t1, body, extents);
        } else {
          t1 = this._dynamicSpatialMap;
          t1.update$2(t1, body, extents);
        }
      else if (body._previouslyActive === true) {
        t1 = this._dynamicSpatialMap;
        t1.remove$1(t1, body);
        t1 = this._staticSpatialMap;
        t1.add$2(t1, body, extents);
      } else {
        t1 = this._staticSpatialMap;
        t1.update$2(t1, body, extents);
      }
      body._previouslyActive = body._active;
    }
  },
  _wakeConstraint$1: function(constraint) {
    var t1, t2;
    t1 = this._timeStamp;
    t2 = this._midStep ? 0 : 1;
    if (typeof t1 !== "number")
      throw t1.$add();
    constraint.set$_wakeTimeStamp(t1 + t2);
    constraint.get$_active();
    t1 = constraint.get$_island();
    this._wakeIsland$1(t1);
  },
  _dynamicSweep$4: function(toi, timeStep, lowerBound, negRadius) {
    var objectA, objectB, axis, t1, t2, t3, t4, axis0, axis1, axis2, delta0, delta1, delta2, radiusA, t5, angBias, radiusB, radius, curTOI, curIter, nextContact, seperation, denom;
    objectA = toi.objectA;
    objectB = toi.objectB;
    axis = toi.axis;
    t1 = objectA._velocity.storage;
    t2 = t1[0];
    t3 = t1[1];
    t4 = objectB._velocity.storage;
    axis0 = -t2 + t4[0];
    axis1 = -t3 + t4[1];
    axis2 = -t1[2] + t4[2];
    if (axis0 * axis0 + axis1 * axis1 + axis2 * axis2 < 1e-8) {
      toi.toi = null;
      return;
    }
    t2 = axis.storage;
    t2[0] = axis0;
    t2[1] = axis1;
    t2[2] = axis2;
    delta0 = -axis0;
    delta1 = -axis1;
    delta2 = -axis2;
    if (!objectA._fixedRotation) {
      radiusA = objectA._shape._radius;
      t3 = t1[3];
      t5 = t1[4];
      t1 = t1[5];
      t1 = Math.sqrt(t3 * t3 + t5 * t5 + t1 * t1);
      if (typeof radiusA !== "number")
        throw radiusA.$mul();
      angBias = 0 + radiusA * t1;
    } else {
      angBias = 0;
      radiusA = null;
    }
    if (!objectB._fixedRotation) {
      radiusB = objectB._shape._radius;
      t1 = t4[3];
      t3 = t4[4];
      t4 = t4[5];
      t1 = Math.sqrt(t1 * t1 + t3 * t3 + t4 * t4);
      if (typeof radiusB !== "number")
        throw radiusB.$mul();
      angBias += radiusB * t1;
    } else
      radiusB = null;
    if (typeof timeStep !== "number")
      throw H.iae(timeStep);
    if (angBias < 0.5 / timeStep) {
      if (typeof radiusA !== "number")
        throw radiusA.$lt();
      if (typeof radiusB !== "number")
        throw H.iae(radiusB);
      if (radiusA < radiusB)
        radius = radiusA;
      else
        radius = radiusB;
      radius *= 0.75 / timeStep;
      if (delta0 * delta0 + delta1 * delta1 + delta2 * delta2 < radius * radius) {
        toi.toi = null;
        return;
      }
    }
    for (t1 = objectA._transform, t3 = objectB._transform, curTOI = lowerBound, curIter = 0; true;) {
      t4 = curTOI * timeStep;
      objectA._integratePositionWithVelocities$4(objectA._startTransform, t1, t4, 0);
      objectB._integratePositionWithVelocities$4(objectB._startTransform, t3, t4, 0);
      nextContact = this._contactPairTest$3(toi, t1, t3);
      if (nextContact != null) {
        if (typeof nextContact !== "number")
          throw nextContact.$add();
        seperation = nextContact + negRadius;
      } else
        seperation = nextContact;
      if (seperation != null) {
        if (typeof seperation !== "number")
          throw seperation.$lt();
        t4 = seperation < 0.0001;
      } else
        t4 = true;
      if (t4) {
        if (!this._seperatingTOI$1(toi))
          toi.distance = nextContact;
        else
          curTOI = null;
        break;
      }
      denom = (angBias - (t2[0] * delta0 + t2[1] * delta1 + t2[2] * delta2)) * timeStep;
      if (denom <= 0) {
        curTOI = null;
        break;
      }
      if (typeof seperation !== "number")
        throw seperation.$div();
      curTOI += seperation / denom;
      if (curTOI >= 1) {
        curTOI = null;
        break;
      }
      ++curIter;
      if (curIter > 100) {
        curTOI = null;
        break;
      }
    }
    toi.toi = curTOI;
  },
  _seperatingTOI$1: function(toi) {
    var objectA, objectB, supportA, supportB, velA, velB, t1, t2, vrel0, vrel1, vrel2, t3, t4, relA0, relA1, relA2, relB0, relB1, relB2;
    objectA = toi.objectA;
    objectB = toi.objectB;
    supportA = toi.closestA;
    supportB = toi.closestB;
    velA = objectA._velocity;
    velB = objectB._velocity;
    t1 = velA.storage;
    t2 = velB.storage;
    vrel0 = t1[0] - t2[0];
    vrel1 = t1[1] - t2[1];
    vrel2 = t1[2] - t2[2];
    if (!objectA._fixedRotation) {
      t3 = supportA.storage;
      t4 = objectA._transform.storage;
      relA0 = t3[0] - t4[9];
      relA1 = t3[1] - t4[10];
      relA2 = t3[2] - t4[11];
      t4 = t1[4];
      t3 = t1[5];
      vrel0 += t4 * relA2 - t3 * relA1;
      t1 = t1[3];
      vrel1 += t3 * relA0 - t1 * relA2;
      vrel2 += t1 * relA1 - t4 * relA0;
    }
    if (!objectB._fixedRotation) {
      t1 = supportB.storage;
      t3 = objectB._transform.storage;
      relB0 = t1[0] - t3[9];
      relB1 = t1[1] - t3[10];
      relB2 = t1[2] - t3[11];
      t3 = t2[4];
      t1 = t2[5];
      vrel0 -= t3 * relB2 - t1 * relB1;
      t2 = t2[3];
      vrel1 -= t1 * relB0 - t2 * relB2;
      vrel2 -= t2 * relB1 - t3 * relB0;
    }
    t1 = toi.axis.storage;
    return vrel0 * t1[0] + vrel1 * t1[1] + vrel2 * t1[2] >= 0;
  },
  _staticSweep$4: function(toi, timeStep, lowerBound, negRadius) {
    var objectA, objectB, axis, t1, axis0, axis1, axis2, t2, delta0, delta1, delta2, t3, t4, t5, angBias, curTOI, curIter, nextContact, seperation, denom;
    objectA = toi.objectA;
    objectB = toi.objectB;
    axis = toi.axis;
    t1 = objectA._velocity.storage;
    axis0 = -t1[0];
    axis1 = -t1[1];
    axis2 = -t1[2];
    if (axis0 * axis0 + axis1 * axis1 + axis2 * axis2 < 1e-8) {
      toi.toi = null;
      return;
    }
    t2 = axis.storage;
    t2[0] = axis0;
    t2[1] = axis1;
    t2[2] = axis2;
    delta0 = -axis0;
    delta1 = -axis1;
    delta2 = -axis2;
    if (!objectA._fixedRotationtype) {
      t3 = objectA._shape._radius;
      t4 = t1[3];
      t5 = t1[4];
      t1 = t1[5];
      t1 = Math.sqrt(t4 * t4 + t5 * t5 + t1 * t1);
      if (typeof t3 !== "number")
        throw t3.$mul();
      angBias = 0 + t3 * t1;
    } else
      angBias = 0;
    if (typeof timeStep !== "number")
      throw H.iae(timeStep);
    t1 = objectA._transform;
    curTOI = lowerBound;
    curIter = 0;
    for (; true;) {
      objectA._integratePositionWithVelocities$4(objectA._startTransform, t1, curTOI * timeStep, 0);
      nextContact = this._contactPairTest$3(toi, t1, objectB._transform);
      if (nextContact != null) {
        if (typeof nextContact !== "number")
          throw nextContact.$add();
        seperation = nextContact + negRadius;
      } else
        seperation = nextContact;
      if (seperation != null) {
        if (typeof seperation !== "number")
          throw seperation.$lt();
        t3 = seperation < 0.0001;
      } else
        t3 = true;
      if (t3) {
        if (!this._seperatingTOI$1(toi))
          toi.distance = nextContact;
        else
          curTOI = null;
        break;
      }
      denom = (angBias - (t2[0] * delta0 + t2[1] * delta1 + t2[2] * delta2)) * timeStep;
      if (denom <= 0) {
        curTOI = null;
        break;
      }
      if (typeof seperation !== "number")
        throw seperation.$div();
      curTOI += seperation / denom;
      if (curTOI >= 1) {
        curTOI = null;
        break;
      }
      ++curIter;
      if (curIter > 100) {
        curTOI = null;
        break;
      }
    }
    toi.toi = curTOI;
  },
  performStaticTOIBase$6: function(slop, timeStep, events, numEvents, objectA, objectB) {
    var t1, toi, t2, numEvents0;
    t1 = objectB._shape;
    if ($.get$WebGLPhysicsTOIEvent_eventPool().length === 0)
      toi = N.WebGLPhysicsTOIEvent$();
    else {
      t2 = $.get$WebGLPhysicsTOIEvent_eventPool();
      if (0 >= t2.length)
        throw H.ioore(t2, 0);
      toi = t2.pop();
    }
    toi.objectA = objectA;
    toi.objectB = objectB;
    toi.shapeA = objectA._shape;
    toi.shapeB = t1;
    this._staticSweep$4(toi, timeStep, 0, slop);
    if (toi.toi == null) {
      N.WebGLPhysicsTOIEvent_deallocate(toi);
      return numEvents;
    }
    toi.frozenA = false;
    toi.frozenB = true;
    numEvents0 = numEvents + 1;
    J.set$length$asx(events, numEvents0);
    if (numEvents < 0 || numEvents >= events.length)
      throw H.ioore(events, numEvents);
    events[numEvents] = toi;
    numEvents = numEvents0;
    return numEvents;
  },
  _dullet_physics$_update$0: function(_) {
    var dynamicMap, staticMap, rigidBodies, kinematics, constraints, arbiters, _gravity, performance, prevTime, timeDelta, t1, minTimeStep, numSteps, timeStep, t2, limit, i, body, t3, substep, timeStepRatio, extents, preTime, objects, numDynDyn, storageIndex, numPairs, objectA, objectB, t4, t5, arb, j, unfrozen, timeStepSq, numUnfrozen, radius, xform0, xform1, xform00, t6, t7, t8, numUnfrozen0, events, numEvents, toi, curTimeAlpha, minTOI, minIndex, tmpv, t0, shapeA, shapeB, arbitersA, arbitersB, arbs, numArbiters, carb, fresh;
    dynamicMap = this._dynamicSpatialMap;
    staticMap = this._staticSpatialMap;
    rigidBodies = this._activeBodies;
    kinematics = this._activeKinematics;
    constraints = this._activeConstraints;
    arbiters = this._activeArbiters;
    _gravity = this._gravity;
    performance = this._performanceData;
    performance.discrete = 0;
    performance.sleepComputation = 0;
    performance.prestepContacts = 0;
    performance.prestepConstraints = 0;
    performance.integrateVelocities = 0;
    performance.warmstartContacts = 0;
    performance.warmstartConstraints = 0;
    performance.physicsIterations = 0;
    performance.integratePositions = 0;
    performance.continuous = 0;
    prevTime = this._prevTimeStamp;
    if (prevTime == null) {
      this._prevTimeStamp = J.$mul$n(this._getTime$0(), 0.001);
      return;
    }
    timeDelta = J.$sub$n(J.$mul$n(this._getTime$0(), 0.001), prevTime);
    t1 = J.getInterceptor$n(timeDelta);
    if (this._variableStep === true) {
      minTimeStep = this._variableMinStep;
      numSteps = J.ceil$0$n(t1.$div(timeDelta, this._variableMaxStep));
      timeStep = t1.$div(timeDelta, numSteps);
      if (typeof timeStep !== "number")
        throw timeStep.$lt();
      if (typeof minTimeStep !== "number")
        throw H.iae(minTimeStep);
      if (timeStep < minTimeStep) {
        numSteps = J.floor$0$n(t1.$div(timeDelta, minTimeStep));
        timeStep = minTimeStep;
      }
      t2 = this._maxSubSteps;
      if (typeof t2 !== "number")
        throw H.iae(t2);
      if (numSteps > t2 && this._maxGiveUpTimeStep !== 0) {
        numSteps = J.ceil$0$n(t1.$div(timeDelta, this._maxGiveUpTimeStep));
        timeStep = t1.$div(timeDelta, numSteps);
      }
    } else {
      timeStep = this._fixedTimeStep;
      numSteps = J.floor$0$n(t1.$div(timeDelta, timeStep));
      t2 = this._maxSubSteps;
      if (typeof t2 !== "number")
        throw H.iae(t2);
      if (numSteps > t2 && this._maxGiveUpTimeStep !== 0) {
        numSteps = J.ceil$0$n(t1.$div(timeDelta, this._maxGiveUpTimeStep));
        timeStep = t1.$div(timeDelta, numSteps);
      }
    }
    if (numSteps <= 0)
      return;
    t1 = J.getInterceptor$n(timeStep);
    this._prevTimeStamp = J.$add$ns(this._prevTimeStamp, t1.$mul(timeStep, numSteps));
    t2 = this._maxSubSteps;
    if (typeof t2 !== "number")
      throw H.iae(t2);
    if (numSteps > t2)
      numSteps = t2;
    this._midStep = true;
    limit = kinematics.length;
    for (i = 0, body = null; i < limit;) {
      if (i >= kinematics.length)
        throw H.ioore(kinematics, i);
      body = kinematics[i];
      t2 = body._prevTransform;
      t3 = body._transform;
      if (!body._computeDeltaVelocity$4(t1.$mul(timeStep, numSteps), t2, t3, body._velocity) && !body._delaySleep) {
        body._active = false;
        C.JSArray_methods.removeAt$1(kinematics, i);
        this._syncBody$1(body);
      } else {
        t3.copyInto$1(body._newTransform);
        t2.copyInto$1(t3);
        ++i;
      }
      body._delaySleep = false;
    }
    for (substep = 0; substep < numSteps; ++substep) {
      t2 = this._timeStamp;
      if (typeof t2 !== "number")
        throw t2.$add();
      this._timeStamp = t2 + 1;
      if (this._prevTimeStep == null)
        this._prevTimeStep = timeStep;
      timeStepRatio = t1.$div(timeStep, this._prevTimeStep);
      this._prevTimeStep = timeStep;
      limit = rigidBodies.length;
      for (i = 0, extents = null; i < limit; ++i) {
        if (i >= rigidBodies.length)
          throw H.ioore(rigidBodies, i);
        body = rigidBodies[i];
        extents = body._extents;
        body._calculateExtents$1(extents);
        dynamicMap.update$2(dynamicMap, body, extents);
        body._refreshInertiaTensor$0();
      }
      limit = kinematics.length;
      for (i = 0; i < limit; ++i) {
        if (i >= kinematics.length)
          throw H.ioore(kinematics, i);
        body = kinematics[i];
        extents = body._extents;
        body._calculateExtents$1(extents);
        dynamicMap.update$2(dynamicMap, body, extents);
      }
      preTime = J.$mul$n(this._getTime$0(), 0.001);
      if (staticMap.needsRebuild === true)
        staticMap.rebuild$0();
      else if (staticMap.needsRebound === true)
        staticMap.rebound$0();
      if (dynamicMap.needsRebuild === true)
        dynamicMap.rebuild$0();
      else if (dynamicMap.needsRebound === true)
        dynamicMap.rebound$0();
      objects = this._persistantObjectsList;
      numDynDyn = dynamicMap.getOverlappingPairs$2(objects, 0);
      limit = rigidBodies.length;
      for (storageIndex = numDynDyn, i = 0; i < limit; ++i) {
        if (i >= rigidBodies.length)
          throw H.ioore(rigidBodies, i);
        body = rigidBodies[i];
        numPairs = staticMap.getOverlappingNodes$3(body._extents, objects, storageIndex + 1);
        if (numPairs !== 0) {
          objects.push(null);
          objects.push(null);
          t2 = objects.length;
          if (storageIndex < 0 || storageIndex >= t2)
            throw H.ioore(objects, storageIndex);
          objects[storageIndex] = body;
          storageIndex += 1 + numPairs;
          if (storageIndex < 0 || storageIndex >= t2)
            throw H.ioore(objects, storageIndex);
          objects[storageIndex] = body;
          ++storageIndex;
        }
      }
      limit = kinematics.length;
      for (i = 0; i < limit; ++i) {
        if (i >= kinematics.length)
          throw H.ioore(kinematics, i);
        body = kinematics[i];
        numPairs = staticMap.getOverlappingNodes$3(body._extents, objects, storageIndex + 1);
        if (numPairs !== 0) {
          t2 = objects.length;
          if (storageIndex < 0 || storageIndex >= t2)
            throw H.ioore(objects, storageIndex);
          objects[storageIndex] = body;
          storageIndex += 1 + numPairs;
          if (storageIndex < 0 || storageIndex >= t2)
            throw H.ioore(objects, storageIndex);
          objects[storageIndex] = body;
          ++storageIndex;
        }
      }
      for (i = 0, objectA = null, objectB = null; i < numDynDyn; i += 2) {
        t2 = objects.length;
        if (i >= t2)
          throw H.ioore(objects, i);
        objectA = objects[i];
        t3 = i + 1;
        if (t3 >= t2)
          throw H.ioore(objects, t3);
        objectB = objects[t3];
        objects[i] = null;
        objects[t3] = null;
        if (!this._filtered$2(objectA, objectB)) {
          t2 = objectA._id;
          t3 = objectB._id;
          if (typeof t2 !== "number")
            throw t2.$lt();
          if (typeof t3 !== "number")
            throw H.iae(t3);
          t4 = objectA._shape;
          t5 = objectB._shape;
          if (t2 < t3)
            this._narrowPhase$4(t4, t5, objectA, objectB);
          else
            this._narrowPhase$4(t5, t4, objectB, objectA);
        }
      }
      for (i = numDynDyn; i < storageIndex;) {
        if (i < 0 || i >= objects.length)
          throw H.ioore(objects, i);
        objectA = objects[i];
        objects[i] = null;
        ++i;
        for (t2 = objectA._shape; true;) {
          if (i >= objects.length)
            throw H.ioore(objects, i);
          objectB = objects[i];
          objects[i] = null;
          ++i;
          if (objectA == null ? objectB == null : objectA === objectB)
            break;
          if (!this._filtered$2(objectA, objectB)) {
            t3 = objectA._id;
            t4 = objectB._id;
            if (typeof t3 !== "number")
              throw t3.$lt();
            if (typeof t4 !== "number")
              throw H.iae(t4);
            t5 = objectB._shape;
            if (t3 < t4)
              this._narrowPhase$4(t2, t5, objectA, objectB);
            else
              this._narrowPhase$4(t5, t2, objectB, objectA);
          }
        }
      }
      t2 = performance.discrete;
      t3 = J.$sub$n(J.$mul$n(this._getTime$0(), 0.001), preTime);
      if (typeof t3 !== "number")
        throw H.iae(t3);
      performance.discrete = t2 + t3;
      preTime = J.$mul$n(this._getTime$0(), 0.001);
      this._computeSleeping$1(timeStep);
      t3 = performance.sleepComputation;
      t2 = J.$sub$n(J.$mul$n(this._getTime$0(), 0.001), preTime);
      if (typeof t2 !== "number")
        throw H.iae(t2);
      performance.sleepComputation = t3 + t2;
      preTime = J.$mul$n(this._getTime$0(), 0.001);
      for (i = 0; i < arbiters.length;) {
        arb = arbiters[i];
        if (arb.objectA._active !== true && arb.objectB._active !== true) {
          arb._active = false;
          C.JSArray_methods.removeAt$1(arbiters, i);
          continue;
        }
        if (arb.refreshContacts$0()) {
          C.JSArray_methods.removeAt$1(arbiters, i);
          objectA = arb.objectA;
          objectB = arb.objectB;
          C.JSArray_methods.remove$1(objectA._arbiters, arb);
          C.JSArray_methods.remove$1(objectB._arbiters, arb);
          t2 = objectA._contactCallbacks;
          if (t2 != null)
            t2.onRemovedContacts;
          t2 = objectB._contactCallbacks;
          if (t2 != null)
            t2.onRemovedContacts;
          N.WebGLPhysicsArbiter_deallocate(arb);
          continue;
        }
        arb.preStep$2(timeStepRatio, timeStep);
        ++i;
      }
      t2 = performance.prestepContacts;
      t3 = J.$sub$n(J.$mul$n(this._getTime$0(), 0.001), preTime);
      if (typeof t3 !== "number")
        throw H.iae(t3);
      performance.prestepContacts = t2 + t3;
      preTime = J.$mul$n(this._getTime$0(), 0.001);
      limit = constraints.length;
      for (i = 0; i < limit; ++i)
        constraints[i].preStep$2(timeStepRatio, timeStep);
      t2 = performance.prestepConstraints;
      t3 = J.$sub$n(J.$mul$n(this._getTime$0(), 0.001), preTime);
      if (typeof t3 !== "number")
        throw H.iae(t3);
      performance.prestepConstraints = t2 + t3;
      preTime = J.$mul$n(this._getTime$0(), 0.001);
      limit = rigidBodies.length;
      for (i = 0; i < limit; ++i) {
        if (i >= rigidBodies.length)
          throw H.ioore(rigidBodies, i);
        body = rigidBodies[i];
        body._integrateVelocity$2(_gravity, timeStep);
      }
      t2 = performance.integrateVelocities;
      t3 = J.$sub$n(J.$mul$n(this._getTime$0(), 0.001), preTime);
      if (typeof t3 !== "number")
        throw H.iae(t3);
      performance.integrateVelocities = t2 + t3;
      preTime = J.$mul$n(this._getTime$0(), 0.001);
      limit = arbiters.length;
      for (i = 0; i < limit; ++i) {
        if (i >= arbiters.length)
          throw H.ioore(arbiters, i);
        arbiters[i].applyCachedImpulses$0();
      }
      t2 = performance.warmstartContacts;
      t3 = J.$sub$n(J.$mul$n(this._getTime$0(), 0.001), preTime);
      if (typeof t3 !== "number")
        throw H.iae(t3);
      performance.warmstartContacts = t2 + t3;
      preTime = J.$mul$n(this._getTime$0(), 0.001);
      limit = constraints.length;
      for (i = 0; i < limit; ++i)
        constraints[i].applyCachedImpulses$0();
      t2 = performance.warmstartConstraints;
      t3 = J.$sub$n(J.$mul$n(this._getTime$0(), 0.001), preTime);
      if (typeof t3 !== "number")
        throw H.iae(t3);
      performance.warmstartConstraints = t2 + t3;
      preTime = J.$mul$n(this._getTime$0(), 0.001);
      for (i = 0; limit = arbiters.length, i < 10; ++i) {
        for (j = 0; j < limit; ++j) {
          if (j >= arbiters.length)
            throw H.ioore(arbiters, j);
          arbiters[j].computeAndApplyImpulses$0();
        }
        limit = constraints.length;
        for (j = 0; j < limit; ++j)
          constraints[j].computeAndApplyImpulses$0();
      }
      for (i = 0; i < 3; ++i)
        for (j = 0; j < limit; ++j) {
          if (j >= arbiters.length)
            throw H.ioore(arbiters, j);
          arbiters[j].computeAndApplyBiasImpulses$0();
        }
      t2 = performance.physicsIterations;
      t3 = J.$sub$n(J.$mul$n(this._getTime$0(), 0.001), preTime);
      if (typeof t3 !== "number")
        throw H.iae(t3);
      performance.physicsIterations = t2 + t3;
      unfrozen = this._persistantObjectsList2;
      preTime = J.$mul$n(this._getTime$0(), 0.001);
      limit = rigidBodies.length;
      timeStepSq = t1.$mul(timeStep, timeStep);
      for (t2 = J.getInterceptor$asx(unfrozen), i = 0, numUnfrozen = 0, radius = null, xform0 = null, xform1 = null; i < limit; ++i) {
        if (i >= rigidBodies.length)
          throw H.ioore(rigidBodies, i);
        body = rigidBodies[i];
        body._applyBiasVelocities$1(timeStep);
        xform00 = body._transform;
        body._integratePositionWithVelocities$4(body._startTransform, xform00, timeStep, 0);
        if (typeof timeStep !== "number")
          throw H.iae(timeStep);
        if (!body._isActiveVelocity$2(0.35 / timeStep, 0.25 / timeStep)) {
          body._sweepFrozen = true;
          body._bullet = false;
          continue;
        }
        xform1 = body._endTransform;
        t3 = xform1.storage;
        t4 = xform00.storage;
        t3[0] = t4[0];
        t3[1] = t4[1];
        t3[2] = t4[2];
        t3[3] = t4[3];
        t3[4] = t4[4];
        t3[5] = t4[5];
        t3[6] = t4[6];
        t3[7] = t4[7];
        t3[8] = t4[8];
        t3[9] = t4[9];
        t3[10] = t4[10];
        t3[11] = t4[11];
        t4 = body._shape._radius;
        if (typeof t4 !== "number")
          throw t4.$mul();
        radius = t4 * 0.75;
        t4 = body._velocity.storage;
        t3 = t4[0];
        t5 = t4[1];
        t6 = t4[2];
        if (typeof timeStepSq !== "number")
          throw H.iae(timeStepSq);
        t7 = t4[3];
        t8 = t4[4];
        t4 = t4[5];
        body._bullet = (t3 * t3 + t5 * t5 + t6 * t6) * timeStepSq > radius * radius || (t7 * t7 + t8 * t8 + t4 * t4) * timeStepSq > 0.5;
        extents = body._extents;
        body._calculateSweptExtents$1(extents);
        dynamicMap.update$2(dynamicMap, body, extents);
        body._sweepFrozen = false;
        numUnfrozen0 = numUnfrozen + 1;
        t2.set$length(unfrozen, numUnfrozen0);
        if (numUnfrozen >= unfrozen.length)
          throw H.ioore(unfrozen, numUnfrozen);
        unfrozen[numUnfrozen] = body;
        xform0 = xform00;
        numUnfrozen = numUnfrozen0;
      }
      limit = kinematics.length;
      for (i = 0; i < limit; ++i) {
        if (i >= kinematics.length)
          throw H.ioore(kinematics, i);
        body = kinematics[i];
        t2 = body._transform;
        t3 = body._startTransform;
        t2.copyInto$1(t3);
        body._integratePositionWithVelocities$4(t3, t2, timeStep, 0);
        extents = body._extents;
        body._calculateSweptExtents$1(extents);
        dynamicMap.update$2(dynamicMap, body, extents);
      }
      t2 = performance.integratePositions;
      t3 = J.$sub$n(J.$mul$n(this._getTime$0(), 0.001), preTime);
      if (typeof t3 !== "number")
        throw H.iae(t3);
      performance.integratePositions = t2 + t3;
      preTime = J.$mul$n(this._getTime$0(), 0.001);
      if (staticMap.needsRebuild === true)
        staticMap.rebuild$0();
      else if (staticMap.needsRebound === true)
        staticMap.rebound$0();
      if (dynamicMap.needsRebuild === true)
        dynamicMap.rebuild$0();
      else if (dynamicMap.needsRebound === true)
        dynamicMap.rebound$0();
      events = this._persistantTOIEventList;
      numDynDyn = dynamicMap.getOverlappingPairs$2(objects, 0);
      for (i = 0, numEvents = 0, toi = null; i < numDynDyn; i += 2) {
        t2 = objects.length;
        if (0 >= t2)
          throw H.ioore(objects, 0);
        objectA = objects[0];
        if (1 >= t2)
          throw H.ioore(objects, 1);
        objectB = objects[1];
        C.JSArray_methods.removeRange$2(objects, 0, 2);
        if (objectA._bullet || objectA._kinematic || objectB._bullet || objectB._kinematic)
          t2 = objectA._sweepFrozen && objectB._sweepFrozen || this._filtered$2(objectA, objectB);
        else
          t2 = true;
        if (t2)
          continue;
        t2 = objectA._kinematic;
        if (t2 || objectB._kinematic)
          numEvents = t2 ? this.performStaticTOIBase$6(0.03, timeStep, events, numEvents, objectB, objectA) : this.performStaticTOIBase$6(0.03, timeStep, events, numEvents, objectA, objectB);
        else {
          if ($.get$WebGLPhysicsTOIEvent_eventPool().length === 0)
            toi = N.WebGLPhysicsTOIEvent$();
          else {
            t2 = $.get$WebGLPhysicsTOIEvent_eventPool();
            if (0 >= t2.length)
              throw H.ioore(t2, 0);
            toi = t2.pop();
          }
          toi.objectA = objectA;
          toi.objectB = objectB;
          toi.shapeA = objectA._shape;
          toi.shapeB = objectB._shape;
          this._dynamicSweep$4(toi, timeStep, 0, 0.03);
          toi.frozenA = objectA._sweepFrozen;
          toi.frozenB = objectB._sweepFrozen;
          events.push(null);
          if (numEvents < 0 || numEvents >= events.length)
            throw H.ioore(events, numEvents);
          events[numEvents] = toi;
          ++numEvents;
        }
      }
      for (i = 0; i < numUnfrozen; ++i) {
        if (i >= unfrozen.length)
          throw H.ioore(unfrozen, i);
        objectA = unfrozen[i];
        numPairs = staticMap.getOverlappingNodes$3(objectA._extents, objects, 0);
        for (j = 0; j < numPairs; ++j) {
          if (j >= objects.length)
            throw H.ioore(objects, j);
          objectB = objects[j];
          objects[j] = null;
          if (this._filtered$2(objectA, objectB))
            continue;
          numEvents = this.performStaticTOIBase$6(0.03, timeStep, events, numEvents, objectA, objectB);
        }
      }
      curTimeAlpha = 0;
      while (true) {
        if (typeof curTimeAlpha !== "number")
          throw curTimeAlpha.$lt();
        if (!(curTimeAlpha < 1 && numEvents > 0))
          break;
        for (i = 0, minTOI = null, minIndex = null; i < numEvents;) {
          t2 = events.length;
          if (i >= t2)
            throw H.ioore(events, i);
          toi = events[i];
          objectA = toi.objectA;
          objectB = toi.objectB;
          t3 = objectA._sweepFrozen;
          if (t3 && objectB._sweepFrozen) {
            --numEvents;
            if (i !== numEvents) {
              if (numEvents < 0 || numEvents >= t2)
                throw H.ioore(events, numEvents);
              events[i] = events[numEvents];
              events[numEvents] = null;
            }
            N.WebGLPhysicsTOIEvent_deallocate(toi);
            continue;
          }
          if (toi.frozenA !== t3 || toi.frozenB !== objectB._sweepFrozen) {
            toi.frozenA = t3;
            toi.frozenB = objectB._sweepFrozen;
            if (toi.frozenA === true) {
              toi.objectA = objectB;
              toi.objectB = objectA;
              toi.shapeA = objectB._shape;
              toi.shapeB = objectA._shape;
              toi.frozenA = false;
              toi.frozenB = true;
            }
            this._staticSweep$4(toi, timeStep, curTimeAlpha, 0.03);
            if (toi.toi == null) {
              --numEvents;
              if (i !== numEvents) {
                t2 = events.length;
                if (numEvents < 0 || numEvents >= t2)
                  throw H.ioore(events, numEvents);
                t3 = events[numEvents];
                if (i >= t2)
                  throw H.ioore(events, i);
                events[i] = t3;
                events[numEvents] = null;
              }
              N.WebGLPhysicsTOIEvent_deallocate(toi);
              continue;
            }
          }
          t2 = toi.toi;
          if (t2 != null)
            if (minTOI != null) {
              t3 = minTOI.toi;
              if (typeof t2 !== "number")
                throw t2.$lt();
              if (typeof t3 !== "number")
                throw H.iae(t3);
              t3 = t2 < t3;
              t2 = t3;
            } else
              t2 = true;
          else
            t2 = false;
          if (t2) {
            minIndex = i;
            minTOI = toi;
          }
          ++i;
        }
        if (minTOI == null)
          break;
        --numEvents;
        if (minIndex !== numEvents) {
          t2 = events.length;
          if (numEvents < 0 || numEvents >= t2)
            throw H.ioore(events, numEvents);
          t3 = events[numEvents];
          if (minIndex >>> 0 !== minIndex || minIndex >= t2)
            throw H.ioore(events, minIndex);
          events[minIndex] = t3;
          events[numEvents] = null;
        }
        curTimeAlpha = minTOI.toi;
        objectA = minTOI.objectA;
        objectB = minTOI.objectB;
        if (!objectA._collisionObject) {
          if (!objectA._sweepFrozen) {
            t2 = t1.$mul(timeStep, curTimeAlpha);
            objectA._integratePositionWithVelocities$4(objectA._startTransform, objectA._transform, t2, 0);
            objectA._sweepFrozen = true;
          }
          if (objectA._permitSleep === true && objectA._active !== true)
            this._wakeBody$1(objectA);
        }
        if (!objectB._collisionObject) {
          if (!objectB._sweepFrozen) {
            t2 = t1.$mul(timeStep, curTimeAlpha);
            objectB._integratePositionWithVelocities$4(objectB._startTransform, objectB._transform, t2, 0);
            objectB._sweepFrozen = true;
          }
          if (objectB._permitSleep === true && objectB._active !== true)
            this._wakeBody$1(objectB);
        }
        t2 = objectA._id;
        t3 = objectB._id;
        if (typeof t2 !== "number")
          throw t2.$gt();
        if (typeof t3 !== "number")
          throw H.iae(t3);
        if (t2 > t3) {
          tmpv = minTOI.closestA;
          minTOI.closestA = minTOI.closestB;
          minTOI.closestB = tmpv;
          t2 = minTOI.axis.storage;
          t2[0] = -t2[0];
          t2[1] = -t2[1];
          t2[2] = -t2[2];
          t0 = objectB;
          objectB = objectA;
          objectA = t0;
        }
        shapeA = objectA.get$shape(objectA);
        shapeB = objectB.get$shape(objectB);
        arbitersA = objectA._arbiters;
        arbitersB = objectB._arbiters;
        arbs = arbitersA.length <= arbitersB.length ? arbitersA : arbitersB;
        numArbiters = arbs.length;
        for (i = 0; arb = null, i < numArbiters; ++i) {
          carb = arbs[i];
          if (carb.shapeA === shapeA)
            if (carb.shapeB === shapeB) {
              t2 = carb.objectA;
              if (t2 == null ? objectA == null : t2 === objectA) {
                t2 = carb.objectB;
                t2 = t2 == null ? objectB == null : t2 === objectB;
              } else
                t2 = false;
            } else
              t2 = false;
          else
            t2 = false;
          if (t2) {
            arb = carb;
            break;
          }
        }
        fresh = arb == null;
        if (fresh)
          arb = N.WebGLPhysicsArbiter_allocate(shapeA, shapeB, objectA, objectB);
        arb.insertContact$5(minTOI.closestA, minTOI.closestB, minTOI.axis, minTOI.distance, minTOI.concave);
        if (fresh) {
          arbiters.push(arb);
          arb._active = true;
          arbitersA.push(arb);
          arbitersB.push(arb);
        }
        if (!(objectA._kinematic && objectA._active === true))
          t2 = objectB._kinematic && objectB._active === true;
        else
          t2 = true;
        if (!t2)
          arb.skipDiscreteCollisions = true;
        N.WebGLPhysicsTOIEvent_deallocate(minTOI);
      }
      for (; numEvents > 0;) {
        --numEvents;
        if (numEvents >= events.length)
          throw H.ioore(events, numEvents);
        N.WebGLPhysicsTOIEvent_deallocate(events[numEvents]);
        if (numEvents >= events.length)
          throw H.ioore(events, numEvents);
        events[numEvents] = null;
      }
      for (; numUnfrozen > 0;) {
        --numUnfrozen;
        if (numUnfrozen >= unfrozen.length)
          throw H.ioore(unfrozen, numUnfrozen);
        objectA = unfrozen[numUnfrozen];
        unfrozen[numUnfrozen] = null;
        if (!objectA._sweepFrozen)
          objectA._integratePositionWithVelocities$4(objectA._startTransform, objectA._transform, timeStep, 0);
      }
      t2 = performance.continuous;
      t3 = J.$sub$n(J.$mul$n(this._getTime$0(), 0.001), preTime);
      if (typeof t3 !== "number")
        throw H.iae(t3);
      performance.continuous = t2 + t3;
    }
    limit = kinematics.length;
    for (i = 0; i < limit; ++i) {
      if (i >= kinematics.length)
        throw H.ioore(kinematics, i);
      body = kinematics[i];
      t1 = body._newTransform;
      t1.copyInto$1(body._transform);
      t1.copyInto$1(body._prevTransform);
    }
    this._updateContactCallbacks$0();
    this._midStep = false;
  },
  _contactPairTest$3: function(cache, xformA, xformB) {
    var axis, shapeA, shapeB, supportA, supportB, t1, t2, t3, t4, otherXForm, planeXForm, otherShape, planeShape, A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, n0, n1, n2, nd, w0, w1, w2, B9, B10, B11, c0, c1, c2, dot1, c00, c10, c20, dot2, seperation, rad, prad, a0, a1, a2, rsep, p0, p1, p2, gjk, distance, axis0, axis1, axis2, radiusA, radiusB;
    axis = cache.axis;
    shapeA = cache.shapeA;
    shapeB = cache.shapeB;
    supportA = cache.closestA;
    supportB = cache.closestB;
    if (this._contactGJK == null) {
      t1 = new Float32Array(36);
      t1.$dartCachedLength = t1.length;
      t2 = new Float32Array(6);
      t2.$dartCachedLength = t2.length;
      t3 = new Float32Array(4);
      t3.$dartCachedLength = t3.length;
      t4 = new Float32Array(4);
      t4.$dartCachedLength = t4.length;
      this._contactGJK = new N.WebGLGJKContactSolver(t1, 0, t2, t3, t4);
      this._contactEPA = N.WebGLContactEPA$();
    }
    t1 = J.getInterceptor(shapeA);
    t1 = typeof shapeA === "object" && shapeA !== null && !!t1.$isWebGLPhysicsPlaneShape;
    if (!t1) {
      t2 = J.getInterceptor(shapeB);
      t2 = typeof shapeB === "object" && shapeB !== null && !!t2.$isWebGLPhysicsPlaneShape;
    } else
      t2 = true;
    if (t2) {
      if (t1) {
        otherXForm = xformB;
        planeXForm = xformA;
        otherShape = shapeB;
        planeShape = shapeA;
      } else {
        otherXForm = xformA;
        planeXForm = xformB;
        otherShape = shapeA;
        planeShape = shapeB;
      }
      t2 = planeXForm.storage;
      A0 = t2[0];
      A1 = t2[1];
      A2 = t2[2];
      A3 = t2[3];
      A4 = t2[4];
      A5 = t2[5];
      A6 = t2[6];
      A7 = t2[7];
      A8 = t2[8];
      A9 = t2[9];
      A10 = t2[10];
      A11 = t2[11];
      t2 = planeShape.get$normal().storage;
      n0 = t2[0];
      n1 = t2[1];
      n2 = t2[2];
      nd = planeShape.distance;
      w0 = n0 * A0 + n1 * A3 + n2 * A6;
      w1 = n0 * A1 + n1 * A4 + n2 * A7;
      w2 = n0 * A2 + n1 * A5 + n2 * A8;
      t2 = otherXForm.storage;
      A0 = t2[0];
      A1 = t2[1];
      A2 = t2[2];
      A3 = t2[3];
      A4 = t2[4];
      A5 = t2[5];
      A6 = t2[6];
      A7 = t2[7];
      A8 = t2[8];
      B9 = t2[9];
      B10 = t2[10];
      B11 = t2[11];
      n0 = A0 * w0 + A1 * w1 + A2 * w2;
      n1 = A3 * w0 + A4 * w1 + A5 * w2;
      n2 = A6 * w0 + A7 * w1 + A8 * w2;
      if (typeof nd !== "number")
        throw nd.$add();
      nd += w0 * (A9 - B9) + w1 * (A10 - B10) + w2 * (A11 - B11);
      t2 = axis.storage;
      t2[0] = n0;
      t2[1] = n1;
      t2[2] = n2;
      otherShape.localSupportWithoutMargin$2(axis, supportA);
      t2[0] = -n0;
      t2[1] = -n1;
      t2[2] = -n2;
      otherShape.localSupportWithoutMargin$2(axis, supportB);
      t3 = supportA.storage;
      c0 = t3[0];
      c1 = t3[1];
      c2 = t3[2];
      dot1 = c0 * n0 + c1 * n1 + c2 * n2 - nd;
      t4 = supportB.storage;
      c00 = t4[0];
      c10 = t4[1];
      c20 = t4[2];
      dot2 = c00 * n0 + c10 * n1 + c20 * n2 - nd;
      if (dot1 * dot1 < dot2 * dot2)
        seperation = dot1;
      else {
        c2 = c20;
        c1 = c10;
        c0 = c00;
        seperation = dot2;
      }
      if (seperation < 0 !== dot1 * dot2 < 0) {
        seperation = -seperation;
        w0 = -w0;
        w1 = -w1;
        w2 = -w2;
      }
      rad = otherShape.get$_collisionRadius();
      prad = planeShape._collisionRadius;
      a0 = A0 * c0 + A3 * c1 + A6 * c2 + B9;
      a1 = A1 * c0 + A4 * c1 + A7 * c2 + B10;
      a2 = A2 * c0 + A5 * c1 + A8 * c2 + B11;
      if (typeof prad !== "number")
        throw prad.$sub();
      rsep = prad - seperation;
      p0 = a0 + w0 * rsep;
      p1 = a1 + w1 * rsep;
      p2 = a2 + w2 * rsep;
      if (typeof rad !== "number")
        throw H.iae(rad);
      a0 -= w0 * rad;
      a1 -= w1 * rad;
      a2 -= w2 * rad;
      if (t1) {
        t2[0] = -w0;
        t2[1] = -w1;
        t2[2] = -w2;
        t3[0] = p0;
        t3[1] = p1;
        t3[2] = p2;
        t4[0] = a0;
        t4[1] = a1;
        t4[2] = a2;
      } else {
        t2[0] = w0;
        t2[1] = w1;
        t2[2] = w2;
        t3[0] = a0;
        t3[1] = a1;
        t3[2] = a2;
        t4[0] = p0;
        t4[1] = p1;
        t4[2] = p2;
      }
      return seperation - (rad + prad);
    } else {
      gjk = this._contactGJK;
      distance = gjk.evaluate$3(gjk, cache, xformA, xformB);
      if (distance == null) {
        t1 = this._contactEPA;
        distance = t1.evaluate$4(t1, gjk.simplex, cache, xformA, xformB);
      }
      if (distance != null) {
        t1 = axis.storage;
        axis0 = t1[0];
        axis1 = t1[1];
        axis2 = t1[2];
        radiusA = shapeA.get$_collisionRadius();
        radiusB = shapeB.get$_collisionRadius();
        t1 = supportA.storage;
        t2 = t1[0];
        if (typeof radiusA !== "number")
          throw H.iae(radiusA);
        t1[0] = t2 - axis0 * radiusA;
        t1[1] = t1[1] - axis1 * radiusA;
        t1[2] = t1[2] - axis2 * radiusA;
        t1 = supportB.storage;
        t2 = t1[0];
        if (typeof radiusB !== "number")
          throw H.iae(radiusB);
        t1[0] = t2 + axis0 * radiusB;
        t1[1] = t1[1] + axis1 * radiusB;
        t1[2] = t1[2] + axis2 * radiusB;
        if (typeof distance !== "number")
          throw distance.$sub();
        return distance - radiusA - radiusB;
      } else
        return;
    }
  },
  _addBody$1: function(body) {
    var t1;
    if (body._world != null)
      return false;
    body._world = this;
    if (body._collisionObject && !body._kinematic) {
      this._collisionObjects.push(body);
      this._syncBody$1(body);
      return true;
    }
    if (body._kinematic)
      this._kinematicBodies.push(body);
    else
      this._rigidBodies.push(body);
    t1 = body._active;
    body._previouslyActive = true;
    body._active = false;
    body._islandRoot = body;
    body._islandRank = 0;
    if (t1 === true)
      this._wakeBody$1(body);
    else
      this._syncBody$1(body);
    return true;
  },
  _updateContactCallbacks$0: function() {
    var contactCallbackObjects, numObjects, publicContacts, callbackContacts, arbiter, objectA, objectB, contactCallbacksA, contactCallbacksB, n, object, arbiters, numArbiters, t1, t2, i, j, contacts, numContacts, publicContact, contactCallbackRemovedArbiters;
    contactCallbackObjects = this._contactCallbackObjects;
    numObjects = contactCallbackObjects.length;
    publicContacts = $.get$WebGLPhysicsContact__publicContacts();
    callbackContacts = $.get$WebGLPhysicsContact__callbackContacts();
    for (arbiter = null, objectA = null, objectB = null, contactCallbacksA = null, contactCallbacksB = null, n = 0; n < numObjects;) {
      if (n >= contactCallbackObjects.length)
        throw H.ioore(contactCallbackObjects, n);
      object = contactCallbackObjects[n];
      arbiters = object.get$_arbiters();
      numArbiters = arbiters.length;
      if (0 === numArbiters) {
        object._contactCallbacks.added = false;
        --numObjects;
        if (n < numObjects) {
          t1 = contactCallbackObjects.length;
          if (numObjects >= t1)
            throw H.ioore(contactCallbackObjects, numObjects);
          t2 = contactCallbackObjects[numObjects];
          if (n >= t1)
            throw H.ioore(contactCallbackObjects, n);
          contactCallbackObjects[n] = t2;
        }
        C.JSArray_methods.set$length(contactCallbackObjects, numObjects);
      } else {
        for (i = 0, j = null; i < numArbiters; ++i) {
          if (i >= arbiters.length)
            throw H.ioore(arbiters, i);
          arbiter = arbiters[i];
          if (0 !== arbiter.contactFlags) {
            contacts = arbiter.contacts;
            numContacts = contacts.length;
            for (t1 = 3 < numContacts; t1;) {
              t2 = new Float32Array(52);
              t2.$dartCachedLength = t2.length;
              if (3 >= 3)
                throw H.ioore(publicContacts, 3);
              publicContacts[3] = new N.WebGLPhysicsContact(t2);
            }
            C.JSArray_methods.set$length(callbackContacts, numContacts);
            for (t1 = callbackContacts.length, j = 0; j < numContacts; ++j) {
              if (j >= contacts.length)
                throw H.ioore(contacts, j);
              publicContact = contacts[j];
              if (j >= t1)
                throw H.ioore(callbackContacts, j);
              callbackContacts[j] = publicContact;
            }
            objectA = arbiter.objectA;
            objectB = arbiter.objectB;
            contactCallbacksA = objectA._contactCallbacks;
            contactCallbacksB = objectB._contactCallbacks;
            t1 = arbiter.contactFlags;
            if (typeof t1 !== "number")
              throw t1.$and();
            arbiter.contactFlags = 0;
            for (j = 0; j < numContacts; ++j) {
              if (j >= contacts.length)
                throw H.ioore(contacts, j);
              contacts[j]._storage[51] = 0;
            }
          }
        }
        ++n;
      }
    }
    contactCallbackRemovedArbiters = this._contactCallbackRemovedArbiters;
    numObjects = contactCallbackRemovedArbiters.length;
    C.JSArray_methods.set$length(callbackContacts, 0);
    for (n = 0; n < numObjects; ++n) {
      if (n >= contactCallbackRemovedArbiters.length)
        throw H.ioore(contactCallbackRemovedArbiters, n);
      arbiter = contactCallbackRemovedArbiters[n];
      objectA = arbiter.objectA;
      objectB = arbiter.objectB;
      contactCallbacksA = objectA._contactCallbacks;
      contactCallbacksB = objectB._contactCallbacks;
      if (null != contactCallbacksA)
        contactCallbacksA.onRemovedContacts;
      if (null != contactCallbacksB)
        contactCallbacksB.onRemovedContacts;
      N.WebGLPhysicsArbiter_deallocate(arbiter);
    }
    J.set$length$asx(contactCallbackRemovedArbiters, 0);
  },
  WebGLPhysicsWorld$8$fixedTimeStep$gravity$maxGiveUpTimeStep$maxSubSteps$variableMaxStep$variableMinStep$variableTimeSteps: function(_getTime, fixedTimeStep, gravity, maxGiveUpTimeStep, maxSubSteps, variableMaxStep, variableMinStep, variableTimeSteps) {
    var t1 = new Float32Array(3);
    t1.$dartCachedLength = t1.length;
    gravity = new T.Vector3(t1);
    gravity.setValues$3(0, -10, 0);
    this._gravity = gravity;
    this._maxSubSteps = maxSubSteps;
    this._fixedTimeStep = fixedTimeStep;
    this._variableMinStep = variableMinStep;
    this._variableMaxStep = variableMaxStep;
    this._variableStep = variableTimeSteps;
    this._maxGiveUpTimeStep = maxGiveUpTimeStep;
    this._staticSpatialMap = N.AabbTree$(true);
    this._dynamicSpatialMap = N.AabbTree$(false);
    this._collisionObjects = [];
    this._rigidBodies = [];
    this._constraints = [];
    this._kinematicBodies = [];
    this._activeArbiters = [];
    this._activeBodies = [];
    this._activeKinematics = [];
    this._activeConstraints = [];
    this._persistantObjectsList = [];
    this._persistantObjectsList2 = [];
    this._persistantTrianglesList = [];
    this._persistantTOIEventList = [];
    this._timeStamp = 0;
    this._performanceData = new N.WebGLPhysicsPerformance(0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    this._syncExtents = T.Aabb3$();
    this._contactCallbackObjects = [];
    this._contactCallbackRemovedArbiters = [];
  },
  static: {
"": "WebGLPhysicsWorld_version",
WebGLPhysicsWorld$: function(_getTime, fixedTimeStep, gravity, maxGiveUpTimeStep, maxSubSteps, variableMaxStep, variableMinStep, variableTimeSteps) {
  var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15;
  t1 = new Float32Array(3);
  t1.$dartCachedLength = t1.length;
  t2 = new Float32Array(3);
  t2.$dartCachedLength = t2.length;
  t3 = new Float32Array(3);
  t3.$dartCachedLength = t3.length;
  t4 = new Float32Array(12);
  t4.$dartCachedLength = t4.length;
  t5 = new Float32Array(12);
  t5.$dartCachedLength = t5.length;
  t6 = new Float32Array(12);
  t6.$dartCachedLength = t6.length;
  t7 = new Float32Array(12);
  t7.$dartCachedLength = t7.length;
  t8 = N.WebGLPhysicsTriangleShape_allocate();
  t9 = new Float32Array(3);
  t9.$dartCachedLength = t9.length;
  t10 = T.Aabb3$();
  t11 = T.Aabb3$();
  t12 = T.Aabb3$();
  t13 = N.WebGLPhysicsNarrowCache$();
  t14 = new Float32Array(12);
  t14.$dartCachedLength = t14.length;
  t15 = new Float32Array(12);
  t15.$dartCachedLength = t15.length;
  t15 = new N.WebGLPhysicsWorld(null, null, _getTime, null, null, null, null, null, null, null, null, null, null, null, null, null, new T.Vector3(t1), new T.Vector3(t2), new T.Vector3(t3), false, null, null, null, new N.FakeBody(null, new N.Matrix43(t4), new N.Matrix43(t5)), null, null, new N.FakeBody(null, new N.Matrix43(t6), new N.Matrix43(t7)), null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, t8, new T.Vector3(t9), t10, t11, t12, t13, new N.FakeBody(null, new N.Matrix43(t14), new N.Matrix43(t15)), N.Matrix43$identity(), N.Matrix43$identity(), null, null, null, null);
  t15.WebGLPhysicsWorld$8$fixedTimeStep$gravity$maxGiveUpTimeStep$maxSubSteps$variableMaxStep$variableMinStep$variableTimeSteps(_getTime, fixedTimeStep, gravity, maxGiveUpTimeStep, maxSubSteps, variableMaxStep, variableMinStep, variableTimeSteps);
  return t15;
}}

},

WebGLPhysicsWorld__computeSleeping__find: {"": "Closure;",
  call$1: function(x) {
    var t1, root, stack, next;
    t1 = x.get$_islandRoot();
    if (x == null ? t1 == null : x === t1)
      return x;
    for (root = x, stack = null; t1 = root.get$_islandRoot(), root == null ? t1 != null : root !== t1; stack = root, root = next) {
      next = root._islandRoot;
      root._islandRoot = stack;
    }
    for (; stack != null; stack = next) {
      next = stack.get$_islandRoot();
      stack._islandRoot = root;
    }
    return root;
  },
  $is_args1: true
},

WebGLPhysicsWorld__computeSleeping__unify: {"": "Closure;_find_0",
  call$2: function(x, y) {
    var t1, xr, yr;
    t1 = this._find_0;
    xr = t1.call$1(x);
    yr = t1.call$1(y);
    if (!J.$eq(xr, yr))
      if (xr.get$_islandRank() < yr.get$_islandRank())
        xr._islandRoot = yr;
      else if (xr._islandRank > yr._islandRank)
        yr._islandRoot = xr;
      else {
        yr._islandRoot = xr;
        xr._islandRank = xr._islandRank + 1;
      }
  },
  $is_args2: true
}}],
["game_loop_common", "package:game_loop/game_loop_common.dart", , B, {
GameLoop: {"": "Object;",
  get$dt: function() {
    return this.updateTimeStep;
  },
  processTimers$0: function() {
    var t1, _timersLength, t2, i, t3;
    t1 = this._timers;
    _timersLength = t1.length;
    for (t2 = this.updateTimeStep, i = 0; i < _timersLength; ++i) {
      t3 = t1[i];
      t3._update$1(t3, t2);
    }
    for (i = _timersLength - 1; i >= 0; --i)
      t1[i].get$_isDead();
  },
  onUpdate$1: function(arg0) {
    return this.onUpdate.call$1(arg0);
  }
},

DigitalButton: {"": "Object;buttonId,framePressed?,frameReleased?,timePressed,timeReleased",
  get$down: function() {
    return this.framePressed > this.frameReleased;
  }
},

DigitalButtonEvent: {"": "Object;down<,frame,buttonId,time",
  toString$0: function(_) {
    return "Button: " + H.S(this.buttonId) + " DOWN: " + this.down + " [" + this.frame + "@" + H.S(this.time) + "]";
  }
},

DigitalInput: {"": "Object;",
  digitalButtonEvent$1: function($event) {
    var t1, button;
    t1 = this.buttons;
    button = t1.$index(t1, $event.buttonId);
    if (button == null)
      return;
    if ($event.down) {
      if (!button.get$down()) {
        button.set$framePressed($event.frame);
        button.timePressed = $event.time;
      }
    } else {
      button.set$frameReleased($event.frame);
      button.timeReleased = $event.time;
    }
  },
  DigitalInput$2: function(gameLoop, buttonIds) {
    var t1, t2, buttonId;
    for (t1 = new H.ListIterator(buttonIds, buttonIds.length, 0, null), H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(buttonIds, "JSArray", 0)]), t2 = this.buttons; t1.moveNext$0();) {
      buttonId = t1._current;
      t2.$indexSet(t2, buttonId, new B.DigitalButton(buttonId, 0, 0, 0, 0));
    }
  }
},

GameLoopTimer: {"": "Object;"}}],
["game_loop_html", "package:game_loop/game_loop_html.dart", , G, {
GameLoopGamepad: {"": "Object;gameLoop,buttons,sticks", static: {
"": "GameLoopGamepad_BUTTON0,GameLoopGamepad_BUTTON1,GameLoopGamepad_BUTTON2,GameLoopGamepad_BUTTON3,GameLoopGamepad_BUTTON4,GameLoopGamepad_BUTTON5,GameLoopGamepad_BUTTON6",
}
},

GameLoopHtml: {"": "GameLoop;element,_frameCounter,_initialized,_interrupt,_previousFrameTime,_frameTime,_resizePending,_nextResize,maxAccumulatedTime,_accumulatedTime,_gameTime,_renderInterpolationFactor,resizeLimit,_pointerLock,_keyboard,_mouse,_gamepad0,_lastMousePos,_touchSet,_rafId,_touchEvents,_keyboardEvents,_mouseEvents,onRender,onResize,onFullscreenChange,onPointerLockChange,onTouchStart,onTouchEnd,updateTimeStep,game_loop_common$GameLoop$maxAccumulatedTime,_timers,onUpdate",
  _processKeyboardEvents$0: function() {
    var t1, t2, keyboardEvent, t3, t4, t5, buttonId;
    for (t1 = this._keyboardEvents, t2 = new H.ListIterator(t1, t1.length, 0, null), H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "JSArray", 0)]); t2.moveNext$0();) {
      keyboardEvent = t2._current;
      t3 = J.getInterceptor$x(keyboardEvent);
      t4 = t3.get$type(keyboardEvent);
      t5 = t3.get$timeStamp(keyboardEvent);
      if (typeof t5 !== "number")
        throw t5.$div();
      buttonId = t3.get$keyCode(keyboardEvent);
      t3 = this._frameCounter;
      this._keyboard.digitalButtonEvent$1(new B.DigitalButtonEvent(t4 === "keydown", t3, buttonId, t5 / 1000));
    }
    C.JSArray_methods.set$length(t1, 0);
  },
  _processMouseEvents$0: function() {
    var docElem, t1, box, t2, t3, t4, t5, canvasX, canvasY, mouseEvent, t6, time, mouseX, mouseY, x, y, clampX, withinCanvas, clampY, dx, dy, t7, buttonId;
    this._mouse._resetAccumulators$0();
    docElem = document.documentElement;
    t1 = this.element;
    box = t1.getBoundingClientRect();
    t2 = J.getInterceptor$x(box);
    t3 = t2.get$left(box);
    t4 = window.pageXOffset;
    if (typeof t3 !== "number")
      throw t3.$add();
    if (typeof t4 !== "number")
      throw H.iae(t4);
    t5 = docElem.clientLeft;
    if (typeof t5 !== "number")
      throw H.iae(t5);
    canvasX = C.JSNumber_methods.toInt$0(Math.floor(t3 + t4 - t5));
    t2 = t2.get$top(box);
    t5 = window.pageYOffset;
    if (typeof t2 !== "number")
      throw t2.$add();
    if (typeof t5 !== "number")
      throw H.iae(t5);
    t4 = docElem.clientTop;
    if (typeof t4 !== "number")
      throw H.iae(t4);
    canvasY = C.JSNumber_methods.toInt$0(Math.floor(t2 + t5 - t4));
    for (t2 = this._mouseEvents, t3 = new H.ListIterator(t2, t2.length, 0, null), H.setRuntimeTypeInfo(t3, [H.getRuntimeTypeArgument(t2, "JSArray", 0)]); t3.moveNext$0();) {
      mouseEvent = t3._current;
      t4 = J.getInterceptor$x(mouseEvent);
      t5 = t4.get$type(mouseEvent);
      t6 = t4.get$timeStamp(mouseEvent);
      if (typeof t6 !== "number")
        throw t6.$div();
      time = t6 / 1000;
      if (t5 === "mousemove") {
        mouseX = t4.get$page(mouseEvent).x;
        t5 = new P.Point(mouseEvent.pageX, mouseEvent.pageY);
        t5.$builtinTypeInfo = [null];
        mouseY = t5.y;
        if (typeof mouseX !== "number")
          throw mouseX.$sub();
        x = mouseX - canvasX;
        if (typeof mouseY !== "number")
          throw mouseY.$sub();
        y = mouseY - canvasY;
        if (mouseX < canvasX) {
          clampX = 0;
          withinCanvas = false;
        } else {
          t5 = new P.Rectangle(t1.clientLeft, t1.clientTop, t1.clientWidth, t1.clientHeight);
          t5.$builtinTypeInfo = [null];
          t5 = t5.width;
          if (typeof t5 !== "number")
            throw H.iae(t5);
          if (mouseX > canvasX + t5) {
            t5 = new P.Rectangle(t1.clientLeft, t1.clientTop, t1.clientWidth, t1.clientHeight);
            t5.$builtinTypeInfo = [null];
            clampX = t5.width;
            withinCanvas = false;
          } else {
            clampX = x;
            withinCanvas = true;
          }
        }
        if (mouseY < canvasY) {
          clampY = 0;
          withinCanvas = false;
        } else {
          t5 = new P.Rectangle(t1.clientLeft, t1.clientTop, t1.clientWidth, t1.clientHeight);
          t5.$builtinTypeInfo = [null];
          t5 = t5.height;
          if (typeof t5 !== "number")
            throw H.iae(t5);
          if (mouseY > canvasY + t5) {
            t5 = new P.Rectangle(t1.clientLeft, t1.clientTop, t1.clientWidth, t1.clientHeight);
            t5.$builtinTypeInfo = [null];
            clampY = t5.height;
            withinCanvas = false;
          } else
            clampY = y;
        }
        t5 = this._pointerLock;
        t5.toString;
        t6 = document.webkitPointerLockElement;
        t5 = t5.gameLoop.element;
        if (t6 == null ? t5 == null : t6 === t5) {
          dx = t4.get$movement(mouseEvent).x;
          t5 = new P.Point(mouseEvent.webkitMovementX, mouseEvent.webkitMovementY);
          t5.$builtinTypeInfo = [null];
          dy = t5.y;
        } else {
          t5 = t4.get$client(mouseEvent).x;
          t6 = this._lastMousePos.x;
          if (typeof t5 !== "number")
            throw t5.$sub();
          if (typeof t6 !== "number")
            throw H.iae(t6);
          dx = t5 - t6;
          t6 = new P.Point(mouseEvent.clientX, mouseEvent.clientY);
          t6.$builtinTypeInfo = [null];
          t5 = t6.y;
          t6 = this._lastMousePos.y;
          if (typeof t5 !== "number")
            throw t5.$sub();
          if (typeof t6 !== "number")
            throw H.iae(t6);
          dy = t5 - t6;
          t6 = new P.Point(mouseEvent.clientX, mouseEvent.clientY);
          t6.$builtinTypeInfo = [null];
          this._lastMousePos = t6;
        }
        t4 = new P.Point(t4.get$_clientX(mouseEvent), mouseEvent.clientY);
        t4.$builtinTypeInfo = [null];
        this._lastMousePos = t4;
        t4 = this._frameCounter;
        this._mouse.gameLoopMouseEvent$1(new G.GameLoopMouseEvent(x, y, dx, dy, clampX, clampY, time, withinCanvas, t4));
      } else {
        t6 = this._mouse;
        if (t5 === "mousewheel") {
          H.interceptedTypeCast(mouseEvent, "$isWheelEvent");
          t4 = C.WheelEvent_methods.get$deltaX(mouseEvent);
          t5 = C.WheelEvent_methods.get$deltaY(mouseEvent);
          t7 = t6._wheelDx;
          if (typeof t4 !== "number")
            throw H.iae(t4);
          t6._wheelDx = t7 + t4;
          t4 = t6._wheelDy;
          if (typeof t5 !== "number")
            throw H.iae(t5);
          t6._wheelDy = t4 + t5;
        } else {
          buttonId = t4.get$button(mouseEvent);
          t6.digitalButtonEvent$1(new B.DigitalButtonEvent(t5 === "mousedown", this._frameCounter, buttonId, time));
        }
      }
    }
    C.JSArray_methods.set$length(t2, 0);
  },
  _processTouchEvents$0: function() {
    var t1, t2, touchEvent;
    for (t1 = this._touchEvents, t2 = new H.ListIterator(t1, t1.length, 0, null), H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "JSArray", 0)]); t2.moveNext$0();) {
      touchEvent = t2._current;
      switch (J.get$type$x(touchEvent)) {
        case 3:
          this._touchSet._start$1(touchEvent.get$event());
          break;
        case 2:
          this._touchSet._game_loop_html$_end$1(touchEvent.get$event());
          break;
        case 1:
          this._touchSet._move$1(touchEvent.get$event());
          break;
        default:
          throw H.wrapException(new P.StateError("Invalid _GameLoopTouchEven type."));
      }
    }
    C.JSArray_methods.set$length(t1, 0);
  },
  _requestAnimationFrame$1: function(_, _0) {
    var t1, t2;
    if (this._previousFrameTime == null) {
      this._frameTime = P.DateTime$_now().millisecondsSinceEpoch / 1000;
      this._previousFrameTime = this._frameTime;
      this._processKeyboardEvents$0();
      this._processMouseEvents$0();
      this._processTouchEvents$0();
      t1 = window;
      t2 = this.get$_requestAnimationFrame(this);
      C.Window_methods._ensureRequestAnimationFrame$0(t1);
      this._rafId = C.Window_methods._html$_requestAnimationFrame$1(t1, W._wrapZone(t2));
      return;
    }
    if (this._interrupt) {
      this._rafId = null;
      return;
    }
    t1 = window;
    t2 = this.get$_requestAnimationFrame(this);
    C.Window_methods._ensureRequestAnimationFrame$0(t1);
    this._rafId = C.Window_methods._html$_requestAnimationFrame$1(t1, W._wrapZone(t2));
    this._frameCounter = this._frameCounter + 1;
    this._previousFrameTime = this._frameTime;
    this._frameTime = P.DateTime$_now().millisecondsSinceEpoch / 1000;
    t2 = this._frameTime;
    t1 = this._previousFrameTime;
    if (typeof t1 !== "number")
      throw H.iae(t1);
    this._accumulatedTime = this._accumulatedTime + (t2 - t1);
    t1 = this.maxAccumulatedTime;
    if (this._accumulatedTime > t1)
      this._accumulatedTime = t1;
    this._processKeyboardEvents$0();
    this._processMouseEvents$0();
    this._processTouchEvents$0();
    for (t1 = this.updateTimeStep; this._accumulatedTime >= t1;) {
      this.processTimers$0();
      this._gameTime = this._gameTime + t1;
      if (this.onUpdate != null)
        this.onUpdate$1(this);
      this._accumulatedTime = this._accumulatedTime - t1;
    }
    if (this._resizePending)
      t2 = false;
    else
      t2 = false;
    if (t2) {
      this.onResize$1(this, this);
      this._nextResize = this._frameTime + this.resizeLimit;
      this._resizePending = false;
    }
    if (this.onRender != null) {
      this._renderInterpolationFactor = this._accumulatedTime / t1;
      this.onRender$1(this);
    }
  },
  get$_requestAnimationFrame: function(_receiver) {
    return new P.BoundClosure$i1(this, G.GameLoopHtml.prototype._requestAnimationFrame$1, _receiver, "_requestAnimationFrame$1");
  },
  _fullscreenChange$1: function(_) {
    return;
  },
  get$_fullscreenChange: function() {
    return new H.BoundClosure$1(this, G.GameLoopHtml.prototype._fullscreenChange$1, null, "_fullscreenChange$1");
  },
  _fullscreenError$1: function(_) {
    return;
  },
  get$_fullscreenError: function() {
    return new H.BoundClosure$1(this, G.GameLoopHtml.prototype._fullscreenError$1, null, "_fullscreenError$1");
  },
  _touchStartEvent$1: function($event) {
    this._touchEvents.push(new G._GameLoopTouchEvent($event, 3));
    J.preventDefault$0$x($event);
  },
  get$_touchStartEvent: function() {
    return new H.BoundClosure$1(this, G.GameLoopHtml.prototype._touchStartEvent$1, null, "_touchStartEvent$1");
  },
  _touchMoveEvent$1: function($event) {
    this._touchEvents.push(new G._GameLoopTouchEvent($event, 1));
    J.preventDefault$0$x($event);
  },
  get$_touchMoveEvent: function() {
    return new H.BoundClosure$1(this, G.GameLoopHtml.prototype._touchMoveEvent$1, null, "_touchMoveEvent$1");
  },
  _touchEndEvent$1: function($event) {
    this._touchEvents.push(new G._GameLoopTouchEvent($event, 2));
    J.preventDefault$0$x($event);
  },
  get$_touchEndEvent: function() {
    return new H.BoundClosure$1(this, G.GameLoopHtml.prototype._touchEndEvent$1, null, "_touchEndEvent$1");
  },
  _keyDown$1: function($event) {
    this._keyboardEvents.push($event);
  },
  get$_keyDown: function() {
    return new H.BoundClosure$1(this, G.GameLoopHtml.prototype._keyDown$1, null, "_keyDown$1");
  },
  _keyUp$1: function($event) {
    this._keyboardEvents.push($event);
  },
  get$_keyUp: function() {
    return new H.BoundClosure$1(this, G.GameLoopHtml.prototype._keyUp$1, null, "_keyUp$1");
  },
  _mouseDown$1: function($event) {
    this._mouseEvents.push($event);
  },
  get$_mouseDown: function() {
    return new H.BoundClosure$1(this, G.GameLoopHtml.prototype._mouseDown$1, null, "_mouseDown$1");
  },
  _mouseUp$1: function($event) {
    this._mouseEvents.push($event);
  },
  get$_mouseUp: function() {
    return new H.BoundClosure$1(this, G.GameLoopHtml.prototype._mouseUp$1, null, "_mouseUp$1");
  },
  _mouseMove$1: function($event) {
    this._mouseEvents.push($event);
  },
  get$_mouseMove: function() {
    return new H.BoundClosure$1(this, G.GameLoopHtml.prototype._mouseMove$1, null, "_mouseMove$1");
  },
  _mouseWheel$1: function($event) {
    this._mouseEvents.push($event);
    J.preventDefault$0$x($event);
  },
  get$_mouseWheel: function() {
    return new H.BoundClosure$1(this, G.GameLoopHtml.prototype._mouseWheel$1, null, "_mouseWheel$1");
  },
  _resize$1: function(_) {
    if (!this._resizePending)
      this._resizePending = true;
  },
  get$_resize: function() {
    return new H.BoundClosure$1(this, G.GameLoopHtml.prototype._resize$1, null, "_resize$1");
  },
  start$0: function(_) {
    var t1, t2, t3;
    if (!this._initialized) {
      t1 = C.EventStreamProvider_webkitfullscreenerror.forTarget$1(document);
      t2 = this.get$_fullscreenError();
      t2 = new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(t2), t1._useCapture);
      H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "_EventStream", 0)]);
      t2._tryResume$0();
      t2 = C.EventStreamProvider_webkitfullscreenchange.forTarget$1(document);
      t1 = this.get$_fullscreenChange();
      t1 = new W._EventStreamSubscription(0, t2._target, t2._eventType, W._wrapZone(t1), t2._useCapture);
      H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(t2, "_EventStream", 0)]);
      t1._tryResume$0();
      t1 = this.element;
      t1.toString;
      t2 = C.EventStreamProvider_touchstart.forElement$1(t1);
      t3 = this.get$_touchStartEvent();
      t3 = new W._EventStreamSubscription(0, t2._target, t2._eventType, W._wrapZone(t3), t2._useCapture);
      H.setRuntimeTypeInfo(t3, [H.getRuntimeTypeArgument(t2, "_EventStream", 0)]);
      t3._tryResume$0();
      t3 = C.EventStreamProvider_touchend.forElement$1(t1);
      t2 = this.get$_touchEndEvent();
      t2 = new W._EventStreamSubscription(0, t3._target, t3._eventType, W._wrapZone(t2), t3._useCapture);
      H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t3, "_EventStream", 0)]);
      t2._tryResume$0();
      t2 = C.EventStreamProvider_touchcancel.forElement$1(t1);
      t3 = this.get$_touchEndEvent();
      t3 = new W._EventStreamSubscription(0, t2._target, t2._eventType, W._wrapZone(t3), t2._useCapture);
      H.setRuntimeTypeInfo(t3, [H.getRuntimeTypeArgument(t2, "_EventStream", 0)]);
      t3._tryResume$0();
      t3 = C.EventStreamProvider_touchmove.forElement$1(t1);
      t2 = this.get$_touchMoveEvent();
      t2 = new W._EventStreamSubscription(0, t3._target, t3._eventType, W._wrapZone(t2), t3._useCapture);
      H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t3, "_EventStream", 0)]);
      t2._tryResume$0();
      t2 = C.EventStreamProvider_keydown.forTarget$1(window);
      t3 = this.get$_keyDown();
      t3 = new W._EventStreamSubscription(0, t2._target, t2._eventType, W._wrapZone(t3), t2._useCapture);
      H.setRuntimeTypeInfo(t3, [H.getRuntimeTypeArgument(t2, "_EventStream", 0)]);
      t3._tryResume$0();
      t3 = C.EventStreamProvider_keyup.forTarget$1(window);
      t2 = this.get$_keyUp();
      t2 = new W._EventStreamSubscription(0, t3._target, t3._eventType, W._wrapZone(t2), t3._useCapture);
      H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t3, "_EventStream", 0)]);
      t2._tryResume$0();
      t2 = C.EventStreamProvider_resize.forTarget$1(window);
      t3 = this.get$_resize();
      t3 = new W._EventStreamSubscription(0, t2._target, t2._eventType, W._wrapZone(t3), t2._useCapture);
      H.setRuntimeTypeInfo(t3, [H.getRuntimeTypeArgument(t2, "_EventStream", 0)]);
      t3._tryResume$0();
      t3 = C.EventStreamProvider_mousemove.forElement$1(t1);
      t2 = this.get$_mouseMove();
      t2 = new W._EventStreamSubscription(0, t3._target, t3._eventType, W._wrapZone(t2), t3._useCapture);
      H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t3, "_EventStream", 0)]);
      t2._tryResume$0();
      t2 = C.EventStreamProvider_mousedown.forElement$1(t1);
      t3 = this.get$_mouseDown();
      t3 = new W._EventStreamSubscription(0, t2._target, t2._eventType, W._wrapZone(t3), t2._useCapture);
      H.setRuntimeTypeInfo(t3, [H.getRuntimeTypeArgument(t2, "_EventStream", 0)]);
      t3._tryResume$0();
      t3 = C.EventStreamProvider_mouseup.forElement$1(t1);
      t2 = this.get$_mouseUp();
      t2 = new W._EventStreamSubscription(0, t3._target, t3._eventType, W._wrapZone(t2), t3._useCapture);
      H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t3, "_EventStream", 0)]);
      t2._tryResume$0();
      t1 = C._CustomEventStreamProvider__determineMouseWheelEventType.forElement$1(t1);
      t2 = this.get$_mouseWheel();
      t2 = new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(t2), t1._useCapture);
      H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "_EventStream", 0)]);
      t2._tryResume$0();
      this._initialized = true;
    }
    this._interrupt = false;
    t1 = window;
    t2 = this.get$_requestAnimationFrame(this);
    C.Window_methods._ensureRequestAnimationFrame$0(t1);
    this._rafId = C.Window_methods._html$_requestAnimationFrame$1(t1, W._wrapZone(t2));
  },
  onRender$1: function(arg0) {
    return this.onRender.call$1(arg0);
  },
  onResize$1: function($receiver, arg0) {
    return this.onResize.call$1(arg0);
  },
  GameLoopHtml$1: function(element) {
    var t1 = new G.Keyboard(this, P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSInt, B.DigitalButton), null);
    t1.DigitalInput$2(this, $.get$Keyboard__buttonIds());
    this._keyboard = t1;
    t1 = new G.Mouse(0, 0, 0, 0, 0, 0, 0, 0, false, 0, 0, this, P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSInt, B.DigitalButton), null);
    t1.DigitalInput$2(this, $.get$Mouse__buttonIds());
    this._mouse = t1;
    this._gamepad0 = new G.GameLoopGamepad(this, null, null);
    this._pointerLock = G.PointerLock$(this);
    this._touchSet = new G.GameLoopTouchSet(P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSInt, G.GameLoopTouch), this);
  },
  static: {
GameLoopHtml$: function(element) {
  var t1, t2, t3, t4, t5;
  t1 = new P.Point(0, 0);
  H.setRuntimeTypeInfo(t1, [null]);
  t2 = P.List_List(null, G._GameLoopTouchEvent);
  H.setRuntimeTypeInfo(t2, [G._GameLoopTouchEvent]);
  t3 = P.List_List(null, W.KeyboardEvent);
  H.setRuntimeTypeInfo(t3, [W.KeyboardEvent]);
  t4 = P.List_List(null, W.MouseEvent);
  H.setRuntimeTypeInfo(t4, [W.MouseEvent]);
  t5 = P.List_List(null, B.GameLoopTimer);
  H.setRuntimeTypeInfo(t5, [B.GameLoopTimer]);
  t5 = new G.GameLoopHtml(element, 0, false, false, null, 0, false, 0, 0.03, 0, 0, 0, 0.05, null, null, null, null, t1, null, null, t2, t3, t4, null, null, null, null, null, null, 0.015, 0.03, t5, null);
  t5.GameLoopHtml$1(element);
  return t5;
}}

},

Keyboard: {"": "DigitalInput;gameLoop,buttons,interceptor", static: {
"": "Keyboard_A,Keyboard_B,Keyboard_C,Keyboard_D,Keyboard_E,Keyboard_F,Keyboard_G,Keyboard_H,Keyboard_I,Keyboard_J,Keyboard_K,Keyboard_L,Keyboard_M,Keyboard_N,Keyboard_O,Keyboard_P,Keyboard_Q,Keyboard_R,Keyboard_S,Keyboard_T,Keyboard_U,Keyboard_V,Keyboard_W,Keyboard_X,Keyboard_Y,Keyboard_Z,Keyboard_SHIFT,Keyboard_CTRL,Keyboard_ALT,Keyboard_SPACE,Keyboard_ZERO,Keyboard_ONE,Keyboard_TWO,Keyboard_THREE,Keyboard_FOUR,Keyboard_FIVE,Keyboard_SIX,Keyboard_SEVEN,Keyboard_EIGHT,Keyboard_NINE,Keyboard_ENTER,Keyboard_UP,Keyboard_DOWN,Keyboard_LEFT,Keyboard_RIGHT,Keyboard_ESCAPE,Keyboard_APOSTROPHE,Keyboard_BACKSLASH,Keyboard_BACKSPACE,Keyboard_CAPS_LOCK,Keyboard_CLOSE_SQUARE_BRACKET,Keyboard_COMMA,Keyboard_CONTEXT_MENU,Keyboard_DASH,Keyboard_DELETE,Keyboard_END,Keyboard_EQUALS,Keyboard_F1,Keyboard_F2,Keyboard_F3,Keyboard_F4,Keyboard_F5,Keyboard_F6,Keyboard_F7,Keyboard_F8,Keyboard_F9,Keyboard_F10,Keyboard_F11,Keyboard_F12,Keyboard_FF_EQUALS,Keyboard_FF_SEMICOLON,Keyboard_FIRST_MEDIA_KEY,Keyboard_HOME,Keyboard_INSERT,Keyboard_LAST_MEDIA_KEY,Keyboard_MAC_ENTER,Keyboard_MAC_FF_META,Keyboard_META,Keyboard_NUM_CENTER,Keyboard_NUM_DELETE,Keyboard_NUM_DIVISION,Keyboard_NUM_EAST,Keyboard_NUM_EIGHT,Keyboard_NUM_FIVE,Keyboard_NUM_FOUR,Keyboard_NUM_INSERT,Keyboard_NUM_MINUS,Keyboard_NUM_MULTIPLY,Keyboard_NUM_NINE,Keyboard_NUM_NORTH,Keyboard_NUM_NORTH_EAST,Keyboard_NUM_NORTH_WEST,Keyboard_NUM_ONE,Keyboard_NUM_PERIOD,Keyboard_NUM_PLUS,Keyboard_NUM_SEVEN,Keyboard_NUM_SIX,Keyboard_NUM_SOUTH,Keyboard_NUM_SOUTH_EAST,Keyboard_NUM_SOUTH_WEST,Keyboard_NUM_THREE,Keyboard_NUM_TWO,Keyboard_NUM_WEST,Keyboard_NUM_ZERO,Keyboard_NUMLOCK,Keyboard_OPEN_SQUARE_BRACKET,Keyboard_PAGE_UP,Keyboard_PAGE_DOWN,Keyboard_PAUSE,Keyboard_PERIOD,Keyboard_PRINT_SCREEN,Keyboard_QUESTION_MARK,Keyboard_SCROLL_LOCK,Keyboard_SEMICOLON,Keyboard_SINGLE_QUOTE,Keyboard_SLASH,Keyboard_TAB,Keyboard_TILDE,Keyboard_WIN_IME,Keyboard_WIN_KEY,Keyboard_WIN_KEY_FF_LINUX,Keyboard_WIN_KEY_LEFT,Keyboard_WIN_KEY_RIGHT,Keyboard__buttonIds",
}
},

GameLoopMouseEvent: {"": "Object;x>,y>,dx,dy,clampX,clampY,time,withinCanvas,frame"},

Mouse: {"": "DigitalInput;_dx,_dy,_game_loop_html$_x,_game_loop_html$_y,_clampX,_clampY,_wheelDx,_wheelDy,_withinCanvas,_time,_frame,gameLoop,buttons,interceptor",
  get$x: function(_) {
    return this._game_loop_html$_x;
  },
  get$y: function(_) {
    return this._game_loop_html$_y;
  },
  gameLoopMouseEvent$1: function($event) {
    var t1, t2;
    this._game_loop_html$_x = $event.x;
    this._game_loop_html$_y = $event.y;
    this._time = $event.time;
    this._frame = $event.frame;
    t1 = this._dx;
    t2 = $event.dx;
    if (typeof t2 !== "number")
      throw H.iae(t2);
    this._dx = t1 + t2;
    t2 = this._dy;
    t1 = $event.dy;
    if (typeof t1 !== "number")
      throw H.iae(t1);
    this._dy = t2 + t1;
    this._clampX = $event.clampX;
    this._clampY = $event.clampY;
    this._withinCanvas = $event.withinCanvas;
  },
  _resetAccumulators$0: function() {
    this._wheelDx = 0;
    this._wheelDy = 0;
    this._dx = 0;
    this._dy = 0;
  },
  static: {
"": "Mouse_LEFT,Mouse_MIDDLE,Mouse_RIGHT,Mouse__buttonIds",
}

},

PointerLock: {"": "Object;gameLoop,lockOnClick",
  _onClick$1: function($event) {
    if (this.lockOnClick)
      this.gameLoop.element.webkitRequestPointerLock();
  },
  get$_onClick: function() {
    return new H.BoundClosure$1(this, G.PointerLock.prototype._onClick$1, null, "_onClick$1");
  },
  _onPointerLockChange$1: function($event) {
  },
  get$_onPointerLockChange: function() {
    return new H.BoundClosure$1(this, G.PointerLock.prototype._onPointerLockChange$1, null, "_onPointerLockChange$1");
  },
  PointerLock$1: function(gameLoop) {
    var t1, t2;
    t1 = this.gameLoop.element;
    t1.toString;
    t1 = C.EventStreamProvider_click.forElement$1(t1);
    t2 = this.get$_onClick();
    t2 = new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(t2), t1._useCapture);
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "_EventStream", 0)]);
    t2._tryResume$0();
    t2 = C.EventStreamProvider_webkitpointerlockchange.forTarget$1(document);
    t1 = this.get$_onPointerLockChange();
    t1 = new W._EventStreamSubscription(0, t2._target, t2._eventType, W._wrapZone(t1), t2._useCapture);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(t2, "_EventStream", 0)]);
    t1._tryResume$0();
  },
  static: {
PointerLock$: function(gameLoop) {
  var t1 = new G.PointerLock(gameLoop, true);
  t1.PointerLock$1(gameLoop);
  return t1;
}}

},

_GameLoopTouchEvent: {"": "Object;event<,type>", static: {
"": "_GameLoopTouchEvent_Move,_GameLoopTouchEvent_End,_GameLoopTouchEvent_Start",
}
},

GameLoopTouchPosition: {"": "Object;x>,y>,dx,dy,time,frame"},

GameLoopTouch: {"": "Object;id,positions<"},

GameLoopTouchSet: {"": "Object;activeTouches,gameLoop",
  _addPosition$2: function(glTouch, touch) {
    var t1, t2, t3, t4;
    t1 = new P.Point(touch.pageX, touch.pageY);
    H.setRuntimeTypeInfo(t1, [null]);
    t2 = new P.Point(touch.pageX, touch.pageY);
    H.setRuntimeTypeInfo(t2, [null]);
    t3 = this.gameLoop;
    t4 = t3._gameTime;
    t3 = t3._frameCounter;
    glTouch.get$positions().push(new G.GameLoopTouchPosition(t1.x, t2.y, 0, 0, t4, t3));
  },
  _start$1: function($event) {
    J.forEach$1$ax(J.get$changedTouches$x($event), new G.GameLoopTouchSet__start_closure(this));
    this._verifyTouchList$1($event.touches);
  },
  _game_loop_html$_end$1: function($event) {
    J.forEach$1$ax(J.get$changedTouches$x($event), new G.GameLoopTouchSet__end_closure(this));
    this._verifyTouchList$1($event.touches);
  },
  _move$1: function($event) {
    J.forEach$1$ax(J.get$changedTouches$x($event), new G.GameLoopTouchSet__move_closure(this));
    this._verifyTouchList$1($event.touches);
  },
  _inTouchList$2: function(touches, identifier) {
    var t1, i, t2;
    for (t1 = touches.length, i = 0; i < t1; ++i) {
      t2 = touches[i].identifier;
      if (t2 == null ? identifier == null : t2 === identifier)
        return true;
    }
    return false;
  },
  _verifyTouchList$1: function(touches) {
    var t1, t2;
    t1 = touches.length;
    t2 = this.activeTouches;
    if (t1 !== t2._collection$_length)
      P.print("" + t1 + " " + t2._collection$_length);
    t2.forEach$1(t2, new G.GameLoopTouchSet__verifyTouchList_closure(this, touches));
  }
},

GameLoopTouchSet__start_closure: {"": "Closure;this_0",
  call$1: function(touch) {
    var t1, t2, glTouch;
    t1 = J.get$identifier$x(touch);
    t2 = P.List_List(null, G.GameLoopTouchPosition);
    H.setRuntimeTypeInfo(t2, [G.GameLoopTouchPosition]);
    glTouch = new G.GameLoopTouch(t1, t2);
    t1 = this.this_0;
    t2 = t1.activeTouches;
    if (t2.$index(t2, touch.identifier) != null)
      return;
    t2.$indexSet(t2, touch.identifier, glTouch);
    t1._addPosition$2(glTouch, touch);
  },
  $is_args1: true
},

GameLoopTouchSet__end_closure: {"": "Closure;this_0",
  call$1: function(touch) {
    var t1, t2, glTouch;
    t1 = this.this_0;
    t2 = t1.activeTouches;
    glTouch = t2.$index(t2, J.get$identifier$x(touch));
    if (glTouch == null)
      return;
    t2.remove$1(t2, touch.identifier);
    t1._addPosition$2(glTouch, touch);
  },
  $is_args1: true
},

GameLoopTouchSet__move_closure: {"": "Closure;this_0",
  call$1: function(touch) {
    var t1, t2;
    t1 = this.this_0;
    t2 = t1.activeTouches;
    t1._addPosition$2(t2.$index(t2, J.get$identifier$x(touch)), touch);
  },
  $is_args1: true
},

GameLoopTouchSet__verifyTouchList_closure: {"": "Closure;this_0,touches_1",
  call$2: function(identifier, touch) {
    if (!this.this_0._inTouchList$2(this.touches_1, identifier))
      P.print("Did not find " + H.S(identifier));
  },
  $is_args2: true
}}],
["html_common", "dart:html_common", , P, {
convertNativeToDart_Dictionary: function(object) {
  var dict, keys, t1, key;
  if (object == null)
    return;
  dict = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
  keys = Object.getOwnPropertyNames(object);
  for (t1 = new H.ListIterator(keys, keys.length, 0, null), H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(keys, "JSArray", 0)]); t1.moveNext$0();) {
    key = t1._current;
    dict.$indexSet(dict, key, object[key]);
  }
  return dict;
},

convertDartToNative_Dictionary: function(dict) {
  var object = {};
  dict.forEach$1(dict, new P.convertDartToNative_Dictionary_closure(object));
  return object;
},

convertNativeToDart_DateTime: function(date) {
  return P.DateTime$fromMillisecondsSinceEpoch(date.getTime(), true);
},

convertNativeToDart_AcceptStructuredClone: function(object, mustCopy) {
  var copies = [];
  return new P.convertNativeToDart_AcceptStructuredClone_walk(mustCopy, new P.convertNativeToDart_AcceptStructuredClone_findSlot([], copies), new P.convertNativeToDart_AcceptStructuredClone_readSlot(copies), new P.convertNativeToDart_AcceptStructuredClone_writeSlot(copies)).call$1(object);
},

convertNativeToDart_ContextAttributes: function(nativeContextAttributes) {
  var t1 = J.getInterceptor(nativeContextAttributes);
  if (typeof nativeContextAttributes === "object" && nativeContextAttributes !== null && !!t1.$isContextAttributes)
    return nativeContextAttributes;
  return new P._TypedContextAttributes(nativeContextAttributes.alpha, nativeContextAttributes.antialias, nativeContextAttributes.depth, nativeContextAttributes.premultipliedAlpha, nativeContextAttributes.preserveDrawingBuffer, nativeContextAttributes.stencil);
},

Device_isOpera: function() {
  if ($.Device__isOpera == null)
    $.Device__isOpera = J.contains$2$asx(window.navigator.userAgent, "Opera", 0);
  return $.Device__isOpera;
},

Device_isWebKit: function() {
  if ($.Device__isWebKit == null)
    $.Device__isWebKit = P.Device_isOpera() !== true && J.contains$2$asx(window.navigator.userAgent, "WebKit", 0);
  return $.Device__isWebKit;
},

convertDartToNative_Dictionary_closure: {"": "Closure;object_0",
  call$2: function(key, value) {
    this.object_0[key] = value;
  },
  $is_args2: true
},

convertNativeToDart_AcceptStructuredClone_findSlot: {"": "Closure;values_0,copies_1",
  call$1: function(value) {
    var t1, $length, i, t2;
    t1 = this.values_0;
    $length = t1.length;
    for (i = 0; i < $length; ++i) {
      t2 = t1[i];
      if (t2 == null ? value == null : t2 === value)
        return i;
    }
    t1.push(value);
    this.copies_1.push(null);
    return $length;
  },
  $is_args1: true
},

convertNativeToDart_AcceptStructuredClone_readSlot: {"": "Closure;copies_2",
  call$1: function(i) {
    var t1 = this.copies_2;
    if (i >>> 0 !== i || i >= t1.length)
      throw H.ioore(t1, i);
    return t1[i];
  },
  $is_args1: true
},

convertNativeToDart_AcceptStructuredClone_writeSlot: {"": "Closure;copies_3",
  call$2: function(i, x) {
    var t1 = this.copies_3;
    if (i >>> 0 !== i || i >= t1.length)
      throw H.ioore(t1, i);
    t1[i] = x;
  },
  $is_args2: true
},

convertNativeToDart_AcceptStructuredClone_walk: {"": "Closure;mustCopy_4,findSlot_5,readSlot_6,writeSlot_7",
  call$1: function(e) {
    var slot, copy, t1, t2, key, $length, i;
    if (e == null)
      return e;
    if (typeof e === "boolean")
      return e;
    if (typeof e === "number")
      return e;
    if (typeof e === "string")
      return e;
    if (e instanceof Date)
      return P.convertNativeToDart_DateTime(e);
    if (e instanceof RegExp)
      throw H.wrapException(P.UnimplementedError$("structured clone of RegExp"));
    if (Object.getPrototypeOf(e) === Object.prototype) {
      slot = this.findSlot_5.call$1(e);
      copy = this.readSlot_6.call$1(slot);
      if (copy != null)
        return copy;
      copy = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
      this.writeSlot_7.call$2(slot, copy);
      for (t1 = Object.keys(e), t2 = new H.ListIterator(t1, t1.length, 0, null), H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "JSArray", 0)]); t2.moveNext$0();) {
        key = t2._current;
        copy.$indexSet(copy, key, this.call$1(e[key]));
      }
      return copy;
    }
    if (e instanceof Array) {
      slot = this.findSlot_5.call$1(e);
      copy = this.readSlot_6.call$1(slot);
      if (copy != null)
        return copy;
      t1 = J.getInterceptor$asx(e);
      $length = t1.get$length(e);
      copy = this.mustCopy_4 ? new Array($length) : e;
      this.writeSlot_7.call$2(slot, copy);
      if (typeof $length !== "number")
        throw H.iae($length);
      t2 = J.getInterceptor$ax(copy);
      i = 0;
      for (; i < $length; ++i)
        t2.$indexSet(copy, i, this.call$1(t1.$index(e, i)));
      return copy;
    }
    return e;
  },
  $is_args1: true
},

_TypedContextAttributes: {"": "Object;alpha,antialias,depth>,premultipliedAlpha,preserveDrawingBuffer,stencil>", $isContextAttributes: true}}],
["logging", "package:logging/logging.dart", , N, {
Logger: {"": "Object;name>,parent,_level,_children>,children,_controller",
  get$fullName: function() {
    var t1, t2, t3;
    t1 = this.parent;
    t2 = t1 == null || J.get$name$x(t1) === "";
    t3 = this.name;
    return t2 ? t3 : t1.get$fullName() + "." + t3;
  },
  get$level: function() {
    if ($.hierarchicalLoggingEnabled) {
      var t1 = this._level;
      if (t1 != null)
        return t1;
      t1 = this.parent;
      if (t1 != null)
        return t1.get$level();
    }
    return $._rootLevel;
  },
  set$level: function(value) {
    if ($.hierarchicalLoggingEnabled && this.parent != null)
      this._level = value;
    else {
      if (this.parent != null)
        throw H.wrapException(P.UnsupportedError$("Please set \"hierarchicalLoggingEnabled\" to true if you want to change the level on a non-root logger."));
      $._rootLevel = value;
    }
  },
  get$onRecord: function() {
    return this._getStream$0();
  },
  log$4: function(logLevel, message, error, stackTrace) {
    var t1, t2, t3, record, target;
    if (logLevel.value >= this.get$level().value) {
      t1 = this.get$fullName();
      t2 = P.DateTime$_now();
      t3 = $.LogRecord__nextNumber;
      $.LogRecord__nextNumber = t3 + 1;
      record = new N.LogRecord(logLevel, message, t1, t2, t3, error, stackTrace);
      if ($.hierarchicalLoggingEnabled)
        for (target = this; target != null;) {
          target._publish$1(record);
          target = target.parent;
        }
      else
        N.Logger_Logger("")._publish$1(record);
    }
  },
  fine$3: function(message, error, stackTrace) {
    return this.log$4(C.Level_FINE_500, message, error, stackTrace);
  },
  fine$1: function(message) {
    return this.fine$3(message, null, null);
  },
  config$3: function(message, error, stackTrace) {
    return this.log$4(C.Level_CONFIG_700, message, error, stackTrace);
  },
  config$1: function(message) {
    return this.config$3(message, null, null);
  },
  warning$3: function(message, error, stackTrace) {
    return this.log$4(C.Level_WARNING_900, message, error, stackTrace);
  },
  warning$1: function(message) {
    return this.warning$3(message, null, null);
  },
  shout$3: function(message, error, stackTrace) {
    return this.log$4(C.Level_SHOUT_1200, message, error, stackTrace);
  },
  shout$1: function(message) {
    return this.shout$3(message, null, null);
  },
  _getStream$0: function() {
    var t1, t2;
    if ($.hierarchicalLoggingEnabled || this.parent == null) {
      if (this._controller == null)
        this._controller = P.StreamController_StreamController$broadcast(null, null, true, N.LogRecord);
      t1 = this._controller;
      t1.toString;
      t2 = new P._BroadcastStream(t1);
      H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "_BroadcastStreamController", 0)]);
      return t2;
    } else
      return N.Logger_Logger("")._getStream$0();
  },
  _publish$1: function(record) {
    var t1 = this._controller;
    if (t1 != null) {
      if (t1._state >= 4)
        H.throwExpression(t1._addEventError$0());
      t1._sendData$1(record);
    }
  },
  Logger$_internal$3: function($name, $parent, children) {
    var t1 = this.parent;
    if (t1 != null) {
      t1 = J.get$_children$x(t1);
      t1.$indexSet(t1, this.name, this);
    }
  },
  static: {
"": "Logger__loggers",
Logger_Logger: function($name) {
  var t1 = $.get$Logger__loggers();
  return t1.putIfAbsent$2(t1, $name, new N.Logger_Logger_closure($name));
},

Logger_Logger$_named: function($name) {
  var dot, $parent, thisName;
  if (C.JSString_methods.startsWith$1($name, "."))
    throw H.wrapException(new P.ArgumentError("name shouldn't start with a '.'"));
  dot = C.JSString_methods.lastIndexOf$1($name, ".");
  if (dot === -1) {
    $parent = $name !== "" ? N.Logger_Logger("") : null;
    thisName = $name;
  } else {
    $parent = N.Logger_Logger(C.JSString_methods.substring$2($name, 0, dot));
    thisName = C.JSString_methods.substring$1($name, dot + 1);
  }
  return N.Logger$_internal(thisName, $parent, P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSString, N.Logger));
},

Logger$_internal: function($name, $parent, children) {
  var t1 = new F.UnmodifiableMapView(children);
  H.setRuntimeTypeInfo(t1, [null, null]);
  t1 = new N.Logger($name, $parent, null, children, t1, null);
  t1.Logger$_internal$3($name, $parent, children);
  return t1;
}}

},

Logger_Logger_closure: {"": "Closure;name_0",
  call$0: function() {
    return N.Logger_Logger$_named(this.name_0);
  }
},

Level: {"": "Object;name>,value>",
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = J.getInterceptor(other);
    return typeof other === "object" && other !== null && !!t1.$isLevel && this.value === other.value;
  },
  $lt: function(_, other) {
    var t1 = J.get$value$x(other);
    if (typeof t1 !== "number")
      throw H.iae(t1);
    return this.value < t1;
  },
  $le: function(_, other) {
    var t1 = J.get$value$x(other);
    if (typeof t1 !== "number")
      throw H.iae(t1);
    return this.value <= t1;
  },
  $gt: function(_, other) {
    return C.JSInt_methods.$gt(this.value, C.JSInt_methods.get$value(other));
  },
  $ge: function(_, other) {
    var t1 = J.get$value$x(other);
    if (typeof t1 !== "number")
      throw H.iae(t1);
    return this.value >= t1;
  },
  get$hashCode: function(_) {
    return this.value;
  },
  toString$0: function(_) {
    return this.name;
  },
  $isLevel: true,
  static: {
"": "Level_ALL,Level_OFF,Level_FINEST,Level_FINER,Level_FINE,Level_CONFIG,Level_INFO,Level_WARNING,Level_SEVERE,Level_SHOUT",
}

},

LogRecord: {"": "Object;level<,message>,loggerName,time,sequenceNumber,error>,stackTrace<",
  toString$0: function(_) {
    return "[" + this.level.name + "] " + this.loggerName + ": " + this.message;
  },
  static: {
"": "LogRecord__nextNumber",
}

}}],
["spectre", "package:spectre/spectre.dart", , G, {
Enum__stringify: function(values, value) {
  var t1 = {};
  t1.r_0 = null;
  values.forEach$1(values, new G.Enum__stringify_closure(t1, value));
  t1 = t1.r_0;
  if (t1 == null)
    throw H.wrapException(new P.ArgumentError(null));
  return t1;
},

Enum__isValid: function(values, value) {
  var t1 = {};
  t1.valid_0 = false;
  values.forEach$1(values, new G.Enum__isValid_closure(t1, value));
  return t1.valid_0;
},

BlendState: {"": "Object;_enabled,_blendFactorRed,_blendFactorGreen,_blendFactorBlue,_blendFactorAlpha,_alphaBlendOperation,_alphaDestinationBlend,_alphaSourceBlend,_colorBlendOperation,_colorDestinationBlend,_colorSourceBlend,_writeRenderTargetRed,_writeRenderTargetGreen,_writeRenderTargetBlue,_writeRenderTargetAlpha",
  set$blendFactorRed: function(value) {
    if (value >= 0 && value <= 1) {
      this._blendFactorRed = value;
      return;
    }
    throw H.wrapException(new P.ArgumentError("blendFactorRed must be in the range [0, 1]"));
  },
  set$blendFactorGreen: function(value) {
    if (value >= 0 && value <= 1) {
      this._blendFactorGreen = value;
      return;
    }
    throw H.wrapException(new P.ArgumentError("blendFactorGreen must be in the range [0, 1]"));
  },
  set$blendFactorBlue: function(value) {
    if (value >= 0 && value <= 1) {
      this._blendFactorBlue = value;
      return;
    }
    throw H.wrapException(new P.ArgumentError("blendFactorGreen must be in the range [0, 1]"));
  },
  set$blendFactorAlpha: function(value) {
    if (value >= 0 && value <= 1) {
      this._blendFactorAlpha = value;
      return;
    }
    throw H.wrapException(new P.ArgumentError("blendFactorGreen must be in the range [0, 1]"));
  },
  set$alphaBlendOperation: function(value) {
    if (!G.Enum__isValid($.get$BlendOperation__values(), value))
      throw H.wrapException(new P.ArgumentError("alphaBlendOperation must be an enumeration within BlendOperation."));
    this._alphaBlendOperation = value;
  },
  set$alphaDestinationBlend: function(value) {
    if (!G.Enum__isValid($.get$Blend__values(), value))
      throw H.wrapException(new P.ArgumentError("alphaDestinationBlend must be an enumeration within Blend."));
    this._alphaDestinationBlend = value;
  },
  set$alphaSourceBlend: function(value) {
    if (!G.Enum__isValid($.get$Blend__values(), value))
      throw H.wrapException(new P.ArgumentError("alphaSourceBlend must be an enumeration within Blend."));
    this._alphaSourceBlend = value;
  },
  set$colorBlendOperation: function(value) {
    if (!G.Enum__isValid($.get$BlendOperation__values(), value))
      throw H.wrapException(new P.ArgumentError("colorBlendOperation must be an enumeration within BlendOperation."));
    this._colorBlendOperation = value;
  },
  set$colorDestinationBlend: function(value) {
    if (!G.Enum__isValid($.get$Blend__values(), value))
      throw H.wrapException(new P.ArgumentError("colorDestinationBlend must be an enumeration within Blend."));
    this._colorDestinationBlend = value;
  },
  set$colorSourceBlend: function(value) {
    if (!G.Enum__isValid($.get$Blend__values(), value))
      throw H.wrapException(new P.ArgumentError("colorSourceBlend must be an enumeration within Blend."));
    this._colorSourceBlend = value;
  },
  static: {
"": "BlendState__blendEnabledName,BlendState__blendFactorRedName,BlendState__blendFactorGreenName,BlendState__blendFactorBlueName,BlendState__blendFactorAlphaName,BlendState__alphaBlendOperationName,BlendState__alphaDestinationBlendName,BlendState__alphaSourceBlendName,BlendState__colorBlendOperationName,BlendState__colorDestinationBlendName,BlendState__colorSourceBlendName,BlendState__writeRenderTargetRedName,BlendState__writeRenderTargetGreenName,BlendState__writeRenderTargetBlueName,BlendState__writeRenderTargetAlphaName",
BlendState$alphaBlend: function() {
  return new G.BlendState(true, 1, 1, 1, 1, 32774, 771, 1, 32774, 771, 1, true, true, true, true);
},

BlendState$opaque: function() {
  return new G.BlendState(false, 1, 1, 1, 1, 32774, 0, 1, 32774, 0, 1, true, true, true, true);
}}

},

SpectreBuffer: {"": "DeviceChild;",
  _pushBind$0: function() {
    var t1, oldBind;
    t1 = this.device;
    oldBind = J.getParameter$1$x(t1._gl, this._bindingParam);
    J.bindBuffer$2$x(t1._gl, this._bindTarget, this._deviceBuffer);
    return oldBind;
  },
  _uploadData$2: function(data, usage) {
    this._size = data.byteLength;
    this._usage = usage;
    J.bufferDataTyped$3$x(this.device._gl, this._bindTarget, data, usage);
  },
  uploadData$2: function(data, usage) {
    var oldBind;
    if (data == null)
      throw H.wrapException(new P.ArgumentError("data cannot be null."));
    oldBind = this._pushBind$0();
    this._uploadData$2(data, usage);
    J.bindBuffer$2$x(this.device._gl, this._bindTarget, oldBind);
  },
  uploadSubData$2: function(offset, data) {
    var t1, t2, oldBind;
    t1 = data.byteLength;
    if (typeof t1 !== "number")
      throw H.iae(t1);
    t1 = offset + t1;
    t2 = this._size;
    if (typeof t2 !== "number")
      throw H.iae(t2);
    if (t1 > t2)
      throw H.wrapException(P.RangeError$("data is too large " + t1 + " > " + H.S(this._size)));
    oldBind = this._pushBind$0();
    t1 = this.device;
    t2 = this._bindTarget;
    J.bufferSubDataTyped$3$x(t1._gl, t2, offset, data);
    J.bindBuffer$2$x(t1._gl, t2, oldBind);
  },
  _allocate$2: function(size, usage) {
    this._size = size;
    this._usage = usage;
    J.bufferData$3$x(this.device._gl, this._bindTarget, size, usage);
  },
  allocate$2: function(size, usage) {
    var oldBind;
    if (size <= 0)
      throw H.wrapException(new P.ArgumentError("size must be > 0"));
    oldBind = this._pushBind$0();
    this._allocate$2(size, usage);
    J.bindBuffer$2$x(this.device._gl, this._bindTarget, oldBind);
  },
  get$size: function(_) {
    return this._size;
  }
},

Camera: {"": "Object;position,upDirection,focusPosition,zNear,zFar,aspectRatio,FOV",
  toString$0: function(_) {
    return H.S(this.position) + " -> " + H.S(this.focusPosition);
  },
  copyProjectionMatrix$1: function(pm) {
    T.makePerspectiveMatrix(this.FOV, this.aspectRatio, this.zNear, this.zFar).copyInto$1(pm);
  },
  copyViewMatrix$1: function(vm) {
    T.makeViewMatrix(this.position, this.focusPosition, this.upDirection).copyInto$1(vm);
  },
  Camera$0: function() {
    var t1 = new Float32Array(3);
    t1.$dartCachedLength = t1.length;
    t1 = new T.Vector3(t1);
    t1.setValues$3(0, 0, 0);
    this.position = t1;
    t1 = new Float32Array(3);
    t1.$dartCachedLength = t1.length;
    t1 = new T.Vector3(t1);
    t1.setValues$3(0, 0, -1);
    this.focusPosition = t1;
    t1 = new Float32Array(3);
    t1.$dartCachedLength = t1.length;
    t1 = new T.Vector3(t1);
    t1.setValues$3(0, 1, 0);
    this.upDirection = t1;
  },
  static: {
Camera$: function() {
  var t1 = new G.Camera(null, null, null, 0.5, 1000, 1.7777778, 0.785398163);
  t1.Camera$0();
  return t1;
}}

},

_DebugLineVertex: {"": "Object;x>,y>,z,next"},

_DebugLineObject: {"": "Object;r,g,b,a,duration,vertexStream<"},

_DebugLineCollection: {"": "Object;_freeLineVertices,_freeLineObjects,_lineObjects,_lineObject",
  startLineObject$5: function(r, g, b, a, duration) {
    var t1 = this._freeLineObjects;
    if (t1.length > 0)
      this._lineObject = t1.pop();
    else
      this._lineObject = new G._DebugLineObject(null, null, null, null, null, null);
    this._lineObject.r = r;
    this._lineObject.g = g;
    this._lineObject.b = b;
    this._lineObject.a = a;
    this._lineObject.duration = duration;
  },
  finishLineObject$0: function() {
    var t1 = this._lineObject;
    if (t1 != null) {
      this._lineObjects.push(t1);
      this._lineObject = null;
    }
  },
  getVertex$0: function() {
    var t1 = this._freeLineVertices;
    if (t1.length > 0)
      return t1.pop();
    return new G._DebugLineVertex(null, null, null, null);
  },
  addVertex$3: function(x, y, z) {
    var v = this.getVertex$0();
    v.x = x;
    v.y = y;
    v.z = z;
    v.next = this._lineObject.vertexStream;
    this._lineObject.vertexStream = v;
  },
  freeLineObject$1: function(lineObject) {
    var v = lineObject.vertexStream;
    for (; v != null;) {
      this._freeLineVertices.push(v);
      v = v.next;
    }
    lineObject.vertexStream = null;
    this._freeLineObjects.push(lineObject);
  },
  update$1: function(_, dt) {
    var i, t1, lineObject, t2, last, t3;
    for (i = this._lineObjects.length - 1; i >= 0; --i) {
      t1 = this._lineObjects;
      if (i >= t1.length)
        throw H.ioore(t1, i);
      lineObject = t1[i];
      t1 = lineObject.duration;
      if (typeof t1 !== "number")
        throw t1.$sub();
      lineObject.duration = t1 - dt;
      t1 = lineObject.duration;
      if (typeof t1 !== "number")
        throw t1.$lt();
      if (t1 < 0) {
        this.freeLineObject$1(lineObject);
        t1 = this._lineObjects;
        t2 = t1.length;
        last = t2 - 1;
        if (last < 0)
          throw H.ioore(t1, last);
        t3 = t1[last];
        if (i >= t2)
          throw H.ioore(t1, i);
        t1[i] = t3;
        if (0 >= t2)
          throw H.ioore(t1, 0);
        t1.pop();
      }
    }
  },
  _addLine$2: function(start, finish) {
    var t1 = finish.storage;
    this.addVertex$3(t1[0], t1[1], t1[2]);
    t1 = start.storage;
    this.addVertex$3(t1[0], t1[1], t1[2]);
  },
  _DebugLineCollection$0: function() {
    var t1 = P.List_List(null, G._DebugLineVertex);
    H.setRuntimeTypeInfo(t1, [G._DebugLineVertex]);
    this._freeLineVertices = t1;
    t1 = P.List_List(null, G._DebugLineObject);
    H.setRuntimeTypeInfo(t1, [G._DebugLineObject]);
    this._freeLineObjects = t1;
    t1 = P.List_List(null, G._DebugLineObject);
    H.setRuntimeTypeInfo(t1, [G._DebugLineObject]);
    this._lineObjects = t1;
  },
  static: {
_DebugLineCollection$: function() {
  var t1 = new G._DebugLineCollection(null, null, null, null);
  t1._DebugLineCollection$0();
  return t1;
}}

},

_DebugDrawLineManager: {"": "Object;device,lines,_lineMesh,_lineMeshInputLayout,_vboStorage",
  _prepareForRender$1: function(context) {
    var vertexBufferLength, t1, t2, vertexBufferCursor, line, v, t3, t4, t5, t6, t7, vertexBufferCursor0, t8;
    vertexBufferLength = C.JS_CONST_ZYJ(this._vboStorage);
    for (t1 = this.lines._lineObjects, t2 = new H.ListIterator(t1, t1.length, 0, null), H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "JSArray", 0)]), vertexBufferCursor = 0; t2.moveNext$0();) {
      line = t2._current;
      v = line.get$vertexStream();
      for (t1 = this._vboStorage, t3 = C.JS_CONST_ZYJ(t1), t4 = line.r, t5 = line.g, t6 = line.b, t7 = line.a; v != null; vertexBufferCursor = vertexBufferCursor0) {
        vertexBufferCursor0 = vertexBufferCursor + 1;
        t8 = v.x;
        if (vertexBufferCursor < 0 || vertexBufferCursor >= t3)
          throw H.ioore(t1, vertexBufferCursor);
        t1[vertexBufferCursor] = t8;
        vertexBufferCursor = vertexBufferCursor0 + 1;
        t8 = v.y;
        if (vertexBufferCursor0 < 0 || vertexBufferCursor0 >= t3)
          throw H.ioore(t1, vertexBufferCursor0);
        t1[vertexBufferCursor0] = t8;
        vertexBufferCursor0 = vertexBufferCursor + 1;
        t8 = v.z;
        if (vertexBufferCursor < 0 || vertexBufferCursor >= t3)
          throw H.ioore(t1, vertexBufferCursor);
        t1[vertexBufferCursor] = t8;
        vertexBufferCursor = vertexBufferCursor0 + 1;
        if (vertexBufferCursor0 < 0 || vertexBufferCursor0 >= t3)
          throw H.ioore(t1, vertexBufferCursor0);
        t1[vertexBufferCursor0] = t4;
        vertexBufferCursor0 = vertexBufferCursor + 1;
        if (vertexBufferCursor < 0 || vertexBufferCursor >= t3)
          throw H.ioore(t1, vertexBufferCursor);
        t1[vertexBufferCursor] = t5;
        vertexBufferCursor = vertexBufferCursor0 + 1;
        if (vertexBufferCursor0 < 0 || vertexBufferCursor0 >= t3)
          throw H.ioore(t1, vertexBufferCursor0);
        t1[vertexBufferCursor0] = t6;
        vertexBufferCursor0 = vertexBufferCursor + 1;
        if (vertexBufferCursor < 0 || vertexBufferCursor >= t3)
          throw H.ioore(t1, vertexBufferCursor);
        t1[vertexBufferCursor] = t7;
        v = v.next;
        if (vertexBufferCursor0 === vertexBufferLength) {
          vertexBufferCursor = vertexBufferCursor0;
          break;
        }
      }
      if (vertexBufferCursor === vertexBufferLength)
        break;
    }
    this._lineMesh._deviceVertexBuffer.uploadSubData$2(0, this._vboStorage);
    this._lineMesh.count = C.JSInt_methods.$tdiv(vertexBufferCursor, 7);
  },
  _DebugDrawLineManager$3: function(device, maxVertices, shaderProgram) {
    var t1, t2, t3, t4;
    if (typeof 1 !== "number")
      throw H.iae(1);
    t1 = new Float32Array(((maxVertices & 1) >>> 0 !== 0 ? maxVertices + 1 : maxVertices) * 7);
    t1.$dartCachedLength = t1.length;
    this._vboStorage = t1;
    t1 = this.device;
    t2 = new G.SingleArrayMesh(null, P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSString, G.SpectreMeshAttribute), 0, 4, t1, "_DebugDrawLineManager", 1, false);
    t3 = t2.device;
    if (t3 == null)
      H.throwExpression(new P.ArgumentError("device cannot be null"));
    t3._addChild$1(t2);
    t3 = new G.VertexBuffer(null, 34962, 34964, 35048, 0, t1, "_DebugDrawLineManager", 1, false);
    t4 = t3.device;
    if (t4 == null)
      H.throwExpression(new P.ArgumentError("device cannot be null"));
    t4._addChild$1(t3);
    t3._deviceBuffer = J.createBuffer$0$x(t1._gl);
    t2._deviceVertexBuffer = t3;
    this._lineMesh = t2;
    this._lineMesh.primitiveTopology = 1;
    t2 = this._lineMesh._deviceVertexBuffer;
    t3 = this._vboStorage;
    if (typeof 4 !== "number")
      throw H.iae(4);
    t2.allocate$2(C.JS_CONST_ZYJ(t3) * 4, 35048);
    t3 = this._lineMesh.attributes;
    t3.$indexSet(t3, "vPosition", new G.SpectreMeshAttribute("vPosition", new G.VertexAttribute(0, 0, 0, 28, 5126, 3, false)));
    t3 = this._lineMesh.attributes;
    t3.$indexSet(t3, "vColor", new G.SpectreMeshAttribute("vColor", new G.VertexAttribute(0, 0, 12, 28, 5126, 4, false)));
    t3 = P.List_List(null, G.VertexAttribute);
    H.setRuntimeTypeInfo(t3, [G.VertexAttribute]);
    t2 = P.List_List(null, G.ShaderProgramAttribute);
    H.setRuntimeTypeInfo(t2, [G.ShaderProgramAttribute]);
    t1 = new G.InputLayout(t3, t2, null, null, t1, "_DebugDrawLineManager", 1, false);
    t2 = t1.device;
    if (t2 == null)
      H.throwExpression(new P.ArgumentError("device cannot be null"));
    t2._addChild$1(t1);
    this._lineMeshInputLayout = t1;
    t1 = this._lineMeshInputLayout;
    t1._shaderProgram = shaderProgram;
    t1._refresh$0();
    t1 = this._lineMeshInputLayout;
    t1._mesh = this._lineMesh;
    t1._refresh$0();
  },
  static: {
"": "_DebugDrawLineManager_DebugDrawVertexSize",
_DebugDrawLineManager$: function(device, maxVertices, shaderProgram) {
  var t1 = new G._DebugDrawLineManager(device, G._DebugLineCollection$(), null, null, null);
  t1._DebugDrawLineManager$3(device, maxVertices, shaderProgram);
  return t1;
}}

},

DebugDrawManager: {"": "Object;_depthState,_blendState,_rasterizerState,_lineVertexShader,_lineFragmentShader,_lineShaderProgram,_depthEnabledLines,_depthDisabledLines,_cameraMatrix,device,_circle_u,_circle_v",
  addCross$5$depthEnabled$duration$size: function(point, color, depthEnabled, duration, size) {
    var t1, t2, half_size, t3;
    t1 = (depthEnabled ? this._depthEnabledLines : this._depthDisabledLines).lines;
    t2 = color.storage;
    t1.startLineObject$5(t2[0], t2[1], t2[2], t2[3], duration);
    half_size = size * 0.5;
    t2 = new Float32Array(3);
    t2.$dartCachedLength = t2.length;
    t2 = new T.Vector3(t2);
    t2.setValues$3(half_size, 0, 0);
    t1._addLine$2(point, point.$add(point, t2));
    t2 = -half_size;
    t3 = new Float32Array(3);
    t3.$dartCachedLength = t3.length;
    t3 = new T.Vector3(t3);
    t3.setValues$3(t2, 0, 0);
    t1._addLine$2(point, point.$add(point, t3));
    t3 = new Float32Array(3);
    t3.$dartCachedLength = t3.length;
    t3 = new T.Vector3(t3);
    t3.setValues$3(0, half_size, 0);
    t1._addLine$2(point, point.$add(point, t3));
    t3 = new Float32Array(3);
    t3.$dartCachedLength = t3.length;
    t3 = new T.Vector3(t3);
    t3.setValues$3(0, t2, 0);
    t1._addLine$2(point, point.$add(point, t3));
    t3 = new Float32Array(3);
    t3.$dartCachedLength = t3.length;
    t3 = new T.Vector3(t3);
    t3.setValues$3(0, 0, half_size);
    t1._addLine$2(point, point.$add(point, t3));
    t3 = new Float32Array(3);
    t3.$dartCachedLength = t3.length;
    t3 = new T.Vector3(t3);
    t3.setValues$3(0, 0, t2);
    t1._addLine$2(point, point.$add(point, t3));
    t1.finishLineObject$0();
  },
  addCross$2: function(point, color) {
    return this.addCross$5$depthEnabled$duration$size(point, color, true, 0, 1);
  },
  prepareForRender$0: function() {
    var t1 = this.device;
    this._depthEnabledLines._prepareForRender$1(t1._context);
    this._depthDisabledLines._prepareForRender$1(t1._context);
  },
  render$1: function(cam) {
    var pm, t1, t2;
    pm = T.makePerspectiveMatrix(cam.FOV, cam.aspectRatio, cam.zNear, cam.zFar);
    pm.multiply$1(pm, T.makeViewMatrix(cam.position, cam.focusPosition, cam.upDirection));
    t1 = this._cameraMatrix;
    pm.copyIntoArray$1(t1);
    t2 = this.device;
    t2._context.setShaderProgram$1(this._lineShaderProgram);
    t2._context.setConstant$2("cameraTransform", t1);
    this._depthState._depthBufferEnabled = true;
    this._depthState._depthBufferWriteEnabled = true;
    t2._context.setDepthState$1(this._depthState);
    t2._context.setBlendState$1(this._blendState);
    t2._context.setRasterizerState$1(this._rasterizerState);
    t2._context._inputLayoutHandle = this._depthEnabledLines._lineMeshInputLayout;
    t2._context.setMesh$1(this._depthEnabledLines._lineMesh);
    t2._context.drawMesh$1(this._depthEnabledLines._lineMesh);
    this._depthState._depthBufferEnabled = false;
    this._depthState._depthBufferWriteEnabled = false;
    t2._context.setDepthState$1(this._depthState);
    t2._context.setMesh$1(this._depthDisabledLines._lineMesh);
    t2._context.drawMesh$1(this._depthDisabledLines._lineMesh);
  },
  DebugDrawManager$2$maxVertices: function(device, maxVertices) {
    var t1, t2, t3;
    this._depthState = new G.DepthState(true, true, 515);
    this._blendState = G.BlendState$alphaBlend();
    this._rasterizerState = new G.RasterizerState(1029, 2305, 0, 0, false);
    this._rasterizerState.set$cullMode(0);
    t1 = this.device;
    t2 = new G.VertexShader(35633, "", null, true, t1, "DebugDrawManager", 1, false);
    t3 = t2.device;
    if (t3 == null)
      H.throwExpression(new P.ArgumentError("device cannot be null"));
    t3._addChild$1(t2);
    t2._shader = J.createShader$1$x(t1._gl, t2._type);
    this._lineVertexShader = t2;
    t2 = new G.FragmentShader(35632, "", null, true, t1, "DebugDrawManager", 1, false);
    t3 = t2.device;
    if (t3 == null)
      H.throwExpression(new P.ArgumentError("device cannot be null"));
    t3._addChild$1(t2);
    t2._shader = J.createShader$1$x(t1._gl, t2._type);
    this._lineFragmentShader = t2;
    t2 = new G.ShaderProgram(P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSString, G.ShaderProgramUniform), P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSString, G.ShaderProgramAttribute), P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSString, G.ShaderProgramSampler), false, "", null, null, null, t1, "DebugDrawManager", 1, false);
    t3 = t2.device;
    if (t3 == null)
      H.throwExpression(new P.ArgumentError("device cannot be null"));
    t3._addChild$1(t2);
    t2._program = J.createProgram$0$x(t1._gl);
    this._lineShaderProgram = t2;
    t2 = this._lineVertexShader;
    t2.set$source(t2, "precision highp float;\n\n// Input attributes\nattribute vec3 vPosition;\nattribute vec4 vColor;\n// Input uniforms\nuniform mat4 cameraTransform;\n// Varying outputs\nvarying vec4 fColor;\n\nvoid main() {\n    fColor = vColor;\n    vec4 vPosition4 = vec4(vPosition.x, vPosition.y, vPosition.z, 1.0);\n    gl_Position = cameraTransform*vPosition4;\n}\n");
    t2 = this._lineFragmentShader;
    t2.set$source(t2, "precision mediump float;\n\nvarying vec4 fColor;\n\nvoid main() {\n    gl_FragColor = fColor;\n}\n");
    this._lineShaderProgram.set$vertexShader(this._lineVertexShader);
    this._lineShaderProgram.set$fragmentShader(this._lineFragmentShader);
    this._lineShaderProgram.link$0();
    this._depthEnabledLines = G._DebugDrawLineManager$(t1, maxVertices, this._lineShaderProgram);
    this._depthDisabledLines = G._DebugDrawLineManager$(t1, maxVertices, this._lineShaderProgram);
  },
  static: {
"": "DebugDrawManager_ColorRed,DebugDrawManager_ColorGreen,DebugDrawManager_ColorBlue",
DebugDrawManager$: function(device, maxVertices) {
  var t1, t2, t3;
  t1 = new Float32Array(16);
  t1.$dartCachedLength = t1.length;
  t2 = new Float32Array(3);
  t2.$dartCachedLength = t2.length;
  t3 = new Float32Array(3);
  t3.$dartCachedLength = t3.length;
  t3 = new G.DebugDrawManager(null, null, null, null, null, null, null, null, t1, device, new T.Vector3(t2), new T.Vector3(t3));
  t3.DebugDrawManager$2$maxVertices(device, maxVertices);
  return t3;
}}

},

DepthState: {"": "Object;_depthBufferEnabled,_depthBufferWriteEnabled,_depthBufferFunction",
  set$depthBufferFunction: function(value) {
    if (!G.Enum__isValid($.get$CompareFunction__values(), value))
      throw H.wrapException(new P.ArgumentError("depthBufferFunction must be an enumeration within CompareFunction."));
    this._depthBufferFunction = value;
  },
  static: {
"": "DepthState__depthBufferEnabledName,DepthState__depthBufferWriteEnabledName,DepthState__depthBufferFunctionName",
}

},

DeviceChild: {"": "Disposable;name>",
  toString$0: function(_) {
    return this.name;
  }
},

Enum__stringify_closure: {"": "Closure;box_0,value_1",
  call$2: function(k, v) {
    if (J.$eq(v, this.value_1))
      this.box_0.r_0 = k;
  },
  $is_args2: true
},

Enum__isValid_closure: {"": "Closure;box_0,value_1",
  call$2: function(k, v) {
    if (J.$eq(v, this.value_1))
      this.box_0.valid_0 = true;
  },
  $is_args2: true
},

FragmentShader: {"": "SpectreShader;_type,_spectre$_source,_shader,autoCompile,device,name,_referenceCount,_disposed"},

GraphicsContext: {"": "Object;device,_clearR,_clearG,_clearB,_clearA,_clearD,_tempTextureUnit,_activeTextureUnit,_samplers,_textures,_primitiveTopology,_indexBuffer,_shaderProgram,_renderTarget,_vertexBuffers,_enabledVertexAttributeArrays,_inputLayoutHandle,_preparedInputLayoutHandle,_blendStateDefault,_depthStateDefault,_rasterizerStateDefault,_viewport,_blendState,_depthState,_rasterizerState",
  _initializeState$0: function() {
    var t1, t2, t3;
    this._viewport = new G.Viewport(0, 0, 640, 480, 0, 1);
    t1 = this.device;
    t2 = t1._gl;
    t3 = this._viewport;
    J.viewport$4$x(t2, t3._x, t3._y, t3._width, t3._height);
    t3 = t1._gl;
    t2 = this._viewport;
    J.depthRange$2$x(t3, t2._minDepth, t2._maxDepth);
    this._blendStateDefault = G.BlendState$opaque();
    this._blendState = G.BlendState$opaque();
    J.disable$1$x(t1._gl, 3042);
    t2 = t1._gl;
    t3 = this._blendState;
    J.blendFuncSeparate$4$x(t2, t3._colorSourceBlend, t3._colorDestinationBlend, t3._alphaSourceBlend, t3._alphaDestinationBlend);
    t3 = t1._gl;
    t2 = this._blendState;
    J.blendEquationSeparate$2$x(t3, t2._colorBlendOperation, t2._alphaBlendOperation);
    t2 = t1._gl;
    t3 = this._blendState;
    J.colorMask$4$x(t2, t3._writeRenderTargetRed, t3._writeRenderTargetGreen, t3._writeRenderTargetBlue, t3._writeRenderTargetAlpha);
    t3 = t1._gl;
    t2 = this._blendState;
    J.blendColor$4$x(t3, t2._blendFactorRed, t2._blendFactorGreen, t2._blendFactorBlue, t2._blendFactorAlpha);
    this._depthStateDefault = new G.DepthState(true, true, 515);
    this._depthState = new G.DepthState(true, true, 515);
    J.enable$1$x(t1._gl, 2929);
    J.depthMask$1$x(t1._gl, this._depthState._depthBufferWriteEnabled);
    J.depthFunc$1$x(t1._gl, this._depthState._depthBufferFunction);
    this._rasterizerStateDefault = new G.RasterizerState(1029, 2305, 0, 0, false);
    this._rasterizerState = new G.RasterizerState(1029, 2305, 0, 0, false);
    J.enable$1$x(t1._gl, 2884);
    J.cullFace$1$x(t1._gl, this._rasterizerState._cullMode);
    J.frontFace$1$x(t1._gl, this._rasterizerState._frontFace);
    J.disable$1$x(t1._gl, 32823);
    t2 = t1._gl;
    t3 = this._rasterizerState;
    J.polygonOffset$2$x(t2, t3._depthBias, t3._slopeScaleDepthBias);
    J.disable$1$x(t1._gl, 3089);
  },
  _prepareInputs$1$debug: function(debug) {
    var inputLayout, t1, t2, index;
    inputLayout = this._inputLayoutHandle;
    if (inputLayout == null) {
      $.get$_spectreLog().shout$1("Prepare for draw no input layout.");
      return;
    }
    t1 = this._preparedInputLayoutHandle;
    if (t1 == null ? inputLayout == null : t1 === inputLayout)
      return;
    this._preparedInputLayoutHandle = inputLayout;
    for (t1 = this._enabledVertexAttributeArrays, t2 = new H.ListIterator(t1, t1.length, 0, null), H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "JSArray", 0)]), t1 = this.device; t2.moveNext$0();) {
      index = t2._current;
      if (J.$eq(index, 0))
        continue;
      J.disableVertexAttribArray$1$x(t1._gl, index);
    }
    C.JSArray_methods.set$length(this._enabledVertexAttributeArrays, 0);
    H.IterableMixinWorkaround_forEach(inputLayout.attributes, new G.GraphicsContext__prepareInputs_closure(this));
  },
  _prepareInputs$0: function() {
    return this._prepareInputs$1$debug(false);
  },
  _prepareTextures$0: function() {
    var i, t1, texture, sampler;
    for (i = 0; t1 = this._textures, i < t1.length; ++i) {
      texture = t1[i];
      t1 = this._samplers;
      if (i >= t1.length)
        throw H.ioore(t1, i);
      sampler = t1[i];
      if (texture == null)
        continue;
      if (sampler == null) {
        $.get$_spectreLog().shout$1("Texture " + i + " has no sampler set.");
        continue;
      }
      this.setTexture$2(i, texture);
      this.setSampler$2(i, sampler);
    }
  },
  reset$0: function(_) {
    var i, t1, t2, index;
    this._primitiveTopology = null;
    this.setIndexBuffer$1(null);
    this.setShaderProgram$1(null);
    for (i = 0; i < this._textures.length; ++i) {
      this.setTexture$2(i, null);
      t1 = this._samplers;
      if (i >= t1.length)
        throw H.ioore(t1, i);
      t1[i] = null;
    }
    this._setActiveTextureUnit$1(0);
    this.setRenderTarget$1(null);
    for (t1 = this._enabledVertexAttributeArrays, t2 = new H.ListIterator(t1, t1.length, 0, null), H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "JSArray", 0)]), t1 = this.device; t2.moveNext$0();) {
      index = t2._current;
      if (J.$eq(index, 0))
        continue;
      J.disableVertexAttribArray$1$x(t1._gl, index);
    }
    this._preparedInputLayoutHandle = null;
    C.JSArray_methods.set$length(this._enabledVertexAttributeArrays, 0);
    for (t1 = this._vertexBuffers, t2 = t1.length, i = 0; i < t2; ++i)
      t1[i] = null;
    this._inputLayoutHandle = null;
    this.setBlendState$1(this._blendStateDefault);
    this.setDepthState$1(this._depthStateDefault);
    this.setRasterizerState$1(this._rasterizerStateDefault);
  },
  setIndexBuffer$1: function(indexBuffer) {
    var t1 = this._indexBuffer;
    if (t1 == null ? indexBuffer != null : t1 !== indexBuffer) {
      this._indexBuffer = indexBuffer;
      t1 = this.device;
      if (indexBuffer != null)
        J.bindBuffer$2$x(t1._gl, 34963, indexBuffer._deviceBuffer);
      else
        J.bindBuffer$2$x(t1._gl, 34963, null);
    }
    this._preparedInputLayoutHandle = null;
  },
  setVertexBuffers$2: function(startSlot, vertexBufferHandles) {
    var limit, t1, t2, i, t3;
    limit = 1 + startSlot;
    for (t1 = this._vertexBuffers, t2 = t1.length, i = startSlot; i < limit; ++i) {
      t3 = vertexBufferHandles[i - startSlot];
      if (i < 0 || i >= t2)
        throw H.ioore(t1, i);
      t1[i] = t3;
    }
    this._preparedInputLayoutHandle = null;
  },
  setIndexedMesh$1: function(indexedMesh) {
    if (indexedMesh == null)
      return;
    this._primitiveTopology = indexedMesh.primitiveTopology;
    this.setIndexBuffer$1(indexedMesh._deviceIndexBuffer);
    this.setVertexBuffers$2(0, [indexedMesh._deviceVertexBuffer]);
  },
  setMesh$1: function(mesh) {
    this._primitiveTopology = mesh.primitiveTopology;
    this.setIndexBuffer$1(null);
    this.setVertexBuffers$2(0, [mesh._deviceVertexBuffer]);
  },
  setShaderProgram$1: function(shaderProgram) {
    var old, t1;
    old = this._shaderProgram;
    if (old == null ? shaderProgram != null : old !== shaderProgram) {
      t1 = this.device;
      if (shaderProgram != null)
        J.useProgram$1$x(t1._gl, shaderProgram._program);
      else
        J.useProgram$1$x(t1._gl, null);
      this._shaderProgram = shaderProgram;
    }
    return old;
  },
  setViewport$1: function(viewport) {
    var t1, t2, t3, t4;
    if (viewport == null)
      return;
    t1 = this._viewport;
    t2 = t1._x;
    t3 = viewport._x;
    if (t2 === t3)
      if (t1._y === viewport._y) {
        t2 = t1._width;
        t4 = viewport._width;
        if (t2 == null ? t4 == null : t2 === t4) {
          t1 = t1._height;
          t2 = viewport._height;
          t2 = t1 == null ? t2 != null : t1 !== t2;
          t1 = t2;
        } else
          t1 = true;
      } else
        t1 = true;
    else
      t1 = true;
    if (t1) {
      J.viewport$4$x(this.device._gl, t3, viewport._y, viewport._width, viewport._height);
      this._viewport._x = viewport._x;
      this._viewport._y = viewport._y;
      t1 = this._viewport;
      t2 = viewport._width;
      t1.toString;
      if (typeof t2 !== "number")
        throw t2.$lt();
      if (t2 < 0)
        H.throwExpression(new P.ArgumentError("width must be a positive number"));
      t1._width = t2;
      t1 = this._viewport;
      t2 = viewport._height;
      t1.toString;
      if (typeof t2 !== "number")
        throw t2.$lt();
      if (t2 < 0)
        H.throwExpression(new P.ArgumentError("height must be a positive number"));
      t1._height = t2;
    }
    t1 = this._viewport;
    t2 = t1._minDepth;
    t3 = viewport._minDepth;
    if (t2 !== t3 || t1._maxDepth !== viewport._maxDepth) {
      J.depthRange$2$x(this.device._gl, t3, viewport._maxDepth);
      this._viewport.set$minDepth(viewport._minDepth);
      this._viewport.set$maxDepth(viewport._maxDepth);
    }
  },
  setBlendState$1: function(blendState) {
    var t1, t2, t3, t4;
    if (blendState == null) {
      this.setBlendState$1(this._blendStateDefault);
      return;
    }
    t1 = this._blendState._enabled;
    t2 = blendState._enabled;
    if (t1 !== t2) {
      t1 = this.device;
      if (t2)
        J.enable$1$x(t1._gl, 3042);
      else
        J.disable$1$x(t1._gl, 3042);
      this._blendState._enabled = blendState._enabled;
    }
    t1 = this._blendState;
    t2 = t1._writeRenderTargetRed;
    t3 = blendState._writeRenderTargetRed;
    if (t2 !== t3 || t1._writeRenderTargetGreen !== blendState._writeRenderTargetGreen || t1._writeRenderTargetBlue !== blendState._writeRenderTargetBlue || t1._writeRenderTargetAlpha !== blendState._writeRenderTargetAlpha) {
      J.colorMask$4$x(this.device._gl, t3, blendState._writeRenderTargetGreen, blendState._writeRenderTargetBlue, blendState._writeRenderTargetAlpha);
      this._blendState._writeRenderTargetRed = blendState._writeRenderTargetRed;
      this._blendState._writeRenderTargetGreen = blendState._writeRenderTargetGreen;
      this._blendState._writeRenderTargetBlue = blendState._writeRenderTargetBlue;
      this._blendState._writeRenderTargetAlpha = blendState._writeRenderTargetAlpha;
    }
    t1 = this._blendState;
    if (t1._enabled) {
      t2 = t1._colorSourceBlend;
      t3 = blendState._colorSourceBlend;
      if (t2 == null ? t3 == null : t2 === t3) {
        t2 = t1._colorDestinationBlend;
        t4 = blendState._colorDestinationBlend;
        if (t2 == null ? t4 == null : t2 === t4) {
          t2 = t1._alphaSourceBlend;
          t4 = blendState._alphaSourceBlend;
          if (t2 == null ? t4 == null : t2 === t4) {
            t1 = t1._alphaDestinationBlend;
            t2 = blendState._alphaDestinationBlend;
            t2 = t1 == null ? t2 != null : t1 !== t2;
            t1 = t2;
          } else
            t1 = true;
        } else
          t1 = true;
      } else
        t1 = true;
      if (t1) {
        J.blendFuncSeparate$4$x(this.device._gl, t3, blendState._colorDestinationBlend, blendState._alphaSourceBlend, blendState._alphaDestinationBlend);
        this._blendState.set$colorSourceBlend(blendState._colorSourceBlend);
        this._blendState.set$colorDestinationBlend(blendState._colorDestinationBlend);
        this._blendState.set$alphaSourceBlend(blendState._alphaSourceBlend);
        this._blendState.set$alphaDestinationBlend(blendState._alphaDestinationBlend);
      }
      t1 = this._blendState;
      t2 = t1._colorBlendOperation;
      t3 = blendState._colorBlendOperation;
      if (t2 == null ? t3 == null : t2 === t3) {
        t1 = t1._alphaBlendOperation;
        t2 = blendState._alphaBlendOperation;
        t2 = t1 == null ? t2 != null : t1 !== t2;
        t1 = t2;
      } else
        t1 = true;
      if (t1) {
        J.blendEquationSeparate$2$x(this.device._gl, t3, blendState._alphaBlendOperation);
        this._blendState.set$colorBlendOperation(blendState._colorBlendOperation);
        this._blendState.set$alphaBlendOperation(blendState._alphaBlendOperation);
      }
      t1 = this._blendState;
      t2 = t1._blendFactorRed;
      t3 = blendState._blendFactorRed;
      if (t2 !== t3 || t1._blendFactorGreen !== blendState._blendFactorGreen || t1._blendFactorBlue !== blendState._blendFactorBlue || t1._blendFactorAlpha !== blendState._blendFactorAlpha) {
        J.blendColor$4$x(this.device._gl, t3, blendState._blendFactorGreen, blendState._blendFactorBlue, blendState._blendFactorAlpha);
        this._blendState.set$blendFactorRed(blendState._blendFactorRed);
        this._blendState.set$blendFactorGreen(blendState._blendFactorGreen);
        this._blendState.set$blendFactorBlue(blendState._blendFactorBlue);
        this._blendState.set$blendFactorAlpha(blendState._blendFactorAlpha);
      }
    }
  },
  setDepthState$1: function(depthState) {
    var t1, t2;
    if (depthState == null)
      return;
    t1 = this._depthState._depthBufferEnabled;
    t2 = depthState._depthBufferEnabled;
    if (t1 !== t2) {
      t1 = this.device;
      if (t2)
        J.enable$1$x(t1._gl, 2929);
      else
        J.disable$1$x(t1._gl, 2929);
      this._depthState._depthBufferEnabled = depthState._depthBufferEnabled;
    }
    t1 = this._depthState;
    if (t1._depthBufferEnabled) {
      t1 = t1._depthBufferFunction;
      t2 = depthState._depthBufferFunction;
      t2 = t1 == null ? t2 != null : t1 !== t2;
      t1 = t2;
    } else
      t1 = false;
    if (t1) {
      J.depthFunc$1$x(this.device._gl, depthState._depthBufferFunction);
      this._depthState.set$depthBufferFunction(depthState._depthBufferFunction);
    }
    t1 = this._depthState._depthBufferWriteEnabled;
    t2 = depthState._depthBufferWriteEnabled;
    if (t1 !== t2) {
      J.depthMask$1$x(this.device._gl, t2);
      this._depthState._depthBufferWriteEnabled = depthState._depthBufferWriteEnabled;
    }
  },
  setRasterizerState$1: function(rasterizerState) {
    var t1, t2, offsetEnabled, t3;
    if (rasterizerState == null) {
      this.setRasterizerState$1(this._rasterizerStateDefault);
      return;
    }
    t1 = this._rasterizerState._cullMode;
    t2 = rasterizerState._cullMode;
    if (t1 == null ? t2 != null : t1 !== t2)
      if (t2 === 0) {
        J.disable$1$x(this.device._gl, 2884);
        this._rasterizerState.set$cullMode(rasterizerState._cullMode);
      } else if (t1 === 0)
        J.enable$1$x(this.device._gl, 2884);
    t1 = rasterizerState._cullMode;
    if (t1 !== 0) {
      t2 = this._rasterizerState._cullMode;
      if (t2 == null ? t1 != null : t2 !== t1) {
        J.cullFace$1$x(this.device._gl, t1);
        this._rasterizerState.set$cullMode(rasterizerState._cullMode);
      }
      t1 = this._rasterizerState._frontFace;
      t2 = rasterizerState._frontFace;
      if (t1 == null ? t2 != null : t1 !== t2) {
        J.frontFace$1$x(this.device._gl, t2);
        t1 = this._rasterizerState;
        t1.set$frontFace(t1, rasterizerState._frontFace);
      }
    }
    t1 = this._rasterizerState;
    offsetEnabled = t1._depthBias !== 0 || t1._slopeScaleDepthBias !== 0;
    if (rasterizerState._depthBias !== 0 || rasterizerState._slopeScaleDepthBias !== 0) {
      if (!offsetEnabled)
        J.enable$1$x(this.device._gl, 32823);
      t1 = this._rasterizerState;
      t2 = t1._depthBias;
      t3 = rasterizerState._depthBias;
      if (t2 !== t3 || t1._slopeScaleDepthBias !== rasterizerState._slopeScaleDepthBias) {
        J.polygonOffset$2$x(this.device._gl, t3, rasterizerState._slopeScaleDepthBias);
        this._rasterizerState._depthBias = rasterizerState._depthBias;
        this._rasterizerState._slopeScaleDepthBias = rasterizerState._slopeScaleDepthBias;
      }
    } else if (offsetEnabled) {
      J.disable$1$x(this.device._gl, 32823);
      this._rasterizerState._depthBias = rasterizerState._depthBias;
      this._rasterizerState._slopeScaleDepthBias = rasterizerState._slopeScaleDepthBias;
    }
    t1 = this._rasterizerState._scissorTestEnabled;
    t2 = rasterizerState._scissorTestEnabled;
    if (t1 !== t2) {
      t1 = this.device;
      if (t2)
        J.enable$1$x(t1._gl, 3089);
      else
        J.disable$1$x(t1._gl, 3089);
      this._rasterizerState._scissorTestEnabled = rasterizerState._scissorTestEnabled;
    }
  },
  setRenderTarget$1: function(renderTarget) {
    var old = this._renderTarget;
    return old;
  },
  _findUniform$1: function($name) {
    var sp, t1;
    sp = this._shaderProgram;
    if (sp == null)
      return;
    t1 = sp.uniforms;
    return t1.$index(t1, $name);
  },
  setConstant$2: function($name, argument) {
    var uniform = this._findUniform$1($name);
    if (uniform != null)
      uniform._apply$3(this.device, J.get$location$x(uniform), argument);
    else if (this._shaderProgram == null)
      $.get$_spectreLog().shout$1("Cannot set " + $name + ": no ShaderProgram bound.");
  },
  clearColorBuffer$4: function(r, g, b, a) {
    if (r !== this._clearR || g !== this._clearG || b !== this._clearB || a !== this._clearA) {
      J.clearColor$4$x(this.device._gl, r, g, b, a);
      this._clearR = r;
      this._clearG = g;
      this._clearB = b;
      this._clearA = a;
    }
    J.clear$1$ax(this.device._gl, 16384);
  },
  clearDepthBuffer$1: function(depth) {
    if (depth !== this._clearD) {
      J.clearDepth$1$x(this.device._gl, depth);
      this._clearD = depth;
    }
    J.clear$1$ax(this.device._gl, 256);
  },
  _setActiveTextureUnit$1: function(textureUnit) {
    var t1;
    if (this._activeTextureUnit !== textureUnit) {
      t1 = this.device._gl;
      if (typeof 33984 !== "number")
        throw 33984 .$add();
      J.activeTexture$1$x(t1, 33984 + textureUnit);
      this._activeTextureUnit = textureUnit;
    }
  },
  setTexture$2: function(textureUnit, texture) {
    var t1, old;
    if (textureUnit < 0 || textureUnit >= this._textures.length)
      throw H.wrapException(new P.ArgumentError("Invalid texture unit."));
    t1 = this._textures;
    if (textureUnit >>> 0 !== textureUnit || textureUnit >= t1.length)
      throw H.ioore(t1, textureUnit);
    old = t1[textureUnit];
    if (this._activeTextureUnit !== textureUnit) {
      t1 = this.device._gl;
      if (typeof 33984 !== "number")
        throw 33984 .$add();
      J.activeTexture$1$x(t1, 33984 + textureUnit);
      this._activeTextureUnit = textureUnit;
    }
    t1 = this._textures;
    if (textureUnit >= t1.length)
      throw H.ioore(t1, textureUnit);
    t1 = t1[textureUnit];
    if (t1 == null ? texture != null : t1 !== texture) {
      t1 = this.device;
      J.bindTexture$2$x(t1._gl, 3553, null);
      J.bindTexture$2$x(t1._gl, 34067, null);
      if (texture != null)
        J.bindTexture$2$x(t1._gl, texture._bindTarget, texture._deviceTexture);
      t1 = this._textures;
      if (textureUnit >= t1.length)
        throw H.ioore(t1, textureUnit);
      t1[textureUnit] = texture;
    }
    return old;
  },
  setSampler$2: function(textureUnit, sampler) {
    var t1, texture, textureWrapS, textureWrapT, textureMinFilter, textureMagFilter;
    if (textureUnit < 0 || textureUnit >= this._textures.length)
      throw H.wrapException(new P.ArgumentError("Invalid texture unit."));
    if (this._activeTextureUnit !== textureUnit) {
      t1 = this.device._gl;
      if (typeof 33984 !== "number")
        throw 33984 .$add();
      J.activeTexture$1$x(t1, 33984 + textureUnit);
      this._activeTextureUnit = textureUnit;
    }
    t1 = this._textures;
    if (textureUnit < 0 || textureUnit >= t1.length)
      throw H.ioore(t1, textureUnit);
    texture = t1[textureUnit];
    t1 = this._samplers;
    if (textureUnit >= t1.length)
      throw H.ioore(t1, textureUnit);
    t1[textureUnit] = sampler;
    if (texture == null)
      return;
    if (sampler != null) {
      textureWrapS = sampler._addressU;
      textureWrapT = sampler._addressV;
      textureMinFilter = sampler._minFilter;
      textureMagFilter = sampler._magFilter;
    } else {
      textureWrapS = 10497;
      textureWrapT = 10497;
      textureMinFilter = 9986;
      textureMagFilter = 9729;
    }
    t1 = texture._textureWrapS;
    if (t1 == null ? textureWrapS != null : t1 !== textureWrapS) {
      J.texParameteri$3$x(this.device._gl, texture._textureTarget, 10242, textureWrapS);
      texture._textureWrapS = textureWrapS;
    }
    t1 = texture._textureWrapT;
    if (t1 == null ? textureWrapT != null : t1 !== textureWrapT) {
      J.texParameteri$3$x(this.device._gl, texture._textureTarget, 10243, textureWrapT);
      texture._textureWrapT = textureWrapT;
    }
    t1 = texture._textureMinFilter;
    if (t1 == null ? textureMinFilter != null : t1 !== textureMinFilter) {
      J.texParameteri$3$x(this.device._gl, texture._textureTarget, 10241, textureMinFilter);
      texture._textureMinFilter = textureMinFilter;
    }
    t1 = texture._textureMagFilter;
    if (t1 == null ? textureMagFilter != null : t1 !== textureMagFilter) {
      J.texParameteri$3$x(this.device._gl, texture._textureTarget, 10240, textureMagFilter);
      texture._textureMagFilter = textureMagFilter;
    }
  },
  _preDraw$0: function() {
    this._prepareInputs$0();
    this._prepareTextures$0();
    if (this.device._capabilities._multipleRenderTargets != null)
      ;
  },
  drawIndexed$2: function(numIndices, indexOffset) {
    if (numIndices === 0)
      return;
    this._preDraw$0();
    J.drawElements$4$x(this.device._gl, this._primitiveTopology, numIndices, 5123, indexOffset);
  },
  drawIndexedMesh$1: function(indexedMesh) {
    if (indexedMesh == null)
      return;
    this.drawIndexed$2(indexedMesh.count, 0);
  },
  drawMesh$1: function(mesh) {
    this.draw$2(mesh.count, 0);
  },
  draw$2: function(numVertices, vertexOffset) {
    if (numVertices === 0)
      return;
    this._preDraw$0();
    J.drawArrays$3$x(this.device._gl, this._primitiveTopology, vertexOffset, numVertices);
  },
  GraphicsContext$1: function(device) {
    var numTextureUnits, t1;
    numTextureUnits = this.device._capabilities._textureUnits;
    if (typeof numTextureUnits !== "number")
      throw numTextureUnits.$sub();
    this._tempTextureUnit = numTextureUnits - 1;
    t1 = P.List_List(numTextureUnits, G.SpectreTexture);
    H.setRuntimeTypeInfo(t1, [G.SpectreTexture]);
    this._textures = t1;
    t1 = P.List_List(numTextureUnits, G.SamplerState);
    H.setRuntimeTypeInfo(t1, [G.SamplerState]);
    this._samplers = t1;
    t1 = P.List_List(2, G.VertexBuffer);
    H.setRuntimeTypeInfo(t1, [G.VertexBuffer]);
    this._vertexBuffers = t1;
    t1 = P.List_List(null, J.JSInt);
    H.setRuntimeTypeInfo(t1, [J.JSInt]);
    this._enabledVertexAttributeArrays = t1;
    this._initializeState$0();
    this.reset$0(this);
  },
  static: {
GraphicsContext$: function(device) {
  var t1 = new G.GraphicsContext(device, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
  t1.GraphicsContext$1(device);
  return t1;
}}

},

GraphicsContext__prepareInputs_closure: {"": "Closure;this_0",
  call$1: function(element) {
    var t1, t2, t3, vb, t4;
    t1 = this.this_0;
    t2 = t1._vertexBuffers;
    t3 = element.get$vboSlot();
    if (t3 < 0 || t3 >= t2.length)
      throw H.ioore(t2, t3);
    vb = t2[t3];
    if (vb == null) {
      $.get$_spectreLog().shout$1("Prepare for draw referenced a null vertex buffer object");
      return;
    }
    t2 = t1.device;
    t3 = t2._gl;
    t4 = element.attributeIndex;
    J.enableVertexAttribArray$1$x(t3, t4);
    J.bindBuffer$2$x(vb.device._gl, vb._bindTarget, vb._deviceBuffer);
    J.vertexAttribPointer$6$x(t2._gl, t4, element.dataCount, element.dataType, element.normalizeData, element.attributeStride, element.attributeOffset);
    t1._enabledVertexAttributeArrays.push(t4);
  },
  $is_args1: true
},

GraphicsDevice: {"": "Object;_surface,_context,_capabilities,_gl,children",
  get$gl: function() {
    return this._gl;
  },
  _addChild$1: function(child) {
    var t1 = this.children;
    if (t1.contains$1(t1, child))
      throw H.wrapException(P.StateError$(H.S(child) + " is already registered."));
    t1.add$1(t1, child);
  },
  GraphicsDevice$2: function(surface, config) {
    this._surface = surface;
    this._gl = J.getContext3d$1$stencil$x(surface, new G.GraphicsDeviceConfig(false)._stencilBuffer);
    this._capabilities = G.GraphicsDeviceCapabilities$_fromContext(this._gl);
    $.hierarchicalLoggingEnabled = true;
    $.get$_spectreLog().get$onRecord().listen$1(new G.GraphicsDevice_closure());
    $.get$_spectreLog().set$level(C.Level_CONFIG_700);
    $.get$_spectreLog().config$1(H.S(this._capabilities));
    this._context = G.GraphicsContext$(this);
    $.RenderTarget__systemRenderTarget = G.RenderTarget$systemTarget("WebGLFrontBuffer", this);
  },
  static: {
GraphicsDevice$: function(surface, config) {
  var t1 = new G.GraphicsDevice(null, null, null, null, P.LinkedHashSet_LinkedHashSet(null, null, null, G.DeviceChild));
  t1.GraphicsDevice$2(surface, config);
  return t1;
}}

},

GraphicsDevice_closure: {"": "Closure;",
  call$1: function(record) {
    P.print("[" + record.get$level().name + "] " + record.get$message(record));
  },
  $is_args1: true
},

GraphicsDeviceCapabilities: {"": "Object;_vendor,_renderer,_textureUnits,_vertexShaderTextureUnits,_maxTextureSize,_maxCubeMapTextureSize,_maxAnisotropyLevel,_maxVertexAttribs,_maxVaryingVectors,_maxVertexShaderUniforms,_maxFragmentShaderUniforms,_depthBuffer,_stencilBuffer,_depthBufferSize,_stencilBufferSize,_floatTextures,_halfFloatTextures,_standardDerivatives,_vertexArrayObjects,_debugRendererInfo,_debugShaders,_unsignedIntIndices,_anisotropicFiltering,_loseContext,_compressedTextureS3TC,_depthTextures,_compressedTextureATC,_compressedTexturePVRTC,_multipleRenderTargets,_maxRenderTargets,_instancedArrays",
  toString$0: function(_) {
    var vendorString, rendererString;
    vendorString = J.get$isEmpty$asx(this._vendor) ? "Unknown" : this._vendor;
    rendererString = J.get$isEmpty$asx(this._renderer) ? "Unknown" : this._renderer;
    return "Vendor: " + H.S(vendorString) + "\nRenderer: " + H.S(rendererString) + "\n\nBuffer Size\nDepth: " + H.S(this._depthBufferSize) + "\nStencil: " + H.S(this._stencilBufferSize) + "\n\nDevice stats\nTexture Units: " + H.S(this._textureUnits) + "\nVertex Texture Units: " + H.S(this._vertexShaderTextureUnits) + "\nMax Texture Size: " + H.S(this._maxTextureSize) + "x" + H.S(this._maxTextureSize) + "\nMax Cube Map Size: " + H.S(this._maxCubeMapTextureSize) + "x" + H.S(this._maxCubeMapTextureSize) + "\nMax Anisotropy Level: " + H.S(this._maxAnisotropyLevel) + "\nMax Vertex Attributes: " + H.S(this._maxVertexAttribs) + "\nMax Varying Vectors: " + H.S(this._maxVaryingVectors) + "\nMax Vertex Shader Uniforms: " + H.S(this._maxVertexShaderUniforms) + "\nMax Fragment Shader Uniforms: " + H.S(this._maxFragmentShaderUniforms) + "\nMax Render Targets: " + H.S(this._maxRenderTargets) + "\n\nExtensions\nANGLE_instanced_arrays: " + H.S(this._instancedArrays) + "\nEXT_draw_buffers: " + (this._multipleRenderTargets != null) + "\nEXT_texture_filter_anisotropic: " + H.S(this._anisotropicFiltering) + "\nOES_element_index_uint: " + H.S(this._unsignedIntIndices) + "\nOES_texture_float: " + H.S(this._floatTextures) + "\nOES_texture_half_float: " + H.S(this._halfFloatTextures) + "\nOES_standard_derivatives: " + H.S(this._standardDerivatives) + "\nOES_vertex_array_object: " + H.S(this._vertexArrayObjects) + "\nWEBGL_compressed_texture_s3tc: " + H.S(this._compressedTextureS3TC) + "\nWEBGL_compressed_texture_atc: " + H.S(this._compressedTextureATC) + "\nWEBGL_compressed_texture_pvrtc: " + H.S(this._compressedTexturePVRTC) + "\nWEBGL_debug_renderer_info: " + H.S(this._debugRendererInfo) + "\nWEBGL_debug_shaders: " + H.S(this._debugShaders) + "\nWEBGL_depth_texture: " + H.S(this._depthTextures) + "\nWEBGL_lose_context: " + H.S(this._loseContext) + "\n        ";
  },
  _queryDeviceContext$1: function(gl) {
    var attributes, t1;
    attributes = J.getContextAttributes$0$x(gl);
    t1 = J.getInterceptor$x(attributes);
    this._depthBuffer = t1.get$depth(attributes);
    this._stencilBuffer = t1.get$stencil(attributes);
  },
  _queryDeviceInfo$1: function(gl) {
    this._textureUnits = J.getParameter$1$x(gl, 34930);
    this._vertexShaderTextureUnits = gl.getParameter(35660);
    this._maxTextureSize = gl.getParameter(3379);
    this._maxCubeMapTextureSize = gl.getParameter(34076);
    this._maxVertexAttribs = gl.getParameter(34921);
    this._maxVaryingVectors = gl.getParameter(36348);
    this._maxVertexShaderUniforms = gl.getParameter(36347);
    this._maxFragmentShaderUniforms = gl.getParameter(36349);
    this._depthBufferSize = gl.getParameter(3414);
    this._stencilBufferSize = gl.getParameter(3415);
  },
  _queryExtensionInfo$1: function(gl) {
    this._floatTextures = G.GraphicsDeviceCapabilities__getExtension(gl, "OES_texture_float") != null;
    this._halfFloatTextures = G.GraphicsDeviceCapabilities__getExtension(gl, "OES_texture_half_float") != null;
    this._loseContext = G.GraphicsDeviceCapabilities__getExtension(gl, "WEBGL_lose_context") != null;
    this._standardDerivatives = G.GraphicsDeviceCapabilities__getExtension(gl, "OES_standard_derivatives") != null;
    this._vertexArrayObjects = G.GraphicsDeviceCapabilities__getExtension(gl, "OES_vertex_array_object") != null;
    this._debugRendererInfo = G.GraphicsDeviceCapabilities__getExtension(gl, "WEBGL_debug_renderer_info") != null;
    this._debugShaders = G.GraphicsDeviceCapabilities__getExtension(gl, "WEBGL_debug_shaders") != null;
    this._compressedTextureS3TC = G.GraphicsDeviceCapabilities__getExtension(gl, "WEBGL_compressed_texture_s3tc") != null;
    this._depthTextures = G.GraphicsDeviceCapabilities__getExtension(gl, "WEBGL_depth_texture") != null;
    this._unsignedIntIndices = false;
    G.GraphicsDeviceCapabilities__getExtension(gl, "EXT_texture_filter_anisotropic");
    this._anisotropicFiltering = true;
    this._maxAnisotropyLevel = J.getParameter$1$x(gl, 34047);
    this._compressedTextureATC = G.GraphicsDeviceCapabilities__getExtension(gl, "WEBGL_compressed_texture_atc") != null;
    this._compressedTexturePVRTC = G.GraphicsDeviceCapabilities__getExtension(gl, "WEBGL_compressed_texture_pvrtc") != null;
    this._multipleRenderTargets = G.GraphicsDeviceCapabilities__getExtension(gl, "WEBGL_draw_buffers");
    if (this._multipleRenderTargets != null)
      this._maxRenderTargets = P.min(J.getParameter$1$x(gl, 36063), gl.getParameter(34852));
  },
  GraphicsDeviceCapabilities$_fromContext$1: function(gl) {
    this._queryDeviceContext$1(gl);
    this._queryDeviceInfo$1(gl);
    this._queryExtensionInfo$1(gl);
    if (this._debugRendererInfo === true) {
      this._vendor = J.getParameter$1$x(gl, 37445);
      this._renderer = gl.getParameter(37446);
    } else {
      this._vendor = "";
      this._renderer = "";
    }
  },
  static: {
"": "GraphicsDeviceCapabilities__vendorExtensions",
GraphicsDeviceCapabilities$_fromContext: function(gl) {
  var t1 = new G.GraphicsDeviceCapabilities(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 1, null);
  t1.GraphicsDeviceCapabilities$_fromContext$1(gl);
  return t1;
},

GraphicsDeviceCapabilities__getExtension: function(gl, $name) {
  var t1, i, extension;
  $.get$GraphicsDeviceCapabilities__vendorExtensions();
  for (t1 = J.getInterceptor$x(gl), i = 0; i < 3; ++i) {
    extension = t1.getExtension$1(gl, $.get$GraphicsDeviceCapabilities__vendorExtensions()[i] + $name);
    if (extension != null)
      return extension;
  }
  return;
}}

},

GraphicsDeviceConfig: {"": "Object;_stencilBuffer"},

IndexBuffer: {"": "SpectreBuffer;_deviceBuffer,_bindTarget,_bindingParam,_usage,_size,device,name,_referenceCount,_disposed"},

InputLayout: {"": "DeviceChild;attributes,missingAttributes,_shaderProgram,_mesh,device,name,_referenceCount,_disposed",
  _refresh$0: function() {
    C.JSArray_methods.set$length(this.attributes, 0);
    C.JSArray_methods.set$length(this.missingAttributes, 0);
    var t1 = this._shaderProgram;
    if (t1 == null || this._mesh == null)
      return;
    t1 = t1.attributes;
    if (t1._collection$_length === 0) {
      $.get$_spectreLog().fine$1("InputLayout " + this.name + " shaderProgram has 0 attributes.");
      return;
    }
    if (this._mesh.attributes._collection$_length === 0) {
      $.get$_spectreLog().fine$1("InputLayout " + this.name + " mesh has 0 attributes.");
      return;
    }
    t1.forEach$1(t1, new G.InputLayout__refresh_closure(this));
  }
},

InputLayout__refresh_closure: {"": "Closure;this_0",
  call$2: function($name, shaderProgramAttribute) {
    var t1, t2, meshAttribute;
    t1 = this.this_0;
    t2 = t1._mesh.attributes;
    meshAttribute = t2.$index(t2, $name);
    if (meshAttribute == null)
      t1.missingAttributes.push(shaderProgramAttribute);
    else
      t1.attributes.push(G.VertexAttribute$atAttributeIndex(meshAttribute.get$attribute(), J.get$location$x(shaderProgramAttribute)));
  },
  $is_args2: true
},

SpectreMeshAttribute: {"": "Object;name>,attribute<",
  toString$0: function(_) {
    return this.name + " " + H.S(this.attribute);
  }
},

SpectreMesh: {"": "DeviceChild;"},

SingleArrayMesh: {"": "SpectreMesh;_deviceVertexBuffer,attributes,count,primitiveTopology,device,name,_referenceCount,_disposed"},

SingleArrayIndexedMesh: {"": "SpectreMesh;_deviceVertexBuffer,_deviceIndexBuffer,attributes,count,primitiveTopology,device,name,_referenceCount,_disposed",
  SingleArrayIndexedMesh$2: function($name, device) {
    var t1, t2;
    t1 = new G.VertexBuffer(null, 34962, 34964, 35048, 0, device, $name, 1, false);
    t2 = t1.device;
    if (t2 == null)
      H.throwExpression(new P.ArgumentError("device cannot be null"));
    t2._addChild$1(t1);
    t1._deviceBuffer = J.createBuffer$0$x(device._gl);
    this._deviceVertexBuffer = t1;
    t1 = new G.IndexBuffer(null, 34963, 34965, 35048, 0, device, $name, 1, false);
    t2 = t1.device;
    if (t2 == null)
      H.throwExpression(new P.ArgumentError("device cannot be null"));
    t2._addChild$1(t1);
    t1._deviceBuffer = J.createBuffer$0$x(device._gl);
    this._deviceIndexBuffer = t1;
  },
  static: {
SingleArrayIndexedMesh$: function($name, device) {
  var t1, t2;
  t1 = new G.SingleArrayIndexedMesh(null, null, P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSString, G.SpectreMeshAttribute), 0, 4, device, $name, 1, false);
  t2 = t1.device;
  if (t2 == null)
    H.throwExpression(new P.ArgumentError("device cannot be null"));
  t2._addChild$1(t1);
  t1.SingleArrayIndexedMesh$2($name, device);
  return t1;
}}

},

RasterizerState: {"": "Object;_cullMode,_frontFace,_depthBias,_slopeScaleDepthBias,_scissorTestEnabled",
  set$cullMode: function(value) {
    if (!G.Enum__isValid($.get$CullMode__values(), value))
      throw H.wrapException(new P.ArgumentError("cullMode must be an enumeration within CullMode."));
    this._cullMode = value;
  },
  set$frontFace: function(_, value) {
    if (!G.Enum__isValid($.get$FrontFace__values(), value))
      throw H.wrapException(new P.ArgumentError("frontFace must be an enumeration within FrontFace."));
    this._frontFace = value;
  },
  static: {
"": "RasterizerState__cullModeName,RasterizerState__frontFaceName,RasterizerState__depthBiasName,RasterizerState__slopeScaleDepthBiasName,RasterizerState__scissorTestEnabledName",
}

},

RenderTarget: {"": "DeviceChild;_bindTarget,_bindingParam,_colorTargets,_drawBuffers,_deviceFramebuffer,_depthTarget,_renderable,_status,device,name,_referenceCount,_disposed",
  RenderTarget$systemTarget$2: function($name, device) {
    this._renderable = true;
  },
  static: {
"": "RenderTarget__systemRenderTarget",
RenderTarget$systemTarget: function($name, device) {
  var t1, t2;
  t1 = P.List_List(0, G.DeviceChild);
  H.setRuntimeTypeInfo(t1, [G.DeviceChild]);
  t2 = P.List_List(0, J.JSInt);
  H.setRuntimeTypeInfo(t2, [J.JSInt]);
  t2 = new G.RenderTarget(36160, 36006, t1, t2, null, null, false, null, device, $name, 1, false);
  t1 = t2.device;
  if (t1 == null)
    H.throwExpression(new P.ArgumentError("device cannot be null"));
  t1._addChild$1(t2);
  t2.RenderTarget$systemTarget$2($name, device);
  return t2;
}}

},

SamplerState: {"": "DeviceChild;_addressU,_addressV,_minFilter,_magFilter,_maxAnisotropy,device,name,_referenceCount,_disposed",
  toString$0: function(_) {
    return "SamplerState name=" + this.name + " addressU=" + H.S(G.Enum__stringify($.get$TextureAddressMode__values(), this._addressU)) + " addressV=" + H.S(G.Enum__stringify($.get$TextureAddressMode__values(), this._addressV)) + " minFilter=" + H.S(G.Enum__stringify($.get$TextureMinFilter__values(), this._minFilter)) + " magFilter=" + H.S(G.Enum__stringify($.get$TextureMinFilter__values(), this._magFilter));
  },
  static: {
"": "SamplerState__addressUName,SamplerState__addressVName,SamplerState__minFilterName,SamplerState__magFilterName,SamplerState__maxAnisotropyName",
SamplerState$linearWrap: function($name, device) {
  var t1, t2;
  t1 = new G.SamplerState(10497, 10497, 9729, 9729, 1, device, $name, 1, false);
  t2 = t1.device;
  if (t2 == null)
    H.throwExpression(new P.ArgumentError("device cannot be null"));
  t2._addChild$1(t1);
  return t1;
}}

},

SpectreShader: {"": "DeviceChild;",
  set$source: function(_, s) {
    this._spectre$_source = s;
    J.shaderSource$2$x(this.device._gl, this._shader, this._spectre$_source);
    if (this.autoCompile)
      this.compile$0();
  },
  get$compiled: function() {
    var t1 = this._shader;
    if (t1 != null)
      return J.getShaderParameter$2$x(this.device._gl, t1, 35713);
    return false;
  },
  compile$0: function() {
    var t1, t2;
    t1 = this.device;
    J.compileShader$1$x(t1._gl, this._shader);
    if (J.getShaderInfoLog$1$x(t1._gl, this._shader) === "")
      $.get$_spectreLog().fine$1("Shader.Compile(" + this.name + "): OKAY.");
    else {
      t2 = this.name;
      if (this.get$compiled() === true)
        $.get$_spectreLog().warning$1("Shader.Compile(" + t2 + "):\n" + J.getShaderInfoLog$1$x(t1._gl, this._shader));
      else
        $.get$_spectreLog().shout$1("Shader.Compile(" + t2 + "):\n" + J.getShaderInfoLog$1$x(t1._gl, this._shader));
    }
  }
},

ShaderProgramUniform: {"": "Object;name>,index>,type>,size>,location>,_apply",
  _apply$3: function(arg0, arg1, arg2) {
    return this._apply.call$3(arg0, arg1, arg2);
  }
},

ShaderProgramSampler: {"": "Object;name>,index>,type>,size>,location>,_textureUnit"},

ShaderProgramAttribute: {"": "Object;name>,index>,type>,size>,_location",
  get$location: function(_) {
    return this._location;
  }
},

ShaderProgram: {"": "DeviceChild;uniforms,attributes,samplers,_isLinked,_linkLog,_vertexShader,_fragmentShader,_program,device,name,_referenceCount,_disposed",
  set$vertexShader: function(vs) {
    var t1 = this._vertexShader;
    if (t1 != null)
      this._detach$1(t1);
    this._vertexShader = vs;
    this._attach$1(this._vertexShader);
  },
  set$fragmentShader: function(fs) {
    var t1 = this._fragmentShader;
    if (t1 != null)
      this._detach$1(t1);
    this._fragmentShader = fs;
    this._attach$1(this._fragmentShader);
  },
  _detach$1: function(shader) {
    if (shader != null)
      J.detachShader$2$x(this.device._gl, this._program, shader._shader);
  },
  _attach$1: function(shader) {
    if (shader != null)
      J.attachShader$2$x(this.device._gl, this._program, shader._shader);
  },
  link$0: function() {
    var t1 = this.device;
    J.linkProgram$1$x(t1._gl, this._program);
    this._linkLog = J.getProgramInfoLog$1$x(t1._gl, this._program);
    this._isLinked = J.getProgramParameter$2$x(t1._gl, this._program, 35714);
    if (this._linkLog === "")
      $.get$_spectreLog().fine$1("ShaderProgram.Link(" + this.name + "): OKAY.");
    else {
      t1 = this.name;
      if (this._isLinked === true)
        $.get$_spectreLog().warning$1("ShaderProgram.Link(" + t1 + "):\n" + this._linkLog);
      else
        $.get$_spectreLog().shout$1("ShaderProgram.Link(" + t1 + "):\n" + this._linkLog);
    }
    this.refreshUniforms$0();
    this.refreshAttributes$0();
    this.logUniforms$0();
    this.logSamplers$0();
    this.logAttributes$0();
  },
  _convertType$1: function(type) {
    switch (type) {
      case 5126:
        return "float";
      case 35664:
        return "vec2";
      case 35665:
        return "vec3";
      case 35666:
        return "vec4";
      case 35674:
        return "mat2";
      case 35675:
        return "mat3";
      case 35676:
        return "mat4";
      case 35670:
        return "bool";
      case 35671:
        return "bvec2";
      case 35672:
        return "bvec3";
      case 35673:
        return "bvec4";
      case 5124:
        return "int";
      case 35667:
        return "ivec2";
      case 35668:
        return "ivec3";
      case 35669:
        return "ivec4";
      case 35678:
        return "sampler2D";
      case 35680:
        return "samplerCube";
      default:
        throw H.wrapException(P.FallThroughError$());
    }
  },
  _findUniformSetForType$1: function(type) {
    switch (type) {
      case 5126:
        return this.get$_setUniform1f();
      case 35664:
        return this.get$_setUniform2f();
      case 35665:
        return this.get$_setUniform3f();
      case 35666:
        return this.get$_setUniform4f();
      case 35674:
        return this.get$_setUniformMatrix2();
      case 35675:
        return this.get$_setUniformMatrix3();
      case 35676:
        return this.get$_setUniformMatrix4();
      case 35670:
        return this.get$_setUniform1i();
      case 35671:
        return this.get$_setUniform2i();
      case 35672:
        return this.get$_setUniform3i();
      case 35673:
        return this.get$_setUniform4i();
      case 5124:
        return this.get$_setUniform1i();
      case 35667:
        return this.get$_setUniform2i();
      case 35668:
        return this.get$_setUniform3i();
      case 35669:
        return this.get$_setUniform4i();
      default:
        throw H.wrapException(P.FallThroughError$());
    }
  },
  refreshUniforms$0: function() {
    var t1, numUniforms, t2, t3, oldBind, numSamplers, i, t4, activeUniform, $location, t5, t6, t7, sampler, numSamplers0;
    t1 = this.device;
    numUniforms = J.getProgramParameter$2$x(t1._gl, this._program, 35718);
    t2 = this.uniforms;
    t2.clear$0(t2);
    t3 = this.samplers;
    t3.clear$0(t3);
    if (numUniforms == null)
      return;
    oldBind = J.getParameter$1$x(t1._gl, 35725);
    J.useProgram$1$x(t1._gl, this._program);
    if (typeof numUniforms !== "number")
      throw H.iae(numUniforms);
    numSamplers = 0;
    i = 0;
    for (; t4 = t1._gl, i < numUniforms; ++i) {
      activeUniform = J.getActiveUniform$2$x(t4, this._program, i);
      $location = J.getUniformLocation$2$x(t1._gl, this._program, activeUniform.name);
      t4 = activeUniform.type;
      t5 = (t4 == null ? 35678 == null : t4 === 35678) || (t4 == null ? 35680 == null : t4 === 35680);
      t6 = activeUniform.name;
      t7 = activeUniform.size;
      if (t5) {
        sampler = new G.ShaderProgramSampler(t6, i, this._convertType$1(t4), t7, $location, 0);
        t3.$indexSet(t3, t6, sampler);
        sampler._textureUnit = numSamplers;
        numSamplers0 = numSamplers + 1;
        J.uniform1i$2$x(t1._gl, $location, numSamplers);
        numSamplers = numSamplers0;
      } else {
        t5 = this._convertType$1(t4);
        t4 = this._findUniformSetForType$1(t4);
        t2.$indexSet(t2, activeUniform.name, new G.ShaderProgramUniform(t6, i, t5, t7, $location, t4));
      }
    }
    J.useProgram$1$x(t4, oldBind);
  },
  refreshAttributes$0: function() {
    var t1, numAttributes, t2, oldBind, i, t3, activeAttribute, $location;
    t1 = this.device;
    numAttributes = J.getProgramParameter$2$x(t1._gl, this._program, 35721);
    t2 = this.attributes;
    t2.clear$0(t2);
    if (numAttributes == null)
      return;
    oldBind = J.getParameter$1$x(t1._gl, 35725);
    J.useProgram$1$x(t1._gl, this._program);
    if (typeof numAttributes !== "number")
      throw H.iae(numAttributes);
    i = 0;
    for (; t3 = t1._gl, i < numAttributes; ++i) {
      activeAttribute = J.getActiveAttrib$2$x(t3, this._program, i);
      $location = J.getAttribLocation$2$x(t1._gl, this._program, activeAttribute.name);
      t3 = activeAttribute.name;
      t2.$indexSet(t2, t3, new G.ShaderProgramAttribute(t3, i, this._convertType$1(activeAttribute.type), activeAttribute.size, $location));
    }
    J.useProgram$1$x(t3, oldBind);
  },
  logUniforms$0: function() {
    this.forEachUniform$1(new G.ShaderProgram_logUniforms_closure());
  },
  logSamplers$0: function() {
    this.forEachSampler$1(new G.ShaderProgram_logSamplers_closure());
  },
  logAttributes$0: function() {
    this.forEachAttribute$1(new G.ShaderProgram_logAttributes_closure());
  },
  forEachUniform$1: function(callback) {
    var t1 = this.uniforms;
    t1.forEach$1(t1, new G.ShaderProgram_forEachUniform_closure(callback));
  },
  forEachSampler$1: function(callback) {
    var t1 = this.samplers;
    t1.forEach$1(t1, new G.ShaderProgram_forEachSampler_closure(callback));
  },
  forEachAttribute$1: function(callback) {
    var t1 = this.attributes;
    t1.forEach$1(t1, new G.ShaderProgram_forEachAttribute_closure(callback));
  },
  _setUniform1f$3: function(device, index, argument) {
    var t1, t2;
    t1 = J.getInterceptor$asx(argument);
    if (typeof argument === "object" && argument !== null && !!t1.$isFloat32List) {
      J.uniform1fv$2$x(device.get$gl(), index, argument);
      return;
    } else {
      t2 = H.checkSubtype(argument, "$isList", [J.JSNumber], "$asList");
      if (t2) {
        J.uniform1f$2$x(device.get$gl(), index, t1.$index(argument, 0));
        return;
      } else if (typeof argument === "number") {
        J.uniform1f$2$x(device.get$gl(), index, argument);
        return;
      }
    }
    throw H.wrapException(P.FallThroughError$());
  },
  get$_setUniform1f: function() {
    return new N.BoundClosure$3(this, G.ShaderProgram.prototype._setUniform1f$3, null, "_setUniform1f$3");
  },
  _setUniform2f$3: function(device, index, argument) {
    var t1, t2;
    t1 = J.getInterceptor$asx(argument);
    if (typeof argument === "object" && argument !== null && !!t1.$isFloat32List) {
      J.uniform2fv$2$x(device.get$gl(), index, argument);
      return;
    } else {
      t2 = H.checkSubtype(argument, "$isList", [J.JSNumber], "$asList");
      if (t2) {
        J.uniform2f$3$x(device.get$gl(), index, t1.$index(argument, 0), t1.$index(argument, 1));
        return;
      }
    }
    throw H.wrapException(P.FallThroughError$());
  },
  get$_setUniform2f: function() {
    return new N.BoundClosure$3(this, G.ShaderProgram.prototype._setUniform2f$3, null, "_setUniform2f$3");
  },
  _setUniform3f$3: function(device, index, argument) {
    var t1, t2;
    t1 = J.getInterceptor$asx(argument);
    if (typeof argument === "object" && argument !== null && !!t1.$isFloat32List) {
      J.uniform3fv$2$x(device.get$gl(), index, argument);
      return;
    } else {
      t2 = H.checkSubtype(argument, "$isList", [J.JSNumber], "$asList");
      if (t2) {
        J.uniform3f$4$x(device.get$gl(), index, t1.$index(argument, 0), t1.$index(argument, 1), t1.$index(argument, 2));
        return;
      }
    }
    throw H.wrapException(P.FallThroughError$());
  },
  get$_setUniform3f: function() {
    return new N.BoundClosure$3(this, G.ShaderProgram.prototype._setUniform3f$3, null, "_setUniform3f$3");
  },
  _setUniform4f$3: function(device, index, argument) {
    var t1, t2;
    t1 = J.getInterceptor$asx(argument);
    if (typeof argument === "object" && argument !== null && !!t1.$isFloat32List) {
      J.uniform4fv$2$x(device.get$gl(), index, argument);
      return;
    } else {
      t2 = H.checkSubtype(argument, "$isList", [J.JSNumber], "$asList");
      if (t2) {
        J.uniform4f$5$x(device.get$gl(), index, t1.$index(argument, 0), t1.$index(argument, 1), t1.$index(argument, 2), t1.$index(argument, 3));
        return;
      }
    }
    throw H.wrapException(P.FallThroughError$());
  },
  get$_setUniform4f: function() {
    return new N.BoundClosure$3(this, G.ShaderProgram.prototype._setUniform4f$3, null, "_setUniform4f$3");
  },
  _setUniform1i$3: function(device, index, argument) {
    var t1, t2;
    t1 = J.getInterceptor$asx(argument);
    if (typeof argument === "object" && argument !== null && !!t1.$isInt32List) {
      J.uniform1iv$2$x(device.get$gl(), index, argument);
      return;
    } else {
      t2 = H.checkSubtype(argument, "$isList", [J.JSNumber], "$asList");
      if (t2) {
        J.uniform1i$2$x(device.get$gl(), index, t1.$index(argument, 0));
        return;
      } else if (typeof argument === "number") {
        J.uniform1i$2$x(device.get$gl(), index, argument);
        return;
      }
    }
    throw H.wrapException(P.FallThroughError$());
  },
  get$_setUniform1i: function() {
    return new N.BoundClosure$3(this, G.ShaderProgram.prototype._setUniform1i$3, null, "_setUniform1i$3");
  },
  _setUniform2i$3: function(device, index, argument) {
    var t1, t2;
    t1 = J.getInterceptor$asx(argument);
    if (typeof argument === "object" && argument !== null && !!t1.$isInt32List) {
      J.uniform2iv$2$x(device.get$gl(), index, argument);
      return;
    } else {
      t2 = H.checkSubtype(argument, "$isList", [J.JSNumber], "$asList");
      if (t2) {
        J.uniform2i$3$x(device.get$gl(), index, t1.$index(argument, 0), t1.$index(argument, 1));
        return;
      }
    }
    throw H.wrapException(P.FallThroughError$());
  },
  get$_setUniform2i: function() {
    return new N.BoundClosure$3(this, G.ShaderProgram.prototype._setUniform2i$3, null, "_setUniform2i$3");
  },
  _setUniform3i$3: function(device, index, argument) {
    var t1, t2;
    t1 = J.getInterceptor$asx(argument);
    if (typeof argument === "object" && argument !== null && !!t1.$isInt32List) {
      J.uniform3iv$2$x(device.get$gl(), index, argument);
      return;
    } else {
      t2 = H.checkSubtype(argument, "$isList", [J.JSNumber], "$asList");
      if (t2) {
        J.uniform3i$4$x(device.get$gl(), index, t1.$index(argument, 0), t1.$index(argument, 1), t1.$index(argument, 2));
        return;
      }
    }
    throw H.wrapException(P.FallThroughError$());
  },
  get$_setUniform3i: function() {
    return new N.BoundClosure$3(this, G.ShaderProgram.prototype._setUniform3i$3, null, "_setUniform3i$3");
  },
  _setUniform4i$3: function(device, index, argument) {
    var t1, t2;
    t1 = J.getInterceptor$asx(argument);
    if (typeof argument === "object" && argument !== null && !!t1.$isInt32List) {
      J.uniform4iv$2$x(device.get$gl(), index, argument);
      return;
    } else {
      t2 = H.checkSubtype(argument, "$isList", [J.JSNumber], "$asList");
      if (t2) {
        J.uniform4i$5$x(device.get$gl(), index, t1.$index(argument, 0), t1.$index(argument, 1), t1.$index(argument, 2), t1.$index(argument, 3));
        return;
      }
    }
    throw H.wrapException(P.FallThroughError$());
  },
  get$_setUniform4i: function() {
    return new N.BoundClosure$3(this, G.ShaderProgram.prototype._setUniform4i$3, null, "_setUniform4i$3");
  },
  _setUniformMatrix2$3: function(device, index, argument) {
    var t1 = J.getInterceptor(argument);
    if (typeof argument === "object" && argument !== null && !!t1.$isFloat32List) {
      J.uniformMatrix2fv$3$x(device.get$gl(), index, false, argument);
      return;
    }
    throw H.wrapException(P.FallThroughError$());
  },
  get$_setUniformMatrix2: function() {
    return new N.BoundClosure$3(this, G.ShaderProgram.prototype._setUniformMatrix2$3, null, "_setUniformMatrix2$3");
  },
  _setUniformMatrix3$3: function(device, index, argument) {
    var t1 = J.getInterceptor(argument);
    if (typeof argument === "object" && argument !== null && !!t1.$isFloat32List) {
      J.uniformMatrix3fv$3$x(device.get$gl(), index, false, argument);
      return;
    }
    throw H.wrapException(P.FallThroughError$());
  },
  get$_setUniformMatrix3: function() {
    return new N.BoundClosure$3(this, G.ShaderProgram.prototype._setUniformMatrix3$3, null, "_setUniformMatrix3$3");
  },
  _setUniformMatrix4$3: function(device, index, argument) {
    var t1 = J.getInterceptor(argument);
    if (typeof argument === "object" && argument !== null && !!t1.$isFloat32List) {
      J.uniformMatrix4fv$3$x(device.get$gl(), index, false, argument);
      return;
    }
    throw H.wrapException(P.FallThroughError$());
  },
  get$_setUniformMatrix4: function() {
    return new N.BoundClosure$3(this, G.ShaderProgram.prototype._setUniformMatrix4$3, null, "_setUniformMatrix4$3");
  }
},

ShaderProgram_logUniforms_closure: {"": "Closure;",
  call$1: function(uniform) {
    var t1 = J.getInterceptor$x(uniform);
    $.get$_spectreLog().fine$1("Uniforms[" + H.S(t1.get$index(uniform)) + "] " + H.S(t1.get$type(uniform)) + " " + t1.get$name(uniform) + " (" + H.S(t1.get$size(uniform)) + ")");
  },
  $is_args1: true
},

ShaderProgram_logSamplers_closure: {"": "Closure;",
  call$1: function(sampler) {
    var t1 = J.getInterceptor$x(sampler);
    $.get$_spectreLog().fine$1("Sampler[" + H.S(t1.get$index(sampler)) + "] " + H.S(t1.get$type(sampler)) + " " + t1.get$name(sampler) + " (" + H.S(sampler) + ")");
  },
  $is_args1: true
},

ShaderProgram_logAttributes_closure: {"": "Closure;",
  call$1: function(attribute) {
    var t1 = J.getInterceptor$x(attribute);
    $.get$_spectreLog().fine$1("Attributes[" + H.S(t1.get$index(attribute)) + "] " + H.S(t1.get$type(attribute)) + " " + t1.get$name(attribute) + " (" + H.S(t1.get$size(attribute)) + ")");
  },
  $is_args1: true
},

ShaderProgram_forEachUniform_closure: {"": "Closure;callback_0",
  call$2: function(_, uniform) {
    this.callback_0.call$1(uniform);
  },
  $is_args2: true
},

ShaderProgram_forEachSampler_closure: {"": "Closure;callback_0",
  call$2: function(_, sampler) {
    this.callback_0.call$1(sampler);
  },
  $is_args2: true
},

ShaderProgram_forEachAttribute_closure: {"": "Closure;callback_0",
  call$2: function(_, attribute) {
    this.callback_0.call$1(attribute);
  },
  $is_args2: true
},

SpectreTexture: {"": "DeviceChild;"},

Texture2D: {"": "SpectreTexture;_loadError,_bindTarget,_bindingParam,_textureTarget,_textureWrapS,_textureWrapT,_textureMinFilter,_textureMagFilter,pixelFormat,pixelDataType,_width,_height,_deviceTexture,device,name,_referenceCount,_disposed",
  toString$0: function(_) {
    return "Texture2D name=" + this.name + " width=" + H.S(this._width) + " height=" + H.S(this._height) + " pixelFormat=" + H.S(G.Enum__stringify($.get$PixelFormat__values(), this.pixelFormat)) + " pixelDataType=" + H.S(G.Enum__stringify($.get$DataType__values(), this.pixelDataType));
  },
  uploadElement$1: function(element) {
    var t1, t2, t3, t4, old;
    t1 = J.getInterceptor(element);
    t2 = !!t1.$isImageElement;
    if (!t2 && !t1.$isCanvasElement && !t1.$isVideoElement)
      throw H.wrapException(new P.ArgumentError("Element type is not supported."));
    t3 = this.device;
    t4 = t3._context;
    old = t4.setTexture$2(t4._tempTextureUnit, this);
    if (t2) {
      this._width = element.naturalWidth;
      this._height = element.naturalHeight;
      t1 = this.pixelFormat;
      J.texImage2DImage$6$x(t3._gl, this._textureTarget, 0, t1, t1, this.pixelDataType, element);
    } else if (!!t1.$isCanvasElement) {
      this._width = element.width;
      this._height = element.height;
      t1 = this.pixelFormat;
      J.texImage2DCanvas$6$x(t3._gl, this._textureTarget, 0, t1, t1, this.pixelDataType, element);
    } else if (!!t1.$isVideoElement) {
      this._width = element.width;
      this._height = element.height;
      t1 = this.pixelFormat;
      J.texImage2DVideo$6$x(t3._gl, this._textureTarget, 0, t1, t1, this.pixelDataType, element);
    }
    t1 = t3._context;
    t1.setTexture$2(t1._tempTextureUnit, old);
  },
  uploadFromURL$1: function(url) {
    var element, t1, completer, t2, t3;
    element = W.ImageElement_ImageElement(null, null, null);
    t1 = G.Texture2D;
    completer = new P._AsyncCompleter(P._Future$(t1));
    H.setRuntimeTypeInfo(completer, [t1]);
    t1 = J.getInterceptor$x(element);
    t2 = t1.get$onError(element);
    t3 = new W._EventStreamSubscription(0, t2._target, t2._eventType, W._wrapZone(new G.Texture2D_uploadFromURL_closure(this, completer)), t2._useCapture);
    H.setRuntimeTypeInfo(t3, [H.getRuntimeTypeArgument(t2, "_EventStream", 0)]);
    t3._tryResume$0();
    t3 = t1.get$onLoad(element);
    t2 = new W._EventStreamSubscription(0, t3._target, t3._eventType, W._wrapZone(new G.Texture2D_uploadFromURL_closure0(this, element, completer)), t3._useCapture);
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t3, "_EventStream", 0)]);
    t2._tryResume$0();
    this._loadError = false;
    t1.set$src(element, url);
    return completer.future;
  }
},

Texture2D_uploadFromURL_closure: {"": "Closure;this_0,completer_1",
  call$1: function($event) {
    var t1, t2;
    t1 = this.this_0;
    t1._loadError = true;
    t2 = this.completer_1.future;
    if (t2._state !== 0)
      H.throwExpression(P.StateError$("Future already completed"));
    t2._asyncComplete$1(t1);
  },
  $is_args1: true
},

Texture2D_uploadFromURL_closure0: {"": "Closure;this_2,element_3,completer_4",
  call$1: function($event) {
    var t1, t2;
    t1 = this.this_2;
    t1.uploadElement$1(this.element_3);
    t2 = this.completer_4.future;
    if (t2._state !== 0)
      H.throwExpression(P.StateError$("Future already completed"));
    t2._asyncComplete$1(t1);
  },
  $is_args1: true
},

VertexAttribute: {"": "Object;vboSlot<,attributeIndex,attributeOffset,attributeStride,dataType,dataCount,normalizeData", static: {
VertexAttribute$atAttributeIndex: function(attribute, attributeIndex) {
  return new G.VertexAttribute(attribute.vboSlot, attributeIndex, attribute.attributeOffset, attribute.attributeStride, attribute.dataType, attribute.dataCount, attribute.normalizeData);
}}
},

VertexBuffer: {"": "SpectreBuffer;_deviceBuffer,_bindTarget,_bindingParam,_usage,_size,device,name,_referenceCount,_disposed"},

VertexShader: {"": "SpectreShader;_type,_spectre$_source,_shader,autoCompile,device,name,_referenceCount,_disposed"},

Viewport: {"": "Object;_x,_y,_width,_height,_minDepth,_maxDepth",
  get$x: function(_) {
    return this._x;
  },
  get$y: function(_) {
    return this._y;
  },
  set$minDepth: function(value) {
    if (value >= 0 && value <= 1) {
      this._minDepth = value;
      return;
    }
    throw H.wrapException(new P.ArgumentError("minDepth must be in the range [0, 1]"));
  },
  set$maxDepth: function(value) {
    if (value >= 0 && value <= 1) {
      this._maxDepth = value;
      return;
    }
    throw H.wrapException(new P.ArgumentError("maxDepth must be in the range [0, 1]"));
  },
  static: {
"": "Viewport__xName,Viewport__yName,Viewport__widthName,Viewport__heightName,Viewport__minDepthName,Viewport__maxDepthName",
}

}}],
["unmodifiable_collection", "package:unmodifiable_collection/unmodifiable_collection.dart", , F, {
UnmodifiableMapView: {"": "Object;_source",
  get$length: function(_) {
    return this._source._collection$_length;
  },
  $index: function(_, key) {
    var t1 = this._source;
    return t1.$index(t1, key);
  },
  forEach$1: function(_, f) {
    var t1 = this._source;
    return t1.forEach$1(t1, f);
  },
  get$keys: function(_) {
    var t1, t2;
    t1 = this._source;
    t2 = new P.LinkedHashMapKeyIterable(t1);
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "_LinkedHashMap", 0)]);
    return t2;
  },
  get$values: function(_) {
    var t1 = this._source;
    return t1.get$values(t1);
  },
  $indexSet: function(_, key, value) {
    return F.UnmodifiableMapView__throw();
  },
  clear$0: function(_) {
    return F.UnmodifiableMapView__throw();
  },
  $isMap: true,
  $asMap: null,
  static: {
UnmodifiableMapView__throw: function() {
  throw H.wrapException(P.UnsupportedError$("Cannot modify an unmodifiable Map"));
}}

}}],
["vector_math", "package:vector_math/vector_math.dart", , T, {
setViewMatrix: function(viewMatrix, cameraPosition, cameraFocusPosition, upDirection) {
  var z, x, y, t1, t2, rotatedEye;
  z = cameraPosition.$sub(cameraPosition, cameraFocusPosition);
  z.normalize$0(z);
  x = upDirection.cross$1(z);
  x.normalize$0(x);
  y = z.cross$1(x);
  y.normalize$0(y);
  viewMatrix.setZero$0();
  t1 = viewMatrix.storage;
  t1[15] = 1;
  t2 = x.storage;
  t1[0] = t2[0];
  t1[1] = t2[1];
  t1[2] = t2[2];
  t2 = y.storage;
  t1[4] = t2[0];
  t1[5] = t2[1];
  t1[6] = t2[2];
  t2 = z.storage;
  t1[8] = t2[0];
  t1[9] = t2[1];
  t1[10] = t2[2];
  viewMatrix.transpose$0();
  rotatedEye = viewMatrix.$mul(viewMatrix, cameraPosition.$negate(cameraPosition));
  t1[12] = rotatedEye.get$x(rotatedEye);
  t1[13] = rotatedEye.get$y(rotatedEye);
  t1[14] = rotatedEye.get$z(rotatedEye);
},

makeViewMatrix: function(cameraPosition, cameraFocusPosition, upDirection) {
  var t1, r;
  t1 = new Float32Array(16);
  t1.$dartCachedLength = t1.length;
  r = new T.Matrix4(t1);
  T.setViewMatrix(r, cameraPosition, cameraFocusPosition, upDirection);
  return r;
},

makePerspectiveMatrix: function(fovYRadians, aspectRatio, zNear, zFar) {
  var height, width, t1, view;
  height = Math.tan(fovYRadians * 0.5) * zNear;
  width = height * aspectRatio;
  t1 = new Float32Array(16);
  t1.$dartCachedLength = t1.length;
  view = new T.Matrix4(t1);
  T.setFrustumMatrix(view, -width, width, -height, height, zNear, zFar);
  return view;
},

setFrustumMatrix: function(perspectiveMatrix, left, right, bottom, $top, near, far) {
  var two_near, right_minus_left, top_minus_bottom, far_minus_near, t1;
  two_near = 2 * near;
  right_minus_left = right - left;
  top_minus_bottom = $top - bottom;
  far_minus_near = far - near;
  t1 = perspectiveMatrix.setZero$0().storage;
  t1[0] = two_near / right_minus_left;
  t1[5] = two_near / top_minus_bottom;
  t1[8] = (right + left) / right_minus_left;
  t1[9] = ($top + bottom) / top_minus_bottom;
  t1[10] = -(far + near) / far_minus_near;
  t1[11] = -1;
  t1[14] = -(two_near * far) / far_minus_near;
},

Aabb3: {"": "Object;_min,_max", static: {
Aabb3$: function() {
  var t1, t2;
  t1 = new Float32Array(3);
  t1.$dartCachedLength = t1.length;
  t2 = new Float32Array(3);
  t2.$dartCachedLength = t2.length;
  return new T.Aabb3(new T.Vector3(t1), new T.Vector3(t2));
},

Aabb3$copy: function(other) {
  var t1, t2, t3;
  t1 = other._min;
  t2 = new Float32Array(3);
  t2.$dartCachedLength = t2.length;
  t2 = new T.Vector3(t2);
  t2.setFrom$1(t1);
  t1 = other._max;
  t3 = new Float32Array(3);
  t3.$dartCachedLength = t3.length;
  t3 = new T.Vector3(t3);
  t3.setFrom$1(t1);
  return new T.Aabb3(t2, t3);
}}
},

Matrix3: {"": "Object;storage<",
  index$2: function(_, row, col) {
    return J.$add$ns(J.$mul$n(col, 3), row);
  },
  get$index: function(_receiver) {
    return new T.BoundClosure$i2(this, T.Matrix3.prototype.index$2, _receiver, "index$2");
  },
  toString$0: function(_) {
    return "[0] " + H.S(this.getRow$1(0)) + "\n[1] " + H.S(this.getRow$1(1)) + "\n[2] " + H.S(this.getRow$1(2)) + "\n";
  },
  get$dimension: function() {
    return 3;
  },
  $index: function(_, i) {
    var t1 = this.storage;
    if (i >>> 0 !== i || i >= 9)
      throw H.ioore(t1, i);
    return t1[i];
  },
  $indexSet: function(_, i, v) {
    var t1 = this.storage;
    if (i >>> 0 !== i || i >= 9)
      throw H.ioore(t1, i);
    t1[i] = v;
  },
  getRow$1: function(row) {
    var t1, r, t2, t3;
    t1 = new Float32Array(3);
    t1.$dartCachedLength = t1.length;
    r = new T.Vector3(t1);
    t1 = r.storage;
    t2 = this.storage;
    t3 = 0 + row;
    if (t3 < 0 || t3 >= 9)
      throw H.ioore(t2, t3);
    t1[0] = t2[t3];
    t3 = 3 + row;
    if (t3 < 0 || t3 >= 9)
      throw H.ioore(t2, t3);
    t1[1] = t2[t3];
    t3 = 6 + row;
    if (t3 < 0 || t3 >= 9)
      throw H.ioore(t2, t3);
    t1[2] = t2[t3];
    return r;
  },
  _mul_scale$1: function(arg) {
    var t1, r, t2;
    t1 = new Float32Array(9);
    t1.$dartCachedLength = t1.length;
    r = new T.Matrix3(t1);
    t1 = r.storage;
    t2 = this.storage;
    t1[8] = t2[8] * arg;
    t1[7] = t2[7] * arg;
    t1[6] = t2[6] * arg;
    t1[5] = t2[5] * arg;
    t1[4] = t2[4] * arg;
    t1[3] = t2[3] * arg;
    t1[2] = t2[2] * arg;
    t1[1] = t2[1] * arg;
    t1[0] = t2[0] * arg;
    return r;
  },
  _mul_matrix$1: function(arg) {
    var t1, r, t2, t3, t4, t5, t6, t7, t8, t9;
    t1 = new Float32Array(9);
    t1.$dartCachedLength = t1.length;
    r = new T.Matrix3(t1);
    t1 = r.storage;
    t2 = this.storage;
    t3 = t2[0];
    t4 = arg.get$storage();
    t5 = C.JS_CONST_ZYJ(t4);
    if (0 >= t5)
      throw H.ioore(t4, 0);
    t6 = t4[0];
    t7 = t2[3];
    if (1 >= t5)
      throw H.ioore(t4, 1);
    t8 = t4[1];
    t9 = t2[6];
    if (2 >= t5)
      throw H.ioore(t4, 2);
    t1[0] = t3 * t6 + t7 * t8 + t9 * t4[2];
    t4 = t2[0];
    t9 = arg.get$storage();
    t8 = C.JS_CONST_ZYJ(t9);
    if (3 >= t8)
      throw H.ioore(t9, 3);
    t7 = t9[3];
    t6 = t2[3];
    if (4 >= t8)
      throw H.ioore(t9, 4);
    t3 = t9[4];
    t5 = t2[6];
    if (5 >= t8)
      throw H.ioore(t9, 5);
    t1[3] = t4 * t7 + t6 * t3 + t5 * t9[5];
    t9 = t2[0];
    t5 = arg.get$storage();
    t3 = C.JS_CONST_ZYJ(t5);
    if (6 >= t3)
      throw H.ioore(t5, 6);
    t6 = t5[6];
    t7 = t2[3];
    if (7 >= t3)
      throw H.ioore(t5, 7);
    t4 = t5[7];
    t8 = t2[6];
    if (8 >= t3)
      throw H.ioore(t5, 8);
    t1[6] = t9 * t6 + t7 * t4 + t8 * t5[8];
    t5 = t2[1];
    t8 = arg.get$storage();
    t4 = C.JS_CONST_ZYJ(t8);
    if (0 >= t4)
      throw H.ioore(t8, 0);
    t7 = t8[0];
    t6 = t2[4];
    if (1 >= t4)
      throw H.ioore(t8, 1);
    t9 = t8[1];
    t3 = t2[7];
    if (2 >= t4)
      throw H.ioore(t8, 2);
    t1[1] = t5 * t7 + t6 * t9 + t3 * t8[2];
    t8 = t2[1];
    t3 = arg.get$storage();
    t9 = C.JS_CONST_ZYJ(t3);
    if (3 >= t9)
      throw H.ioore(t3, 3);
    t6 = t3[3];
    t7 = t2[4];
    if (4 >= t9)
      throw H.ioore(t3, 4);
    t5 = t3[4];
    t4 = t2[7];
    if (5 >= t9)
      throw H.ioore(t3, 5);
    t1[4] = t8 * t6 + t7 * t5 + t4 * t3[5];
    t3 = t2[1];
    t4 = arg.get$storage();
    t5 = C.JS_CONST_ZYJ(t4);
    if (6 >= t5)
      throw H.ioore(t4, 6);
    t7 = t4[6];
    t6 = t2[4];
    if (7 >= t5)
      throw H.ioore(t4, 7);
    t8 = t4[7];
    t9 = t2[7];
    if (8 >= t5)
      throw H.ioore(t4, 8);
    t1[7] = t3 * t7 + t6 * t8 + t9 * t4[8];
    t4 = t2[2];
    t9 = arg.get$storage();
    t8 = C.JS_CONST_ZYJ(t9);
    if (0 >= t8)
      throw H.ioore(t9, 0);
    t6 = t9[0];
    t7 = t2[5];
    if (1 >= t8)
      throw H.ioore(t9, 1);
    t3 = t9[1];
    t5 = t2[8];
    if (2 >= t8)
      throw H.ioore(t9, 2);
    t1[2] = t4 * t6 + t7 * t3 + t5 * t9[2];
    t9 = t2[2];
    t5 = arg.get$storage();
    t3 = C.JS_CONST_ZYJ(t5);
    if (3 >= t3)
      throw H.ioore(t5, 3);
    t7 = t5[3];
    t6 = t2[5];
    if (4 >= t3)
      throw H.ioore(t5, 4);
    t4 = t5[4];
    t8 = t2[8];
    if (5 >= t3)
      throw H.ioore(t5, 5);
    t1[5] = t9 * t7 + t6 * t4 + t8 * t5[5];
    t5 = t2[2];
    t8 = arg.get$storage();
    t4 = C.JS_CONST_ZYJ(t8);
    if (6 >= t4)
      throw H.ioore(t8, 6);
    t6 = t8[6];
    t7 = t2[5];
    if (7 >= t4)
      throw H.ioore(t8, 7);
    t9 = t8[7];
    t2 = t2[8];
    if (8 >= t4)
      throw H.ioore(t8, 8);
    t1[8] = t5 * t6 + t7 * t9 + t2 * t8[8];
    return r;
  },
  _mul_vector$1: function(arg) {
    var t1, r, t2, t3;
    t1 = new Float32Array(3);
    t1.$dartCachedLength = t1.length;
    r = new T.Vector3(t1);
    t1 = r.storage;
    t2 = this.storage;
    t3 = arg.storage;
    t1[2] = t2[2] * t3[0] + t2[5] * t3[1] + t2[8] * t3[2];
    t1[1] = t2[1] * t3[0] + t2[4] * t3[1] + t2[7] * t3[2];
    t1[0] = t2[0] * t3[0] + t2[3] * t3[1] + t2[6] * t3[2];
    return r;
  },
  $mul: function(_, arg) {
    var t1;
    if (typeof arg === "number")
      return this._mul_scale$1(arg);
    t1 = J.getInterceptor(arg);
    if (typeof arg === "object" && arg !== null && !!t1.$isVector3)
      return this._mul_vector$1(arg);
    if (3 === arg.get$dimension())
      return this._mul_matrix$1(arg);
    throw H.wrapException(new P.ArgumentError(arg));
  },
  $add: function(_, arg) {
    var t1, r, t2, t3, t4;
    t1 = new Float32Array(9);
    t1.$dartCachedLength = t1.length;
    r = new T.Matrix3(t1);
    t1 = r.storage;
    t2 = this.storage;
    t3 = t2[0];
    t4 = arg.get$storage();
    if (0 >= C.JS_CONST_ZYJ(t4))
      throw H.ioore(t4, 0);
    t1[0] = t3 + t4[0];
    t4 = t2[1];
    t3 = arg.get$storage();
    if (1 >= C.JS_CONST_ZYJ(t3))
      throw H.ioore(t3, 1);
    t1[1] = t4 + t3[1];
    t3 = t2[2];
    t4 = arg.get$storage();
    if (2 >= C.JS_CONST_ZYJ(t4))
      throw H.ioore(t4, 2);
    t1[2] = t3 + t4[2];
    t4 = t2[3];
    t3 = arg.get$storage();
    if (3 >= C.JS_CONST_ZYJ(t3))
      throw H.ioore(t3, 3);
    t1[3] = t4 + t3[3];
    t3 = t2[4];
    t4 = arg.get$storage();
    if (4 >= C.JS_CONST_ZYJ(t4))
      throw H.ioore(t4, 4);
    t1[4] = t3 + t4[4];
    t4 = t2[5];
    t3 = arg.get$storage();
    if (5 >= C.JS_CONST_ZYJ(t3))
      throw H.ioore(t3, 5);
    t1[5] = t4 + t3[5];
    t3 = t2[6];
    t4 = arg.get$storage();
    if (6 >= C.JS_CONST_ZYJ(t4))
      throw H.ioore(t4, 6);
    t1[6] = t3 + t4[6];
    t4 = t2[7];
    t3 = arg.get$storage();
    if (7 >= C.JS_CONST_ZYJ(t3))
      throw H.ioore(t3, 7);
    t1[7] = t4 + t3[7];
    t2 = t2[8];
    t3 = arg.get$storage();
    if (8 >= C.JS_CONST_ZYJ(t3))
      throw H.ioore(t3, 8);
    t1[8] = t2 + t3[8];
    return r;
  },
  $sub: function(_, arg) {
    var t1, r, t2, t3, t4;
    t1 = new Float32Array(9);
    t1.$dartCachedLength = t1.length;
    r = new T.Matrix3(t1);
    t1 = r.storage;
    t2 = this.storage;
    t3 = t2[0];
    t4 = arg.get$storage();
    if (0 >= C.JS_CONST_ZYJ(t4))
      throw H.ioore(t4, 0);
    t1[0] = t3 - t4[0];
    t4 = t2[1];
    t3 = arg.get$storage();
    if (1 >= C.JS_CONST_ZYJ(t3))
      throw H.ioore(t3, 1);
    t1[1] = t4 - t3[1];
    t3 = t2[2];
    t4 = arg.get$storage();
    if (2 >= C.JS_CONST_ZYJ(t4))
      throw H.ioore(t4, 2);
    t1[2] = t3 - t4[2];
    t4 = t2[3];
    t3 = arg.get$storage();
    if (3 >= C.JS_CONST_ZYJ(t3))
      throw H.ioore(t3, 3);
    t1[3] = t4 - t3[3];
    t3 = t2[4];
    t4 = arg.get$storage();
    if (4 >= C.JS_CONST_ZYJ(t4))
      throw H.ioore(t4, 4);
    t1[4] = t3 - t4[4];
    t4 = t2[5];
    t3 = arg.get$storage();
    if (5 >= C.JS_CONST_ZYJ(t3))
      throw H.ioore(t3, 5);
    t1[5] = t4 - t3[5];
    t3 = t2[6];
    t4 = arg.get$storage();
    if (6 >= C.JS_CONST_ZYJ(t4))
      throw H.ioore(t4, 6);
    t1[6] = t3 - t4[6];
    t4 = t2[7];
    t3 = arg.get$storage();
    if (7 >= C.JS_CONST_ZYJ(t3))
      throw H.ioore(t3, 7);
    t1[7] = t4 - t3[7];
    t2 = t2[8];
    t3 = arg.get$storage();
    if (8 >= C.JS_CONST_ZYJ(t3))
      throw H.ioore(t3, 8);
    t1[8] = t2 - t3[8];
    return r;
  },
  setIdentity$0: function() {
    var t1 = this.storage;
    t1[0] = 1;
    t1[1] = 0;
    t1[2] = 0;
    t1[3] = 0;
    t1[4] = 1;
    t1[5] = 0;
    t1[6] = 0;
    t1[7] = 0;
    t1[8] = 1;
    return this;
  }
},

Matrix4: {"": "Object;storage<",
  index$2: function(_, row, col) {
    return J.$add$ns(J.$mul$n(col, 4), row);
  },
  get$index: function(_receiver) {
    return new T.BoundClosure$i2(this, T.Matrix4.prototype.index$2, _receiver, "index$2");
  },
  toString$0: function(_) {
    return "[0] " + H.S(this.getRow$1(0)) + "\n[1] " + H.S(this.getRow$1(1)) + "\n[2] " + H.S(this.getRow$1(2)) + "\n[3] " + H.S(this.getRow$1(3)) + "\n";
  },
  get$dimension: function() {
    return 4;
  },
  $index: function(_, i) {
    var t1 = this.storage;
    if (i >>> 0 !== i || i >= 16)
      throw H.ioore(t1, i);
    return t1[i];
  },
  $indexSet: function(_, i, v) {
    var t1 = this.storage;
    if (i >>> 0 !== i || i >= 16)
      throw H.ioore(t1, i);
    t1[i] = v;
  },
  getRow$1: function(row) {
    var t1, r, t2, t3;
    t1 = new Float32Array(4);
    t1.$dartCachedLength = t1.length;
    r = new T.Vector4(t1);
    t1 = r.storage;
    t2 = this.storage;
    t3 = 0 + row;
    if (t3 < 0 || t3 >= 16)
      throw H.ioore(t2, t3);
    t1[0] = t2[t3];
    t3 = 4 + row;
    if (t3 < 0 || t3 >= 16)
      throw H.ioore(t2, t3);
    t1[1] = t2[t3];
    t3 = 8 + row;
    if (t3 < 0 || t3 >= 16)
      throw H.ioore(t2, t3);
    t1[2] = t2[t3];
    t3 = 12 + row;
    if (t3 < 0 || t3 >= 16)
      throw H.ioore(t2, t3);
    t1[3] = t2[t3];
    return r;
  },
  copyInto$1: function(arg) {
    var t1, t2;
    t1 = arg.storage;
    t2 = this.storage;
    t1[0] = t2[0];
    t1[1] = t2[1];
    t1[2] = t2[2];
    t1[3] = t2[3];
    t1[4] = t2[4];
    t1[5] = t2[5];
    t1[6] = t2[6];
    t1[7] = t2[7];
    t1[8] = t2[8];
    t1[9] = t2[9];
    t1[10] = t2[10];
    t1[11] = t2[11];
    t1[12] = t2[12];
    t1[13] = t2[13];
    t1[14] = t2[14];
    t1[15] = t2[15];
    return arg;
  },
  _mul_scale$1: function(arg) {
    var t1, r, t2;
    t1 = new Float32Array(16);
    t1.$dartCachedLength = t1.length;
    r = new T.Matrix4(t1);
    t1 = r.storage;
    t2 = this.storage;
    t1[15] = t2[15] * arg;
    t1[14] = t2[14] * arg;
    t1[13] = t2[13] * arg;
    t1[12] = t2[12] * arg;
    t1[11] = t2[11] * arg;
    t1[10] = t2[10] * arg;
    t1[9] = t2[9] * arg;
    t1[8] = t2[8] * arg;
    t1[7] = t2[7] * arg;
    t1[6] = t2[6] * arg;
    t1[5] = t2[5] * arg;
    t1[4] = t2[4] * arg;
    t1[3] = t2[3] * arg;
    t1[2] = t2[2] * arg;
    t1[1] = t2[1] * arg;
    t1[0] = t2[0] * arg;
    return r;
  },
  _mul_matrix$1: function(arg) {
    var t1, r, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11;
    t1 = new Float32Array(16);
    t1.$dartCachedLength = t1.length;
    r = new T.Matrix4(t1);
    t1 = r.storage;
    t2 = this.storage;
    t3 = t2[0];
    t4 = arg.get$storage();
    t5 = C.JS_CONST_ZYJ(t4);
    if (0 >= t5)
      throw H.ioore(t4, 0);
    t6 = t4[0];
    t7 = t2[4];
    if (1 >= t5)
      throw H.ioore(t4, 1);
    t8 = t4[1];
    t9 = t2[8];
    if (2 >= t5)
      throw H.ioore(t4, 2);
    t10 = t4[2];
    t11 = t2[12];
    if (3 >= t5)
      throw H.ioore(t4, 3);
    t1[0] = t3 * t6 + t7 * t8 + t9 * t10 + t11 * t4[3];
    t4 = t2[0];
    t11 = arg.get$storage();
    t10 = C.JS_CONST_ZYJ(t11);
    if (4 >= t10)
      throw H.ioore(t11, 4);
    t9 = t11[4];
    t8 = t2[4];
    if (5 >= t10)
      throw H.ioore(t11, 5);
    t7 = t11[5];
    t6 = t2[8];
    if (6 >= t10)
      throw H.ioore(t11, 6);
    t3 = t11[6];
    t5 = t2[12];
    if (7 >= t10)
      throw H.ioore(t11, 7);
    t1[4] = t4 * t9 + t8 * t7 + t6 * t3 + t5 * t11[7];
    t11 = t2[0];
    t5 = arg.get$storage();
    t3 = C.JS_CONST_ZYJ(t5);
    if (8 >= t3)
      throw H.ioore(t5, 8);
    t6 = t5[8];
    t7 = t2[4];
    if (9 >= t3)
      throw H.ioore(t5, 9);
    t8 = t5[9];
    t9 = t2[8];
    if (10 >= t3)
      throw H.ioore(t5, 10);
    t4 = t5[10];
    t10 = t2[12];
    if (11 >= t3)
      throw H.ioore(t5, 11);
    t1[8] = t11 * t6 + t7 * t8 + t9 * t4 + t10 * t5[11];
    t5 = t2[0];
    t10 = arg.get$storage();
    t4 = C.JS_CONST_ZYJ(t10);
    if (12 >= t4)
      throw H.ioore(t10, 12);
    t9 = t10[12];
    t8 = t2[4];
    if (13 >= t4)
      throw H.ioore(t10, 13);
    t7 = t10[13];
    t6 = t2[8];
    if (14 >= t4)
      throw H.ioore(t10, 14);
    t11 = t10[14];
    t3 = t2[12];
    if (15 >= t4)
      throw H.ioore(t10, 15);
    t1[12] = t5 * t9 + t8 * t7 + t6 * t11 + t3 * t10[15];
    t10 = t2[1];
    t3 = arg.get$storage();
    t11 = C.JS_CONST_ZYJ(t3);
    if (0 >= t11)
      throw H.ioore(t3, 0);
    t6 = t3[0];
    t7 = t2[5];
    if (1 >= t11)
      throw H.ioore(t3, 1);
    t8 = t3[1];
    t9 = t2[9];
    if (2 >= t11)
      throw H.ioore(t3, 2);
    t5 = t3[2];
    t4 = t2[13];
    if (3 >= t11)
      throw H.ioore(t3, 3);
    t1[1] = t10 * t6 + t7 * t8 + t9 * t5 + t4 * t3[3];
    t3 = t2[1];
    t4 = arg.get$storage();
    t5 = C.JS_CONST_ZYJ(t4);
    if (4 >= t5)
      throw H.ioore(t4, 4);
    t9 = t4[4];
    t8 = t2[5];
    if (5 >= t5)
      throw H.ioore(t4, 5);
    t7 = t4[5];
    t6 = t2[9];
    if (6 >= t5)
      throw H.ioore(t4, 6);
    t10 = t4[6];
    t11 = t2[13];
    if (7 >= t5)
      throw H.ioore(t4, 7);
    t1[5] = t3 * t9 + t8 * t7 + t6 * t10 + t11 * t4[7];
    t4 = t2[1];
    t11 = arg.get$storage();
    t10 = C.JS_CONST_ZYJ(t11);
    if (8 >= t10)
      throw H.ioore(t11, 8);
    t6 = t11[8];
    t7 = t2[5];
    if (9 >= t10)
      throw H.ioore(t11, 9);
    t8 = t11[9];
    t9 = t2[9];
    if (10 >= t10)
      throw H.ioore(t11, 10);
    t3 = t11[10];
    t5 = t2[13];
    if (11 >= t10)
      throw H.ioore(t11, 11);
    t1[9] = t4 * t6 + t7 * t8 + t9 * t3 + t5 * t11[11];
    t11 = t2[1];
    t5 = arg.get$storage();
    t3 = C.JS_CONST_ZYJ(t5);
    if (12 >= t3)
      throw H.ioore(t5, 12);
    t9 = t5[12];
    t8 = t2[5];
    if (13 >= t3)
      throw H.ioore(t5, 13);
    t7 = t5[13];
    t6 = t2[9];
    if (14 >= t3)
      throw H.ioore(t5, 14);
    t4 = t5[14];
    t10 = t2[13];
    if (15 >= t3)
      throw H.ioore(t5, 15);
    t1[13] = t11 * t9 + t8 * t7 + t6 * t4 + t10 * t5[15];
    t5 = t2[2];
    t10 = arg.get$storage();
    t4 = C.JS_CONST_ZYJ(t10);
    if (0 >= t4)
      throw H.ioore(t10, 0);
    t6 = t10[0];
    t7 = t2[6];
    if (1 >= t4)
      throw H.ioore(t10, 1);
    t8 = t10[1];
    t9 = t2[10];
    if (2 >= t4)
      throw H.ioore(t10, 2);
    t11 = t10[2];
    t3 = t2[14];
    if (3 >= t4)
      throw H.ioore(t10, 3);
    t1[2] = t5 * t6 + t7 * t8 + t9 * t11 + t3 * t10[3];
    t10 = t2[2];
    t3 = arg.get$storage();
    t11 = C.JS_CONST_ZYJ(t3);
    if (4 >= t11)
      throw H.ioore(t3, 4);
    t9 = t3[4];
    t8 = t2[6];
    if (5 >= t11)
      throw H.ioore(t3, 5);
    t7 = t3[5];
    t6 = t2[10];
    if (6 >= t11)
      throw H.ioore(t3, 6);
    t5 = t3[6];
    t4 = t2[14];
    if (7 >= t11)
      throw H.ioore(t3, 7);
    t1[6] = t10 * t9 + t8 * t7 + t6 * t5 + t4 * t3[7];
    t3 = t2[2];
    t4 = arg.get$storage();
    t5 = C.JS_CONST_ZYJ(t4);
    if (8 >= t5)
      throw H.ioore(t4, 8);
    t6 = t4[8];
    t7 = t2[6];
    if (9 >= t5)
      throw H.ioore(t4, 9);
    t8 = t4[9];
    t9 = t2[10];
    if (10 >= t5)
      throw H.ioore(t4, 10);
    t10 = t4[10];
    t11 = t2[14];
    if (11 >= t5)
      throw H.ioore(t4, 11);
    t1[10] = t3 * t6 + t7 * t8 + t9 * t10 + t11 * t4[11];
    t4 = t2[2];
    t11 = arg.get$storage();
    t10 = C.JS_CONST_ZYJ(t11);
    if (12 >= t10)
      throw H.ioore(t11, 12);
    t9 = t11[12];
    t8 = t2[6];
    if (13 >= t10)
      throw H.ioore(t11, 13);
    t7 = t11[13];
    t6 = t2[10];
    if (14 >= t10)
      throw H.ioore(t11, 14);
    t3 = t11[14];
    t5 = t2[14];
    if (15 >= t10)
      throw H.ioore(t11, 15);
    t1[14] = t4 * t9 + t8 * t7 + t6 * t3 + t5 * t11[15];
    t11 = t2[3];
    t5 = arg.get$storage();
    t3 = C.JS_CONST_ZYJ(t5);
    if (0 >= t3)
      throw H.ioore(t5, 0);
    t6 = t5[0];
    t7 = t2[7];
    if (1 >= t3)
      throw H.ioore(t5, 1);
    t8 = t5[1];
    t9 = t2[11];
    if (2 >= t3)
      throw H.ioore(t5, 2);
    t4 = t5[2];
    t10 = t2[15];
    if (3 >= t3)
      throw H.ioore(t5, 3);
    t1[3] = t11 * t6 + t7 * t8 + t9 * t4 + t10 * t5[3];
    t5 = t2[3];
    t10 = arg.get$storage();
    t4 = C.JS_CONST_ZYJ(t10);
    if (4 >= t4)
      throw H.ioore(t10, 4);
    t9 = t10[4];
    t8 = t2[7];
    if (5 >= t4)
      throw H.ioore(t10, 5);
    t7 = t10[5];
    t6 = t2[11];
    if (6 >= t4)
      throw H.ioore(t10, 6);
    t11 = t10[6];
    t3 = t2[15];
    if (7 >= t4)
      throw H.ioore(t10, 7);
    t1[7] = t5 * t9 + t8 * t7 + t6 * t11 + t3 * t10[7];
    t10 = t2[3];
    t3 = arg.get$storage();
    t11 = C.JS_CONST_ZYJ(t3);
    if (8 >= t11)
      throw H.ioore(t3, 8);
    t6 = t3[8];
    t7 = t2[7];
    if (9 >= t11)
      throw H.ioore(t3, 9);
    t8 = t3[9];
    t9 = t2[11];
    if (10 >= t11)
      throw H.ioore(t3, 10);
    t5 = t3[10];
    t4 = t2[15];
    if (11 >= t11)
      throw H.ioore(t3, 11);
    t1[11] = t10 * t6 + t7 * t8 + t9 * t5 + t4 * t3[11];
    t3 = t2[3];
    t4 = arg.get$storage();
    t5 = C.JS_CONST_ZYJ(t4);
    if (12 >= t5)
      throw H.ioore(t4, 12);
    t9 = t4[12];
    t8 = t2[7];
    if (13 >= t5)
      throw H.ioore(t4, 13);
    t7 = t4[13];
    t6 = t2[11];
    if (14 >= t5)
      throw H.ioore(t4, 14);
    t10 = t4[14];
    t2 = t2[15];
    if (15 >= t5)
      throw H.ioore(t4, 15);
    t1[15] = t3 * t9 + t8 * t7 + t6 * t10 + t2 * t4[15];
    return r;
  },
  _mul_vector$1: function(arg) {
    var t1, r, t2, t3;
    t1 = new Float32Array(4);
    t1.$dartCachedLength = t1.length;
    r = new T.Vector4(t1);
    t1 = r.storage;
    t2 = this.storage;
    t3 = arg.storage;
    t1[3] = t2[3] * t3[0] + t2[7] * t3[1] + t2[11] * t3[2] + t2[15] * t3[3];
    t1[2] = t2[2] * t3[0] + t2[6] * t3[1] + t2[10] * t3[2] + t2[14] * t3[3];
    t1[1] = t2[1] * t3[0] + t2[5] * t3[1] + t2[9] * t3[2] + t2[13] * t3[3];
    t1[0] = t2[0] * t3[0] + t2[4] * t3[1] + t2[8] * t3[2] + t2[12] * t3[3];
    return r;
  },
  _mul_vector3$1: function(arg) {
    var t1, r, t2, t3;
    t1 = new Float32Array(3);
    t1.$dartCachedLength = t1.length;
    r = new T.Vector3(t1);
    t1 = r.storage;
    t2 = this.storage;
    t3 = arg.storage;
    t1[0] = t2[0] * t3[0] + t2[4] * t3[1] + t2[8] * t3[2] + t2[12];
    t1[1] = t2[1] * t3[0] + t2[5] * t3[1] + t2[9] * t3[2] + t2[13];
    t1[2] = t2[2] * t3[0] + t2[6] * t3[1] + t2[10] * t3[2] + t2[14];
    return r;
  },
  $mul: function(_, arg) {
    var t1;
    if (typeof arg === "number")
      return this._mul_scale$1(arg);
    t1 = J.getInterceptor(arg);
    if (typeof arg === "object" && arg !== null && !!t1.$isVector4)
      return this._mul_vector$1(arg);
    if (typeof arg === "object" && arg !== null && !!t1.$isVector3)
      return this._mul_vector3$1(arg);
    if (4 === arg.get$dimension())
      return this._mul_matrix$1(arg);
    throw H.wrapException(new P.ArgumentError(arg));
  },
  $add: function(_, arg) {
    var t1, r, t2, t3, t4;
    t1 = new Float32Array(16);
    t1.$dartCachedLength = t1.length;
    r = new T.Matrix4(t1);
    t1 = r.storage;
    t2 = this.storage;
    t3 = t2[0];
    t4 = arg.get$storage();
    if (0 >= C.JS_CONST_ZYJ(t4))
      throw H.ioore(t4, 0);
    t1[0] = t3 + t4[0];
    t4 = t2[1];
    t3 = arg.get$storage();
    if (1 >= C.JS_CONST_ZYJ(t3))
      throw H.ioore(t3, 1);
    t1[1] = t4 + t3[1];
    t3 = t2[2];
    t4 = arg.get$storage();
    if (2 >= C.JS_CONST_ZYJ(t4))
      throw H.ioore(t4, 2);
    t1[2] = t3 + t4[2];
    t4 = t2[3];
    t3 = arg.get$storage();
    if (3 >= C.JS_CONST_ZYJ(t3))
      throw H.ioore(t3, 3);
    t1[3] = t4 + t3[3];
    t3 = t2[4];
    t4 = arg.get$storage();
    if (4 >= C.JS_CONST_ZYJ(t4))
      throw H.ioore(t4, 4);
    t1[4] = t3 + t4[4];
    t4 = t2[5];
    t3 = arg.get$storage();
    if (5 >= C.JS_CONST_ZYJ(t3))
      throw H.ioore(t3, 5);
    t1[5] = t4 + t3[5];
    t3 = t2[6];
    t4 = arg.get$storage();
    if (6 >= C.JS_CONST_ZYJ(t4))
      throw H.ioore(t4, 6);
    t1[6] = t3 + t4[6];
    t4 = t2[7];
    t3 = arg.get$storage();
    if (7 >= C.JS_CONST_ZYJ(t3))
      throw H.ioore(t3, 7);
    t1[7] = t4 + t3[7];
    t3 = t2[8];
    t4 = arg.get$storage();
    if (8 >= C.JS_CONST_ZYJ(t4))
      throw H.ioore(t4, 8);
    t1[8] = t3 + t4[8];
    t4 = t2[9];
    t3 = arg.get$storage();
    if (9 >= C.JS_CONST_ZYJ(t3))
      throw H.ioore(t3, 9);
    t1[9] = t4 + t3[9];
    t3 = t2[10];
    t4 = arg.get$storage();
    if (10 >= C.JS_CONST_ZYJ(t4))
      throw H.ioore(t4, 10);
    t1[10] = t3 + t4[10];
    t4 = t2[11];
    t3 = arg.get$storage();
    if (11 >= C.JS_CONST_ZYJ(t3))
      throw H.ioore(t3, 11);
    t1[11] = t4 + t3[11];
    t3 = t2[12];
    t4 = arg.get$storage();
    if (12 >= C.JS_CONST_ZYJ(t4))
      throw H.ioore(t4, 12);
    t1[12] = t3 + t4[12];
    t4 = t2[13];
    t3 = arg.get$storage();
    if (13 >= C.JS_CONST_ZYJ(t3))
      throw H.ioore(t3, 13);
    t1[13] = t4 + t3[13];
    t3 = t2[14];
    t4 = arg.get$storage();
    if (14 >= C.JS_CONST_ZYJ(t4))
      throw H.ioore(t4, 14);
    t1[14] = t3 + t4[14];
    t2 = t2[15];
    t4 = arg.get$storage();
    if (15 >= C.JS_CONST_ZYJ(t4))
      throw H.ioore(t4, 15);
    t1[15] = t2 + t4[15];
    return r;
  },
  $sub: function(_, arg) {
    var t1, r, t2, t3, t4;
    t1 = new Float32Array(16);
    t1.$dartCachedLength = t1.length;
    r = new T.Matrix4(t1);
    t1 = r.storage;
    t2 = this.storage;
    t3 = t2[0];
    t4 = arg.get$storage();
    if (0 >= C.JS_CONST_ZYJ(t4))
      throw H.ioore(t4, 0);
    t1[0] = t3 - t4[0];
    t4 = t2[1];
    t3 = arg.get$storage();
    if (1 >= C.JS_CONST_ZYJ(t3))
      throw H.ioore(t3, 1);
    t1[1] = t4 - t3[1];
    t3 = t2[2];
    t4 = arg.get$storage();
    if (2 >= C.JS_CONST_ZYJ(t4))
      throw H.ioore(t4, 2);
    t1[2] = t3 - t4[2];
    t4 = t2[3];
    t3 = arg.get$storage();
    if (3 >= C.JS_CONST_ZYJ(t3))
      throw H.ioore(t3, 3);
    t1[3] = t4 - t3[3];
    t3 = t2[4];
    t4 = arg.get$storage();
    if (4 >= C.JS_CONST_ZYJ(t4))
      throw H.ioore(t4, 4);
    t1[4] = t3 - t4[4];
    t4 = t2[5];
    t3 = arg.get$storage();
    if (5 >= C.JS_CONST_ZYJ(t3))
      throw H.ioore(t3, 5);
    t1[5] = t4 - t3[5];
    t3 = t2[6];
    t4 = arg.get$storage();
    if (6 >= C.JS_CONST_ZYJ(t4))
      throw H.ioore(t4, 6);
    t1[6] = t3 - t4[6];
    t4 = t2[7];
    t3 = arg.get$storage();
    if (7 >= C.JS_CONST_ZYJ(t3))
      throw H.ioore(t3, 7);
    t1[7] = t4 - t3[7];
    t3 = t2[8];
    t4 = arg.get$storage();
    if (8 >= C.JS_CONST_ZYJ(t4))
      throw H.ioore(t4, 8);
    t1[8] = t3 - t4[8];
    t4 = t2[9];
    t3 = arg.get$storage();
    if (9 >= C.JS_CONST_ZYJ(t3))
      throw H.ioore(t3, 9);
    t1[9] = t4 - t3[9];
    t3 = t2[10];
    t4 = arg.get$storage();
    if (10 >= C.JS_CONST_ZYJ(t4))
      throw H.ioore(t4, 10);
    t1[10] = t3 - t4[10];
    t4 = t2[11];
    t3 = arg.get$storage();
    if (11 >= C.JS_CONST_ZYJ(t3))
      throw H.ioore(t3, 11);
    t1[11] = t4 - t3[11];
    t3 = t2[12];
    t4 = arg.get$storage();
    if (12 >= C.JS_CONST_ZYJ(t4))
      throw H.ioore(t4, 12);
    t1[12] = t3 - t4[12];
    t4 = t2[13];
    t3 = arg.get$storage();
    if (13 >= C.JS_CONST_ZYJ(t3))
      throw H.ioore(t3, 13);
    t1[13] = t4 - t3[13];
    t3 = t2[14];
    t4 = arg.get$storage();
    if (14 >= C.JS_CONST_ZYJ(t4))
      throw H.ioore(t4, 14);
    t1[14] = t3 - t4[14];
    t2 = t2[15];
    t4 = arg.get$storage();
    if (15 >= C.JS_CONST_ZYJ(t4))
      throw H.ioore(t4, 15);
    t1[15] = t2 - t4[15];
    return r;
  },
  setZero$0: function() {
    var t1 = this.storage;
    t1[0] = 0;
    t1[1] = 0;
    t1[2] = 0;
    t1[3] = 0;
    t1[4] = 0;
    t1[5] = 0;
    t1[6] = 0;
    t1[7] = 0;
    t1[8] = 0;
    t1[9] = 0;
    t1[10] = 0;
    t1[11] = 0;
    t1[12] = 0;
    t1[13] = 0;
    t1[14] = 0;
    t1[15] = 0;
    return this;
  },
  transpose$0: function() {
    var t1, temp;
    t1 = this.storage;
    temp = t1[4];
    t1[4] = t1[1];
    t1[1] = temp;
    temp = t1[8];
    t1[8] = t1[2];
    t1[2] = temp;
    temp = t1[12];
    t1[12] = t1[3];
    t1[3] = temp;
    temp = t1[9];
    t1[9] = t1[6];
    t1[6] = temp;
    temp = t1[13];
    t1[13] = t1[7];
    t1[7] = temp;
    temp = t1[14];
    t1[14] = t1[11];
    t1[11] = temp;
    return this;
  },
  multiply$1: function(_, arg) {
    var t1, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33, t2, n00, n01, n02, n03, n10, n11, n12, n13, n20, n21, n22, n23, n30, n31, n32, n33;
    t1 = this.storage;
    m00 = t1[0];
    m01 = t1[4];
    m02 = t1[8];
    m03 = t1[12];
    m10 = t1[1];
    m11 = t1[5];
    m12 = t1[9];
    m13 = t1[13];
    m20 = t1[2];
    m21 = t1[6];
    m22 = t1[10];
    m23 = t1[14];
    m30 = t1[3];
    m31 = t1[7];
    m32 = t1[11];
    m33 = t1[15];
    t2 = arg.storage;
    n00 = t2[0];
    n01 = t2[4];
    n02 = t2[8];
    n03 = t2[12];
    n10 = t2[1];
    n11 = t2[5];
    n12 = t2[9];
    n13 = t2[13];
    n20 = t2[2];
    n21 = t2[6];
    n22 = t2[10];
    n23 = t2[14];
    n30 = t2[3];
    n31 = t2[7];
    n32 = t2[11];
    n33 = t2[15];
    t1[0] = m00 * n00 + m01 * n10 + m02 * n20 + m03 * n30;
    t1[4] = m00 * n01 + m01 * n11 + m02 * n21 + m03 * n31;
    t1[8] = m00 * n02 + m01 * n12 + m02 * n22 + m03 * n32;
    t1[12] = m00 * n03 + m01 * n13 + m02 * n23 + m03 * n33;
    t1[1] = m10 * n00 + m11 * n10 + m12 * n20 + m13 * n30;
    t1[5] = m10 * n01 + m11 * n11 + m12 * n21 + m13 * n31;
    t1[9] = m10 * n02 + m11 * n12 + m12 * n22 + m13 * n32;
    t1[13] = m10 * n03 + m11 * n13 + m12 * n23 + m13 * n33;
    t1[2] = m20 * n00 + m21 * n10 + m22 * n20 + m23 * n30;
    t1[6] = m20 * n01 + m21 * n11 + m22 * n21 + m23 * n31;
    t1[10] = m20 * n02 + m21 * n12 + m22 * n22 + m23 * n32;
    t1[14] = m20 * n03 + m21 * n13 + m22 * n23 + m23 * n33;
    t1[3] = m30 * n00 + m31 * n10 + m32 * n20 + m33 * n30;
    t1[7] = m30 * n01 + m31 * n11 + m32 * n21 + m33 * n31;
    t1[11] = m30 * n02 + m31 * n12 + m32 * n22 + m33 * n32;
    t1[15] = m30 * n03 + m31 * n13 + m32 * n23 + m33 * n33;
    return this;
  },
  copyIntoArray$2: function(array, offset) {
    var t1, t2, t3;
    t1 = offset + 15;
    t2 = this.storage;
    t3 = t2[15];
    if (t1 < 0 || t1 >= 16)
      throw H.ioore(array, t1);
    array[t1] = t3;
    t3 = offset + 14;
    t1 = t2[14];
    if (t3 < 0 || t3 >= 16)
      throw H.ioore(array, t3);
    array[t3] = t1;
    t1 = offset + 13;
    t3 = t2[13];
    if (t1 < 0 || t1 >= 16)
      throw H.ioore(array, t1);
    array[t1] = t3;
    t3 = offset + 12;
    t1 = t2[12];
    if (t3 < 0 || t3 >= 16)
      throw H.ioore(array, t3);
    array[t3] = t1;
    t1 = offset + 11;
    t3 = t2[11];
    if (t1 < 0 || t1 >= 16)
      throw H.ioore(array, t1);
    array[t1] = t3;
    t3 = offset + 10;
    t1 = t2[10];
    if (t3 < 0 || t3 >= 16)
      throw H.ioore(array, t3);
    array[t3] = t1;
    t1 = offset + 9;
    t3 = t2[9];
    if (t1 < 0 || t1 >= 16)
      throw H.ioore(array, t1);
    array[t1] = t3;
    t3 = offset + 8;
    t1 = t2[8];
    if (t3 < 0 || t3 >= 16)
      throw H.ioore(array, t3);
    array[t3] = t1;
    t1 = offset + 7;
    t3 = t2[7];
    if (t1 < 0 || t1 >= 16)
      throw H.ioore(array, t1);
    array[t1] = t3;
    t3 = offset + 6;
    t1 = t2[6];
    if (t3 < 0 || t3 >= 16)
      throw H.ioore(array, t3);
    array[t3] = t1;
    t1 = offset + 5;
    t3 = t2[5];
    if (t1 < 0 || t1 >= 16)
      throw H.ioore(array, t1);
    array[t1] = t3;
    t3 = offset + 4;
    t1 = t2[4];
    if (t3 < 0 || t3 >= 16)
      throw H.ioore(array, t3);
    array[t3] = t1;
    t1 = offset + 3;
    t3 = t2[3];
    if (t1 < 0 || t1 >= 16)
      throw H.ioore(array, t1);
    array[t1] = t3;
    t3 = offset + 2;
    t1 = t2[2];
    if (t3 < 0 || t3 >= 16)
      throw H.ioore(array, t3);
    array[t3] = t1;
    t1 = offset + 1;
    t3 = t2[1];
    if (t1 < 0 || t1 >= 16)
      throw H.ioore(array, t1);
    array[t1] = t3;
    t3 = offset + 0;
    t2 = t2[0];
    if (t3 < 0 || t3 >= 16)
      throw H.ioore(array, t3);
    array[t3] = t2;
  },
  copyIntoArray$1: function(array) {
    return this.copyIntoArray$2(array, 0);
  }
},

Vector3: {"": "Object;storage<",
  setValues$3: function(x_, y_, z_) {
    var t1 = this.storage;
    t1[0] = x_;
    t1[1] = y_;
    t1[2] = z_;
    return this;
  },
  setFrom$1: function(other) {
    var t1, t2;
    t1 = this.storage;
    t2 = other.storage;
    t1[0] = t2[0];
    t1[1] = t2[1];
    t1[2] = t2[2];
    return this;
  },
  toString$0: function(_) {
    var t1 = this.storage;
    return "[" + H.S(t1[0]) + "," + H.S(t1[1]) + "," + H.S(t1[2]) + "]";
  },
  $negate: function(_) {
    var t1, t2, t3, t4;
    t1 = this.storage;
    t2 = t1[0];
    t3 = t1[1];
    t1 = t1[2];
    t4 = new Float32Array(3);
    t4.$dartCachedLength = t4.length;
    t4 = new T.Vector3(t4);
    t4.setValues$3(-t2, -t3, -t1);
    return t4;
  },
  $sub: function(_, other) {
    var t1, t2, t3, t4, t5, t6, t7;
    t1 = this.storage;
    t2 = t1[0];
    t3 = other.get$storage();
    t4 = C.JS_CONST_ZYJ(t3);
    if (0 >= t4)
      throw H.ioore(t3, 0);
    t5 = t3[0];
    t6 = t1[1];
    if (1 >= t4)
      throw H.ioore(t3, 1);
    t7 = t3[1];
    t1 = t1[2];
    if (2 >= t4)
      throw H.ioore(t3, 2);
    t3 = t3[2];
    t4 = new Float32Array(3);
    t4.$dartCachedLength = t4.length;
    t4 = new T.Vector3(t4);
    t4.setValues$3(t2 - t5, t6 - t7, t1 - t3);
    return t4;
  },
  $add: function(_, other) {
    var t1, t2, t3, t4, t5, t6, t7;
    t1 = this.storage;
    t2 = t1[0];
    t3 = other.get$storage();
    t4 = C.JS_CONST_ZYJ(t3);
    if (0 >= t4)
      throw H.ioore(t3, 0);
    t5 = t3[0];
    t6 = t1[1];
    if (1 >= t4)
      throw H.ioore(t3, 1);
    t7 = t3[1];
    t1 = t1[2];
    if (2 >= t4)
      throw H.ioore(t3, 2);
    t3 = t3[2];
    t4 = new Float32Array(3);
    t4.$dartCachedLength = t4.length;
    t4 = new T.Vector3(t4);
    t4.setValues$3(t2 + t5, t6 + t7, t1 + t3);
    return t4;
  },
  $div: function(_, scale) {
    var o, t1, t2, t3, t4;
    if (typeof scale !== "number")
      throw H.iae(scale);
    o = 1 / scale;
    t1 = this.storage;
    t2 = t1[0];
    t3 = t1[1];
    t1 = t1[2];
    t4 = new Float32Array(3);
    t4.$dartCachedLength = t4.length;
    t4 = new T.Vector3(t4);
    t4.setValues$3(t2 * o, t3 * o, t1 * o);
    return t4;
  },
  $mul: function(_, scale) {
    var t1, t2, t3, t4;
    t1 = this.storage;
    t2 = t1[0];
    if (typeof scale !== "number")
      throw H.iae(scale);
    t3 = t1[1];
    t1 = t1[2];
    t4 = new Float32Array(3);
    t4.$dartCachedLength = t4.length;
    t4 = new T.Vector3(t4);
    t4.setValues$3(t2 * scale, t3 * scale, t1 * scale);
    return t4;
  },
  $index: function(_, i) {
    var t1 = this.storage;
    if (i >>> 0 !== i || i >= 3)
      throw H.ioore(t1, i);
    return t1[i];
  },
  $indexSet: function(_, i, v) {
    var t1 = this.storage;
    if (i >>> 0 !== i || i >= 3)
      throw H.ioore(t1, i);
    t1[i] = v;
  },
  get$length: function(_) {
    var t1, t2, t3;
    t1 = this.storage;
    t2 = t1[0];
    t3 = t1[1];
    t1 = t1[2];
    return Math.sqrt(t2 * t2 + t3 * t3 + t1 * t1);
  },
  normalize$0: function(_) {
    var l, t1;
    l = this.get$length(this);
    if (l === 0)
      return this;
    l = 1 / l;
    t1 = this.storage;
    t1[0] = t1[0] * l;
    t1[1] = t1[1] * l;
    t1[2] = t1[2] * l;
    return this;
  },
  cross$1: function(other) {
    var t1, _x, _y, _z, ox, oy, oz;
    t1 = this.storage;
    _x = t1[0];
    _y = t1[1];
    _z = t1[2];
    t1 = other.storage;
    ox = t1[0];
    oy = t1[1];
    oz = t1[2];
    t1 = new Float32Array(3);
    t1.$dartCachedLength = t1.length;
    t1 = new T.Vector3(t1);
    t1.setValues$3(_y * oz - _z * oy, _z * ox - _x * oz, _x * oy - _y * ox);
    return t1;
  },
  scale$1: function(_, arg) {
    var t1 = this.storage;
    t1[2] = t1[2] * arg;
    t1[1] = t1[1] * arg;
    t1[0] = t1[0] * arg;
    return this;
  },
  get$x: function(_) {
    return this.storage[0];
  },
  get$y: function(_) {
    return this.storage[1];
  },
  get$z: function(_) {
    return this.storage[2];
  },
  $isVector3: true
},

Vector4: {"": "Object;storage<",
  setValues$4: function(x_, y_, z_, w_) {
    var t1 = this.storage;
    t1[3] = w_;
    t1[2] = z_;
    t1[1] = y_;
    t1[0] = x_;
    return this;
  },
  toString$0: function(_) {
    var t1 = this.storage;
    return H.S(t1[0]) + "," + H.S(t1[1]) + "," + H.S(t1[2]) + "," + H.S(t1[3]);
  },
  $sub: function(_, other) {
    var t1, t2, t3, t4, t5, t6, t7, t8, t9;
    t1 = this.storage;
    t2 = t1[0];
    t3 = other.get$storage();
    t4 = C.JS_CONST_ZYJ(t3);
    if (0 >= t4)
      throw H.ioore(t3, 0);
    t5 = t3[0];
    t6 = t1[1];
    if (1 >= t4)
      throw H.ioore(t3, 1);
    t7 = t3[1];
    t8 = t1[2];
    if (2 >= t4)
      throw H.ioore(t3, 2);
    t9 = t3[2];
    t1 = t1[3];
    if (3 >= t4)
      throw H.ioore(t3, 3);
    t3 = t3[3];
    t4 = new Float32Array(4);
    t4.$dartCachedLength = t4.length;
    t4 = new T.Vector4(t4);
    t4.setValues$4(t2 - t5, t6 - t7, t8 - t9, t1 - t3);
    return t4;
  },
  $add: function(_, other) {
    var t1, t2, t3, t4, t5, t6, t7, t8, t9;
    t1 = this.storage;
    t2 = t1[0];
    t3 = other.get$storage();
    t4 = C.JS_CONST_ZYJ(t3);
    if (0 >= t4)
      throw H.ioore(t3, 0);
    t5 = t3[0];
    t6 = t1[1];
    if (1 >= t4)
      throw H.ioore(t3, 1);
    t7 = t3[1];
    t8 = t1[2];
    if (2 >= t4)
      throw H.ioore(t3, 2);
    t9 = t3[2];
    t1 = t1[3];
    if (3 >= t4)
      throw H.ioore(t3, 3);
    t3 = t3[3];
    t4 = new Float32Array(4);
    t4.$dartCachedLength = t4.length;
    t4 = new T.Vector4(t4);
    t4.setValues$4(t2 + t5, t6 + t7, t8 + t9, t1 + t3);
    return t4;
  },
  $div: function(_, scale) {
    var o, t1, t2, t3, t4, t5;
    if (typeof scale !== "number")
      throw H.iae(scale);
    o = 1 / scale;
    t1 = this.storage;
    t2 = t1[0];
    t3 = t1[1];
    t4 = t1[2];
    t1 = t1[3];
    t5 = new Float32Array(4);
    t5.$dartCachedLength = t5.length;
    t5 = new T.Vector4(t5);
    t5.setValues$4(t2 * o, t3 * o, t4 * o, t1 * o);
    return t5;
  },
  $mul: function(_, scale) {
    var t1, t2, t3, t4, t5;
    t1 = this.storage;
    t2 = t1[0];
    if (typeof scale !== "number")
      throw H.iae(scale);
    t3 = t1[1];
    t4 = t1[2];
    t1 = t1[3];
    t5 = new Float32Array(4);
    t5.$dartCachedLength = t5.length;
    t5 = new T.Vector4(t5);
    t5.setValues$4(t2 * scale, t3 * scale, t4 * scale, t1 * scale);
    return t5;
  },
  $index: function(_, i) {
    var t1 = this.storage;
    if (i >>> 0 !== i || i >= 4)
      throw H.ioore(t1, i);
    return t1[i];
  },
  $indexSet: function(_, i, v) {
    var t1 = this.storage;
    if (i >>> 0 !== i || i >= 4)
      throw H.ioore(t1, i);
    t1[i] = v;
  },
  get$length: function(_) {
    var t1, t2, t3, t4;
    t1 = this.storage;
    t2 = t1[0];
    t3 = t1[1];
    t4 = t1[2];
    t1 = t1[3];
    return Math.sqrt(t2 * t2 + t3 * t3 + t4 * t4 + t1 * t1);
  },
  get$x: function(_) {
    return this.storage[0];
  },
  get$y: function(_) {
    return this.storage[1];
  },
  get$z: function(_) {
    return this.storage[2];
  },
  $isVector4: true
}}],
]);
Isolate.$finishClasses($$, $, null);
$$ = null;

// Static function getters
init.globalFunctions.IsolateNatives__processWorkerMessage$closure = H.IsolateNatives__processWorkerMessage$closure = new H.Closure$2(H.IsolateNatives__processWorkerMessage, "IsolateNatives__processWorkerMessage$closure");
init.globalFunctions.toStringWrapper$closure = H.toStringWrapper$closure = new H.Closure$0(H.toStringWrapper, "toStringWrapper$closure");
init.globalFunctions.invokeClosure$closure = H.invokeClosure$closure = new H.Closure$7(H.invokeClosure, "invokeClosure$closure");
init.globalFunctions.isAssignable$closure = H.isAssignable$closure = new H.Closure$2(H.isAssignable, "isAssignable$closure");
init.globalFunctions.main$closure = A.main$closure = new H.Closure$0(A.main, "main$closure");
init.globalFunctions.update$closure = A.update$closure = new A.Closure$1(A.update, "update$closure");
init.globalFunctions.render$closure = A.render$closure = new A.Closure$1(A.render, "render$closure");
init.globalFunctions._asyncRunCallback$closure = P._asyncRunCallback$closure = new H.Closure$0(P._asyncRunCallback, "_asyncRunCallback$closure");
init.globalFunctions._nullDataHandler$closure = P._nullDataHandler$closure = new A.Closure$1(P._nullDataHandler, "_nullDataHandler$closure");
init.globalFunctions._nullErrorHandler$closure = P._nullErrorHandler$closure = new P.Closure$21(P._nullErrorHandler, "_nullErrorHandler$closure");
init.globalFunctions._nullDoneHandler$closure = P._nullDoneHandler$closure = new H.Closure$0(P._nullDoneHandler, "_nullDoneHandler$closure");
init.globalFunctions._defaultEquals$closure = P._defaultEquals$closure = new H.Closure$2(P._defaultEquals, "_defaultEquals$closure");
init.globalFunctions._defaultHashCode$closure = P._defaultHashCode$closure = new A.Closure$1(P._defaultHashCode, "_defaultHashCode$closure");
init.globalFunctions.identical$closure = P.identical$closure = new H.Closure$2(P.identical, "identical$closure");
init.globalFunctions.identityHashCode$closure = P.identityHashCode$closure = new A.Closure$1(P.identityHashCode, "identityHashCode$closure");
init.globalFunctions.Element__determineMouseWheelEventType$closure = W.Element__determineMouseWheelEventType$closure = new A.Closure$1(W.Element__determineMouseWheelEventType, "Element__determineMouseWheelEventType$closure");
init.globalFunctions.pow$closure = P.pow$closure = new H.Closure$2(P.pow, "pow$closure");
init.globalFunctions.getkeyXfn$closure = N.getkeyXfn$closure = new A.Closure$1(N.getkeyXfn, "getkeyXfn$closure");
init.globalFunctions.getkeyYfn$closure = N.getkeyYfn$closure = new A.Closure$1(N.getkeyYfn, "getkeyYfn$closure");
init.globalFunctions.getkeyZfn$closure = N.getkeyZfn$closure = new A.Closure$1(N.getkeyZfn, "getkeyZfn$closure");
init.globalFunctions.getreversekeyXfn$closure = N.getreversekeyXfn$closure = new A.Closure$1(N.getreversekeyXfn, "getreversekeyXfn$closure");
init.globalFunctions.getreversekeyYfn$closure = N.getreversekeyYfn$closure = new A.Closure$1(N.getreversekeyYfn, "getreversekeyYfn$closure");
init.globalFunctions.getreversekeyZfn$closure = N.getreversekeyZfn$closure = new A.Closure$1(N.getreversekeyZfn, "getreversekeyZfn$closure");
init.globalFunctions.getkeyXZfn$closure = N.getkeyXZfn$closure = new A.Closure$1(N.getkeyXZfn, "getkeyXZfn$closure");
init.globalFunctions.getkeyZXfn$closure = N.getkeyZXfn$closure = new A.Closure$1(N.getkeyZXfn, "getkeyZXfn$closure");
init.globalFunctions.getreversekeyXZfn$closure = N.getreversekeyXZfn$closure = new A.Closure$1(N.getreversekeyXZfn, "getreversekeyXZfn$closure");
init.globalFunctions.getreversekeyZXfn$closure = N.getreversekeyZXfn$closure = new A.Closure$1(N.getreversekeyZXfn, "getreversekeyZXfn$closure");
// Runtime type support
J.JSInt.$isint = true;
J.JSInt.$isnum = true;
J.JSInt.$isObject = true;
J.JSDouble.$isdouble = true;
J.JSDouble.$isnum = true;
J.JSDouble.$isObject = true;
W.Node.$isNode = true;
W.Node.$isEventTarget = true;
W.Node.$isObject = true;
W._CSSValue.$isObject = true;
W.StyleSheet.$isObject = true;
W.SpeechRecognitionResult.$isObject = true;
W.SpeechInputResult.$isObject = true;
W.Gamepad.$isObject = true;
W.CssRule.$isObject = true;
P.Rectangle.$isObject = true;
W.Touch.$isTouch = true;
W.Touch.$isObject = true;
W.TextTrack.$isEventTarget = true;
W.TextTrack.$isObject = true;
W.TextTrackCue.$isEventTarget = true;
W.TextTrackCue.$isObject = true;
J.JSString.$isString = true;
J.JSString.$isObject = true;
W.SpeechGrammar.$isObject = true;
W.SourceBuffer.$isEventTarget = true;
W.SourceBuffer.$isObject = true;
W.Plugin.$isObject = true;
W.MimeType.$isObject = true;
W.File.$isObject = true;
W.Entry.$isObject = true;
P.ElementInstance.$isEventTarget = true;
P.ElementInstance.$isObject = true;
P.Transform.$isObject = true;
P.PathSeg.$isObject = true;
P.Number.$isObject = true;
P.Length.$isObject = true;
P.Map.$isObject = true;
J.JSNumber.$isnum = true;
J.JSNumber.$isObject = true;
P.Duration.$isObject = true;
N.Level.$isObject = true;
N.WebGLPhysicsRigidBody.$isWebGLPhysicsPrivateBody = true;
N.WebGLPhysicsRigidBody.$isObject = true;
N.WebGLPhysicsArbiter.$isObject = true;
W.Event.$isEvent = true;
W.Event.$isObject = true;
N.WebGLPhysicsTriangleShape.$isObject = true;
G.ShaderProgramUniform.$isObject = true;
G.ShaderProgramAttribute.$isObject = true;
G.ShaderProgramSampler.$isObject = true;
G.VertexAttribute.$isObject = true;
N.Logger.$isObject = true;
G.SpectreMeshAttribute.$isObject = true;
G.Texture2D.$isObject = true;
G._DebugLineVertex.$isObject = true;
G._DebugLineObject.$isObject = true;
G.DeviceChild.$isObject = true;
G.SpectreTexture.$isObject = true;
G.SamplerState.$isObject = true;
G.VertexBuffer.$isObject = true;
N.LogRecord.$isObject = true;
W.TouchEvent.$isTouchEvent = true;
W.TouchEvent.$isEvent = true;
W.TouchEvent.$isObject = true;
W.KeyboardEvent.$isKeyboardEvent = true;
W.KeyboardEvent.$isEvent = true;
W.KeyboardEvent.$isObject = true;
W.MouseEvent.$isMouseEvent = true;
W.MouseEvent.$isEvent = true;
W.MouseEvent.$isObject = true;
W.WheelEvent.$isMouseEvent = true;
W.WheelEvent.$isEvent = true;
W.WheelEvent.$isObject = true;
N.WebGLPhysicsContact.$isObject = true;
N.WebGLPhysicsTOIEvent.$isObject = true;
N.ContactFace.$isObject = true;
N.WebGLPhysicsIsland.$isObject = true;
N.WebGLPhysicsPrivateBody.$isWebGLPhysicsPrivateBody = true;
N.WebGLPhysicsPrivateBody.$isObject = true;
G._GameLoopTouchEvent.$isObject = true;
B.GameLoopTimer.$isObject = true;
B.DigitalButton.$isObject = true;
G.GameLoopTouch.$isObject = true;
G.GameLoopTouchPosition.$isObject = true;
P.ReceivePort.$isObject = true;
H._IsolateEvent.$isObject = true;
H._IsolateContext.$isObject = true;
J.JSArray.$isList = true;
J.JSArray.$isObject = true;
P.Symbol.$isSymbol = true;
P.Symbol.$isObject = true;
P.StackTrace.$isStackTrace = true;
P.StackTrace.$isObject = true;
P._BufferingStreamSubscription.$is_BufferingStreamSubscription = true;
P._BufferingStreamSubscription.$is_EventSink = true;
P._BufferingStreamSubscription.$isStreamSubscription = true;
P._BufferingStreamSubscription.$isObject = true;
N.AabbTreeNode.$isAabbTreeNode = true;
N.AabbTreeNode.$isObject = true;
P.Object.$isObject = true;
G.GameLoopHtml.$isGameLoopHtml = true;
G.GameLoopHtml.$isObject = true;
J.JSBool.$isbool = true;
J.JSBool.$isObject = true;
P.Function.$isFunction = true;
P.Function.$isObject = true;
W.EventTarget.$isEventTarget = true;
W.EventTarget.$isObject = true;
P._EventSink.$is_EventSink = true;
P._EventSink.$isObject = true;
P.Future.$isFuture = true;
P.Future.$isObject = true;
P.StreamSubscription.$isStreamSubscription = true;
P.StreamSubscription.$isObject = true;
G.GraphicsDevice.$isGraphicsDevice = true;
G.GraphicsDevice.$isObject = true;
P.Index.$isIndex = true;
P.Index.$isObject = true;
W.RtcStatsReport.$isRtcStatsReport = true;
W.RtcStatsReport.$isObject = true;
T.Aabb3.$isAabb3 = true;
T.Aabb3.$isObject = true;
// getInterceptor methods
J.getInterceptor = function(receiver) {
  if (typeof receiver == "number") {
    if (Math.floor(receiver) == receiver)
      return J.JSInt.prototype;
    return J.JSDouble.prototype;
  }
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return J.JSNull.prototype;
  if (typeof receiver == "boolean")
    return J.JSBool.prototype;
  if (receiver.constructor == Array)
    return J.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.getInterceptor$asx = function(receiver) {
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return J.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.getInterceptor$ax = function(receiver) {
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return J.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.getInterceptor$n = function(receiver) {
  if (typeof receiver == "number")
    return J.JSNumber.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof P.Object))
    return J.UnknownJavaScriptObject.prototype;
  return receiver;
};
J.getInterceptor$ns = function(receiver) {
  if (typeof receiver == "number")
    return J.JSNumber.prototype;
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof P.Object))
    return J.UnknownJavaScriptObject.prototype;
  return receiver;
};
J.getInterceptor$s = function(receiver) {
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof P.Object))
    return J.UnknownJavaScriptObject.prototype;
  return receiver;
};
J.getInterceptor$x = function(receiver) {
  if (receiver == null)
    return receiver;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
C.C__DelayedDone = new P._DelayedDone();
C.C__RootZone = new P._RootZone();
C.Duration_0 = new P.Duration(0);
C.EventStreamProvider_click = H.setRuntimeTypeInfo(new W.EventStreamProvider("click"), [W.MouseEvent]);
C.EventStreamProvider_error = H.setRuntimeTypeInfo(new W.EventStreamProvider("error"), [W.Event]);
C.EventStreamProvider_keydown = H.setRuntimeTypeInfo(new W.EventStreamProvider("keydown"), [W.KeyboardEvent]);
C.EventStreamProvider_keyup = H.setRuntimeTypeInfo(new W.EventStreamProvider("keyup"), [W.KeyboardEvent]);
C.EventStreamProvider_load = H.setRuntimeTypeInfo(new W.EventStreamProvider("load"), [W.Event]);
C.EventStreamProvider_mousedown = H.setRuntimeTypeInfo(new W.EventStreamProvider("mousedown"), [W.MouseEvent]);
C.EventStreamProvider_mousemove = H.setRuntimeTypeInfo(new W.EventStreamProvider("mousemove"), [W.MouseEvent]);
C.EventStreamProvider_mouseup = H.setRuntimeTypeInfo(new W.EventStreamProvider("mouseup"), [W.MouseEvent]);
C.EventStreamProvider_resize = H.setRuntimeTypeInfo(new W.EventStreamProvider("resize"), [W.Event]);
C.EventStreamProvider_success = H.setRuntimeTypeInfo(new W.EventStreamProvider("success"), [W.Event]);
C.EventStreamProvider_touchcancel = H.setRuntimeTypeInfo(new W.EventStreamProvider("touchcancel"), [W.TouchEvent]);
C.EventStreamProvider_touchend = H.setRuntimeTypeInfo(new W.EventStreamProvider("touchend"), [W.TouchEvent]);
C.EventStreamProvider_touchmove = H.setRuntimeTypeInfo(new W.EventStreamProvider("touchmove"), [W.TouchEvent]);
C.EventStreamProvider_touchstart = H.setRuntimeTypeInfo(new W.EventStreamProvider("touchstart"), [W.TouchEvent]);
C.EventStreamProvider_webkitfullscreenchange = H.setRuntimeTypeInfo(new W.EventStreamProvider("webkitfullscreenchange"), [W.Event]);
C.EventStreamProvider_webkitfullscreenerror = H.setRuntimeTypeInfo(new W.EventStreamProvider("webkitfullscreenerror"), [W.Event]);
C.EventStreamProvider_webkitpointerlockchange = H.setRuntimeTypeInfo(new W.EventStreamProvider("webkitpointerlockchange"), [W.Event]);
C.JSArray_methods = J.JSArray.prototype;
C.JSInt_methods = J.JSInt.prototype;
C.JSNumber_methods = J.JSNumber.prototype;
C.JSString_methods = J.JSString.prototype;
C.JS_CONST_0 = function(hooks) {
  if (typeof dartExperimentalFixupGetTag != "function") return hooks;
  hooks.getTag = dartExperimentalFixupGetTag(hooks.getTag);
};
C.JS_CONST_6qb = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Firefox") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "GeoGeolocation": "Geolocation",
    "WorkerMessageEvent": "MessageEvent",
    "XMLDocument": "Document"};
  function getTagFirefox(o) {
    var tag = getTag(o);
    return quickMap[tag] || tag;
  }
  hooks.getTag = getTagFirefox;
};
C.JS_CONST_86y = function getTagFallback(o) {
  if (o == null) return "Null";
  var constructor = o.constructor;
  if (typeof constructor == "function") {
    var name = constructor.builtin$cls;
    if (typeof name == "string") return name;
    name = constructor.name;
    if (typeof name == "string"
        && name !== ""
        && name !== "Object"
        && name !== "Function.prototype") {
      return name;
    }
  }
  var s = Object.prototype.toString.call(o);
  return s.substring(8, s.length - 1);
};
C.JS_CONST_Cbr = function(getTagFallback) {
  return function(hooks) {
    if (typeof navigator != "object") return hooks;
    var userAgent = navigator.userAgent;
    if (userAgent.indexOf("Chrome") >= 0 ||
        userAgent.indexOf("DumpRenderTree") >= 0) {
      return hooks;
    }
    hooks.getTag = getTagFallback;
  };
};
C.JS_CONST_Fs4 = function(hooks) { return hooks; }
;
C.JS_CONST_TtD = function() {
  function typeNameInChrome(obj) { return obj.constructor.name; }
  function getUnknownTag(object, tag) {
    if (/^HTML[A-Z].*Element$/.test(tag)) {
      var name = Object.prototype.toString.call(object);
      if (name == "[object Object]") return null;
      return "HTMLElement";
    }
  }
  function getUnknownTagGenericBrowser(object, tag) {
    if (object instanceof HTMLElement) return "HTMLElement";
    return getUnknownTag(object, tag);
  }
  function prototypeForTag(tag) {
    if (typeof window == "undefined") return null;
    if (typeof window[tag] == "undefined") return null;
    var constructor = window[tag];
    if (typeof constructor != "function") return null;
    return constructor.prototype;
  }
  function discriminator(tag) { return null; }
  var isBrowser = typeof navigator == "object";
  return {
    getTag: typeNameInChrome,
    getUnknownTag: isBrowser ? getUnknownTagGenericBrowser : getUnknownTag,
    prototypeForTag: prototypeForTag,
    discriminator: discriminator };
};
C.JS_CONST_ZYJ =     ((typeof version == "function" && typeof os == "object" && "system" in os)
    || (typeof navigator == "object"
        && navigator.userAgent.indexOf('Chrome') != -1))
        ? function(x) { return x.$dartCachedLength || x.length; }
        : function(x) { return x.length; };
;
C.JS_CONST_rD3 = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Trident/") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "HTMLDDElement": "HTMLElement",
    "HTMLDTElement": "HTMLElement",
    "HTMLPhraseElement": "HTMLElement",
    "Position": "Geoposition"
  };
  function getTagIE(o) {
    var tag = getTag(o);
    var newTag = quickMap[tag];
    if (newTag) return newTag;
    if (tag == "Document") {
      if (!!o.xmlVersion) return "!Document";
      return "!HTMLDocument";
    }
    if (tag == "Object") {
      if (window.DataView && (o instanceof window.DataView)) return "DataView";
    }
    return tag;
  }
  function prototypeForTagIE(tag) {
    if (tag == "Document") return null;
    var constructor = window[tag];
    if (constructor == null) return null;
    return constructor.prototype;
  }
  hooks.getTag = getTagIE;
  hooks.prototypeForTag = prototypeForTagIE;
};
C.Level_CONFIG_700 = new N.Level("CONFIG", 700);
C.Level_FINE_500 = new N.Level("FINE", 500);
C.Level_INFO_800 = new N.Level("INFO", 800);
C.Level_SHOUT_1200 = new N.Level("SHOUT", 1200);
C.Level_WARNING_900 = new N.Level("WARNING", 900);
Isolate.makeConstantList = function(list) {
  list.immutable$list = true;
  list.fixed$length = true;
  return list;
};
C.List_empty = Isolate.makeConstantList([]);
C.Type_oqh = H.createRuntimeType('Uint64List');
C.Type_qxd = H.createRuntimeType('Int64List');
C.UnknownJavaScriptObject_methods = J.UnknownJavaScriptObject.prototype;
C.WheelEvent_methods = W.WheelEvent.prototype;
C.Window_methods = W.Window.prototype;
C._CustomEventStreamProvider__determineMouseWheelEventType = H.setRuntimeTypeInfo(new W._CustomEventStreamProvider(W.Element__determineMouseWheelEventType$closure), [W.WheelEvent]);
$.lazyPort = null;
$.ReceivePortImpl__nextFreeId = 1;
$.Primitives_mirrorFunctionCacheName = "$cachedFunction";
$.Primitives_mirrorInvokeCacheName = "$cachedInvocation";
$.getTagFunction = null;
$.alternateTagFunction = null;
$.prototypeForTagFunction = null;
$.dispatchRecordsForInstanceTags = null;
$.interceptorsForUncacheableTags = null;
$.initNativeDispatchFlag = null;
$.world = null;
$.gameLoop = null;
$.device = null;
$.context = null;
$.debug = null;
$.camera = null;
$.rasterizationState = null;
$.depthState = null;
$.boxShader = null;
$.boxMesh = null;
$.boxInputLayout = null;
$.boxTexture = null;
$.boxSampler = null;
$.viewPort = null;
$.printToZone = null;
$._callbacksAreEnqueued = false;
$.Zone__current = C.C__RootZone;
$.Expando__keyCount = 0;
$.WebGLPhysicsConfig_SLEEP_DELAY = 60;
$.WebGLPhysicsPrivateBody_uniqueId = 0;
$.Device__isOpera = null;
$.Device__isIE = null;
$.Device__isFirefox = null;
$.Device__isWebKit = null;
$.Device__cachedCssPrefix = null;
$.hierarchicalLoggingEnabled = false;
$._rootLevel = C.Level_INFO_800;
$.LogRecord__nextNumber = 0;
$.RenderTarget__systemRenderTarget = null;
J.$add$ns = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver + a0;
  return J.getInterceptor$ns(receiver).$add(receiver, a0);
};
J.$eq = function(receiver, a0) {
  if (receiver == null)
    return a0 == null;
  if (typeof receiver != "object")
    return a0 != null && receiver === a0;
  return J.getInterceptor(receiver).$eq(receiver, a0);
};
J.$ge$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver >= a0;
  return J.getInterceptor$n(receiver).$ge(receiver, a0);
};
J.$gt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver > a0;
  return J.getInterceptor$n(receiver).$gt(receiver, a0);
};
J.$index$asx = function(receiver, a0) {
  if (receiver.constructor == Array || typeof receiver == "string" || H.isJsIndexable(receiver, receiver[init.dispatchPropertyName]))
    if (a0 >>> 0 === a0 && a0 < receiver.length)
      return receiver[a0];
  return J.getInterceptor$asx(receiver).$index(receiver, a0);
};
J.$indexSet$ax = function(receiver, a0, a1) {
  if ((receiver.constructor == Array || H.isJsIndexable(receiver, receiver[init.dispatchPropertyName])) && !receiver.immutable$list && a0 >>> 0 === a0 && a0 < receiver.length)
    return receiver[a0] = a1;
  return J.getInterceptor$ax(receiver).$indexSet(receiver, a0, a1);
};
J.$le$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver <= a0;
  return J.getInterceptor$n(receiver).$le(receiver, a0);
};
J.$lt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver < a0;
  return J.getInterceptor$n(receiver).$lt(receiver, a0);
};
J.$mul$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver * a0;
  return J.getInterceptor$n(receiver).$mul(receiver, a0);
};
J.$sub$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver - a0;
  return J.getInterceptor$n(receiver).$sub(receiver, a0);
};
J._async$_add$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver)._async$_add$1(receiver, a0);
};
J.abs$0$n = function(receiver) {
  return J.getInterceptor$n(receiver).abs$0(receiver);
};
J.activeTexture$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).activeTexture$1(receiver, a0);
};
J.addEventListener$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).addEventListener$3(receiver, a0, a1, a2);
};
J.attachShader$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).attachShader$2(receiver, a0, a1);
};
J.bindBuffer$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).bindBuffer$2(receiver, a0, a1);
};
J.bindTexture$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).bindTexture$2(receiver, a0, a1);
};
J.blendColor$4$x = function(receiver, a0, a1, a2, a3) {
  return J.getInterceptor$x(receiver).blendColor$4(receiver, a0, a1, a2, a3);
};
J.blendEquationSeparate$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).blendEquationSeparate$2(receiver, a0, a1);
};
J.blendFuncSeparate$4$x = function(receiver, a0, a1, a2, a3) {
  return J.getInterceptor$x(receiver).blendFuncSeparate$4(receiver, a0, a1, a2, a3);
};
J.bufferData$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).bufferData$3(receiver, a0, a1, a2);
};
J.bufferDataTyped$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).bufferDataTyped$3(receiver, a0, a1, a2);
};
J.bufferSubDataTyped$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).bufferSubDataTyped$3(receiver, a0, a1, a2);
};
J.ceil$0$n = function(receiver) {
  return J.getInterceptor$n(receiver).ceil$0(receiver);
};
J.clear$0$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).clear$0(receiver);
};
J.clear$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).clear$1(receiver, a0);
};
J.clearColor$4$x = function(receiver, a0, a1, a2, a3) {
  return J.getInterceptor$x(receiver).clearColor$4(receiver, a0, a1, a2, a3);
};
J.clearDepth$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).clearDepth$1(receiver, a0);
};
J.colorMask$4$x = function(receiver, a0, a1, a2, a3) {
  return J.getInterceptor$x(receiver).colorMask$4(receiver, a0, a1, a2, a3);
};
J.compileShader$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).compileShader$1(receiver, a0);
};
J.contains$2$asx = function(receiver, a0, a1) {
  return J.getInterceptor$asx(receiver).contains$2(receiver, a0, a1);
};
J.createBuffer$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).createBuffer$0(receiver);
};
J.createProgram$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).createProgram$0(receiver);
};
J.createShader$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).createShader$1(receiver, a0);
};
J.createTexture$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).createTexture$0(receiver);
};
J.cullFace$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).cullFace$1(receiver, a0);
};
J.depthFunc$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).depthFunc$1(receiver, a0);
};
J.depthMask$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).depthMask$1(receiver, a0);
};
J.depthRange$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).depthRange$2(receiver, a0, a1);
};
J.detachShader$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).detachShader$2(receiver, a0, a1);
};
J.disable$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).disable$1(receiver, a0);
};
J.disableVertexAttribArray$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).disableVertexAttribArray$1(receiver, a0);
};
J.drawArrays$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).drawArrays$3(receiver, a0, a1, a2);
};
J.drawElements$4$x = function(receiver, a0, a1, a2, a3) {
  return J.getInterceptor$x(receiver).drawElements$4(receiver, a0, a1, a2, a3);
};
J.enable$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).enable$1(receiver, a0);
};
J.enableVertexAttribArray$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).enableVertexAttribArray$1(receiver, a0);
};
J.floor$0$n = function(receiver) {
  return J.getInterceptor$n(receiver).floor$0(receiver);
};
J.forEach$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).forEach$1(receiver, a0);
};
J.frontFace$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).frontFace$1(receiver, a0);
};
J.get$_children$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$_children(receiver);
};
J.get$_key$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$_key(receiver);
};
J.get$changedTouches$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$changedTouches(receiver);
};
J.get$error$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$error(receiver);
};
J.get$hashCode$ = function(receiver) {
  return J.getInterceptor(receiver).get$hashCode(receiver);
};
J.get$height$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$height(receiver);
};
J.get$identifier$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$identifier(receiver);
};
J.get$isEmpty$asx = function(receiver) {
  return J.getInterceptor$asx(receiver).get$isEmpty(receiver);
};
J.get$iterator$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).get$iterator(receiver);
};
J.get$length$asx = function(receiver) {
  return J.getInterceptor$asx(receiver).get$length(receiver);
};
J.get$location$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$location(receiver);
};
J.get$name$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$name(receiver);
};
J.get$type$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$type(receiver);
};
J.get$value$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$value(receiver);
};
J.get$values$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$values(receiver);
};
J.get$width$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$width(receiver);
};
J.getActiveAttrib$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).getActiveAttrib$2(receiver, a0, a1);
};
J.getActiveUniform$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).getActiveUniform$2(receiver, a0, a1);
};
J.getAttribLocation$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).getAttribLocation$2(receiver, a0, a1);
};
J.getContext3d$1$stencil$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).getContext3d$1$stencil(receiver, a0);
};
J.getContextAttributes$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).getContextAttributes$0(receiver);
};
J.getParameter$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).getParameter$1(receiver, a0);
};
J.getProgramInfoLog$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).getProgramInfoLog$1(receiver, a0);
};
J.getProgramParameter$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).getProgramParameter$2(receiver, a0, a1);
};
J.getShaderInfoLog$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).getShaderInfoLog$1(receiver, a0);
};
J.getShaderParameter$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).getShaderParameter$2(receiver, a0, a1);
};
J.getUniformLocation$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).getUniformLocation$2(receiver, a0, a1);
};
J.linkProgram$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).linkProgram$1(receiver, a0);
};
J.polygonOffset$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).polygonOffset$2(receiver, a0, a1);
};
J.preventDefault$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).preventDefault$0(receiver);
};
J.removeEventListener$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).removeEventListener$3(receiver, a0, a1, a2);
};
J.reset$7$x = function(receiver, a0, a1, a2, a3, a4, a5, a6) {
  return J.getInterceptor$x(receiver).reset$7(receiver, a0, a1, a2, a3, a4, a5, a6);
};
J.send$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).send$1(receiver, a0);
};
J.set$length$asx = function(receiver, value) {
  return J.getInterceptor$asx(receiver).set$length(receiver, value);
};
J.shaderSource$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).shaderSource$2(receiver, a0, a1);
};
J.texImage2DCanvas$6$x = function(receiver, a0, a1, a2, a3, a4, a5) {
  return J.getInterceptor$x(receiver).texImage2DCanvas$6(receiver, a0, a1, a2, a3, a4, a5);
};
J.texImage2DImage$6$x = function(receiver, a0, a1, a2, a3, a4, a5) {
  return J.getInterceptor$x(receiver).texImage2DImage$6(receiver, a0, a1, a2, a3, a4, a5);
};
J.texImage2DVideo$6$x = function(receiver, a0, a1, a2, a3, a4, a5) {
  return J.getInterceptor$x(receiver).texImage2DVideo$6(receiver, a0, a1, a2, a3, a4, a5);
};
J.texParameteri$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).texParameteri$3(receiver, a0, a1, a2);
};
J.then$2$onError$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).then$2$onError(receiver, a0, a1);
};
J.toDouble$0$n = function(receiver) {
  return J.getInterceptor$n(receiver).toDouble$0(receiver);
};
J.toList$0$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).toList$0(receiver);
};
J.toString$0 = function(receiver) {
  return J.getInterceptor(receiver).toString$0(receiver);
};
J.uniform1f$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).uniform1f$2(receiver, a0, a1);
};
J.uniform1fv$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).uniform1fv$2(receiver, a0, a1);
};
J.uniform1i$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).uniform1i$2(receiver, a0, a1);
};
J.uniform1iv$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).uniform1iv$2(receiver, a0, a1);
};
J.uniform2f$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).uniform2f$3(receiver, a0, a1, a2);
};
J.uniform2fv$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).uniform2fv$2(receiver, a0, a1);
};
J.uniform2i$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).uniform2i$3(receiver, a0, a1, a2);
};
J.uniform2iv$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).uniform2iv$2(receiver, a0, a1);
};
J.uniform3f$4$x = function(receiver, a0, a1, a2, a3) {
  return J.getInterceptor$x(receiver).uniform3f$4(receiver, a0, a1, a2, a3);
};
J.uniform3fv$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).uniform3fv$2(receiver, a0, a1);
};
J.uniform3i$4$x = function(receiver, a0, a1, a2, a3) {
  return J.getInterceptor$x(receiver).uniform3i$4(receiver, a0, a1, a2, a3);
};
J.uniform3iv$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).uniform3iv$2(receiver, a0, a1);
};
J.uniform4f$5$x = function(receiver, a0, a1, a2, a3, a4) {
  return J.getInterceptor$x(receiver).uniform4f$5(receiver, a0, a1, a2, a3, a4);
};
J.uniform4fv$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).uniform4fv$2(receiver, a0, a1);
};
J.uniform4i$5$x = function(receiver, a0, a1, a2, a3, a4) {
  return J.getInterceptor$x(receiver).uniform4i$5(receiver, a0, a1, a2, a3, a4);
};
J.uniform4iv$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).uniform4iv$2(receiver, a0, a1);
};
J.uniformMatrix2fv$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).uniformMatrix2fv$3(receiver, a0, a1, a2);
};
J.uniformMatrix3fv$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).uniformMatrix3fv$3(receiver, a0, a1, a2);
};
J.uniformMatrix4fv$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).uniformMatrix4fv$3(receiver, a0, a1, a2);
};
J.useProgram$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).useProgram$1(receiver, a0);
};
J.vertexAttribPointer$6$x = function(receiver, a0, a1, a2, a3, a4, a5) {
  return J.getInterceptor$x(receiver).vertexAttribPointer$6(receiver, a0, a1, a2, a3, a4, a5);
};
J.viewport$4$x = function(receiver, a0, a1, a2, a3) {
  return J.getInterceptor$x(receiver).viewport$4(receiver, a0, a1, a2, a3);
};
J.write$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).write$1(receiver, a0);
};
Isolate.$lazy($, "globalThis", "globalThis", "get$globalThis", function() {
  return function() { return this; }();
});
Isolate.$lazy($, "globalWindow", "globalWindow", "get$globalWindow", function() {
  return $.get$globalThis().window;
});
Isolate.$lazy($, "globalWorker", "globalWorker", "get$globalWorker", function() {
  return $.get$globalThis().Worker;
});
Isolate.$lazy($, "globalPostMessageDefined", "globalPostMessageDefined", "get$globalPostMessageDefined", function() {
  return $.get$globalThis().postMessage !== void 0;
});
Isolate.$lazy($, "thisScript", "IsolateNatives_thisScript", "get$IsolateNatives_thisScript", function() {
  return H.IsolateNatives_computeThisScript();
});
Isolate.$lazy($, "workerIds", "IsolateNatives_workerIds", "get$IsolateNatives_workerIds", function() {
  var t1 = new P.Expando(null);
  H.setRuntimeTypeInfo(t1, [J.JSInt]);
  return t1;
});
Isolate.$lazy($, "noSuchMethodPattern", "TypeErrorDecoder_noSuchMethodPattern", "get$TypeErrorDecoder_noSuchMethodPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({ toString: function() { return "$receiver$"; } }));
});
Isolate.$lazy($, "notClosurePattern", "TypeErrorDecoder_notClosurePattern", "get$TypeErrorDecoder_notClosurePattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({ $method$: null, toString: function() { return "$receiver$"; } }));
});
Isolate.$lazy($, "nullCallPattern", "TypeErrorDecoder_nullCallPattern", "get$TypeErrorDecoder_nullCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(null));
});
Isolate.$lazy($, "nullLiteralCallPattern", "TypeErrorDecoder_nullLiteralCallPattern", "get$TypeErrorDecoder_nullLiteralCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOnNull());
});
Isolate.$lazy($, "undefinedCallPattern", "TypeErrorDecoder_undefinedCallPattern", "get$TypeErrorDecoder_undefinedCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(void 0));
});
Isolate.$lazy($, "undefinedLiteralCallPattern", "TypeErrorDecoder_undefinedLiteralCallPattern", "get$TypeErrorDecoder_undefinedLiteralCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOnUndefined());
});
Isolate.$lazy($, "nullPropertyPattern", "TypeErrorDecoder_nullPropertyPattern", "get$TypeErrorDecoder_nullPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(null));
});
Isolate.$lazy($, "nullLiteralPropertyPattern", "TypeErrorDecoder_nullLiteralPropertyPattern", "get$TypeErrorDecoder_nullLiteralPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOnNull());
});
Isolate.$lazy($, "undefinedPropertyPattern", "TypeErrorDecoder_undefinedPropertyPattern", "get$TypeErrorDecoder_undefinedPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(void 0));
});
Isolate.$lazy($, "undefinedLiteralPropertyPattern", "TypeErrorDecoder_undefinedLiteralPropertyPattern", "get$TypeErrorDecoder_undefinedLiteralPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOnUndefined());
});
Isolate.$lazy($, "boxBodies", "boxBodies", "get$boxBodies", function() {
  var t1 = [];
  H.setRuntimeTypeInfo(t1, [N.WebGLPhysicsRigidBody]);
  return t1;
});
Isolate.$lazy($, "boxVertArray", "boxVertArray", "get$boxVertArray", function() {
  var t1 = new Float32Array([-0.5, -0.5, 0.5, 0, 0, 0.5, -0.5, 0.5, 1, 0, 0.5, 0.5, 0.5, 1, 1, -0.5, 0.5, 0.5, 0, 1, -0.5, 0.5, 0.5, 0, 0, 0.5, 0.5, 0.5, 1, 0, 0.5, 0.5, -0.5, 1, 1, -0.5, 0.5, -0.5, 0, 1, -0.5, 0.5, -0.5, 1, 1, 0.5, 0.5, -0.5, 0, 1, 0.5, -0.5, -0.5, 0, 0, -0.5, -0.5, -0.5, 1, 0, -0.5, -0.5, -0.5, 0, 0, 0.5, -0.5, -0.5, 1, 0, 0.5, -0.5, 0.5, 1, 1, -0.5, -0.5, 0.5, 0, 1, 0.5, -0.5, 0.5, 0, 0, 0.5, -0.5, -0.5, 1, 0, 0.5, 0.5, -0.5, 1, 1, 0.5, 0.5, 0.5, 0, 1, -0.5, -0.5, -0.5, 0, 0, -0.5, -0.5, 0.5, 1, 0, -0.5, 0.5, 0.5, 1, 1, -0.5, 0.5, -0.5, 0, 1]);
  t1.$dartCachedLength = t1.length;
  return t1;
});
Isolate.$lazy($, "boxIdxArray", "boxIdxArray", "get$boxIdxArray", function() {
  var t1 = new Uint16Array([2, 0, 1, 3, 0, 2, 6, 4, 5, 7, 4, 6, 10, 8, 9, 11, 8, 10, 14, 12, 13, 15, 12, 14, 18, 16, 17, 19, 16, 18, 22, 20, 21, 23, 20, 22]);
  t1.$dartCachedLength = t1.length;
  return t1;
});
Isolate.$lazy($, "frontBuffer", "frontBuffer", "get$frontBuffer", function() {
  return document.querySelector("#front_buffer");
});
Isolate.$lazy($, "projectionView", "projectionView", "get$projectionView", function() {
  var t1 = new Float32Array(16);
  t1.$dartCachedLength = t1.length;
  return new T.Matrix4(t1);
});
Isolate.$lazy($, "view", "view", "get$view", function() {
  var t1 = new Float32Array(16);
  t1.$dartCachedLength = t1.length;
  return new T.Matrix4(t1);
});
Isolate.$lazy($, "boxTransform", "boxTransform", "get$boxTransform", function() {
  var t1 = new Float32Array(12);
  t1.$dartCachedLength = t1.length;
  return new N.Matrix43(t1);
});
Isolate.$lazy($, "boxTransform4", "boxTransform4", "get$boxTransform4", function() {
  var t1 = new Float32Array(16);
  t1.$dartCachedLength = t1.length;
  return new T.Matrix4(t1);
});
Isolate.$lazy($, "_toStringList", "IterableMixinWorkaround__toStringList", "get$IterableMixinWorkaround__toStringList", function() {
  return P.List_List(null, null);
});
Isolate.$lazy($, "_asyncCallbacks", "_asyncCallbacks", "get$_asyncCallbacks", function() {
  return P.ListQueue$(null, {func: "void_", void: true});
});
Isolate.$lazy($, "_toStringVisiting", "_toStringVisiting", "get$_toStringVisiting", function() {
  return P.HashSet_HashSet$identity(null);
});
Isolate.$lazy($, "_toStringList", "Maps__toStringList", "get$Maps__toStringList", function() {
  return P.List_List(null, null);
});
Isolate.$lazy($, "arbiterPool", "WebGLPhysicsArbiter_arbiterPool", "get$WebGLPhysicsArbiter_arbiterPool", function() {
  return [];
});
Isolate.$lazy($, "sharedInverseInertiaLocal", "WebGLPhysicsCollisionObject_sharedInverseInertiaLocal", "get$WebGLPhysicsCollisionObject_sharedInverseInertiaLocal", function() {
  var t1 = new Float32Array(3);
  t1.$dartCachedLength = t1.length;
  return new T.Vector3(t1);
});
Isolate.$lazy($, "sharedInverseInertia", "WebGLPhysicsCollisionObject_sharedInverseInertia", "get$WebGLPhysicsCollisionObject_sharedInverseInertia", function() {
  var t1 = new Float32Array(9);
  t1.$dartCachedLength = t1.length;
  t1 = new T.Matrix3(t1);
  t1.setIdentity$0();
  return t1;
});
Isolate.$lazy($, "_contactPool", "WebGLPhysicsContact__contactPool", "get$WebGLPhysicsContact__contactPool", function() {
  var t1 = [];
  H.setRuntimeTypeInfo(t1, [N.WebGLPhysicsContact]);
  return t1;
});
Isolate.$lazy($, "_publicContacts", "WebGLPhysicsContact__publicContacts", "get$WebGLPhysicsContact__publicContacts", function() {
  var t1, t2, t3;
  t1 = new Float32Array(52);
  t1.$dartCachedLength = t1.length;
  t2 = new Float32Array(52);
  t2.$dartCachedLength = t2.length;
  t3 = new Float32Array(52);
  t3.$dartCachedLength = t3.length;
  return [new N.WebGLPhysicsContact(t1), new N.WebGLPhysicsContact(t2), new N.WebGLPhysicsContact(t3)];
});
Isolate.$lazy($, "_callbackContacts", "WebGLPhysicsContact__callbackContacts", "get$WebGLPhysicsContact__callbackContacts", function() {
  var t1 = [];
  H.setRuntimeTypeInfo(t1, [N.WebGLPhysicsContact]);
  return t1;
});
Isolate.$lazy($, "islandPool", "WebGLPhysicsIsland_islandPool", "get$WebGLPhysicsIsland_islandPool", function() {
  return [];
});
Isolate.$lazy($, "eventPool", "WebGLPhysicsTOIEvent_eventPool", "get$WebGLPhysicsTOIEvent_eventPool", function() {
  var t1 = [];
  H.setRuntimeTypeInfo(t1, [N.WebGLPhysicsTOIEvent]);
  return t1;
});
Isolate.$lazy($, "trianglePool", "WebGLPhysicsTriangleShape_trianglePool", "get$WebGLPhysicsTriangleShape_trianglePool", function() {
  var t1 = [];
  H.setRuntimeTypeInfo(t1, [N.WebGLPhysicsTriangleShape]);
  return t1;
});
Isolate.$lazy($, "_buttonIds", "Keyboard__buttonIds", "get$Keyboard__buttonIds", function() {
  return [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 16, 17, 18, 32, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 13, 38, 40, 37, 39, 27, 192, 220, 8, 20, 221, 188, 93, 189, 46, 35, 187, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 61, 59, 166, 36, 45, 183, 3, 224, 91, 12, 46, 111, 39, 104, 101, 100, 45, 109, 106, 105, 38, 33, 36, 97, 110, 107, 103, 102, 40, 34, 35, 99, 98, 37, 96, 144, 219, 33, 34, 19, 190, 44, 63, 145, 186, 222, 191, 9, 192, 229, 224, 0, 91, 92];
});
Isolate.$lazy($, "_buttonIds", "Mouse__buttonIds", "get$Mouse__buttonIds", function() {
  return [0, 1, 2];
});
Isolate.$lazy($, "_loggers", "Logger__loggers", "get$Logger__loggers", function() {
  var t1 = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
  H.setRuntimeTypeInfo(t1, [J.JSString, N.Logger]);
  return t1;
});
Isolate.$lazy($, "_spectreLog", "_spectreLog", "get$_spectreLog", function() {
  return N.Logger_Logger("Spectre");
});
Isolate.$lazy($, "_values", "Blend__values", "get$Blend__values", function() {
  return H.fillLiteralMap(["Blend.Zero", 0, "Blend.One", 1, "Blend.SourceColor", 768, "Blend.InverseSourceColor", 769, "Blend.SourceAlpha", 770, "Blend.InverseSourceAlpha", 771, "Blend.DestinationAlpha", 772, "Blend.InverseDestinationAlpha", 773, "Blend.DestinationColor", 774, "Blend.InverseDestinationColor", 775, "Blend.SourceAlphaSaturation", 776, "Blend.BlendFactor", 32769, "Blend.InverseBlendFactor", 32770], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
});
Isolate.$lazy($, "_values", "BlendOperation__values", "get$BlendOperation__values", function() {
  return H.fillLiteralMap(["BlendOperation.Add", 32774, "BlendOperation.ReverseSubtract", 32779, "BlendOperation.Subtract", 32778], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
});
Isolate.$lazy($, "_values", "CompareFunction__values", "get$CompareFunction__values", function() {
  return H.fillLiteralMap(["CompareFunction.Always", 519, "CompareFunction.Equal", 514, "CompareFunction.Greater", 516, "CompareFunction.GreaterEqual", 518, "CompareFunction.Less", 513, "CompareFunction.LessEqual", 515, "CompareFunction.Fail", 512, "CompareFunction.NotEqual", 517], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
});
Isolate.$lazy($, "_values", "CullMode__values", "get$CullMode__values", function() {
  return H.fillLiteralMap(["CullMode.None", 0, "CullMode.Front", 1028, "CullMode.Back", 1029], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
});
Isolate.$lazy($, "_values", "DataType__values", "get$DataType__values", function() {
  return H.fillLiteralMap(["DataType.Int8", 5120, "DataType.Uint8", 5121, "DataType.Int16", 5122, "DataType.Uint16", 5123, "DataType.Int32", 5124, "DataType.Uint32", 5125, "DataType.Float32", 5126], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
});
Isolate.$lazy($, "ColorGreen", "DebugDrawManager_ColorGreen", "get$DebugDrawManager_ColorGreen", function() {
  var t1 = new Float32Array(4);
  t1.$dartCachedLength = t1.length;
  t1 = new T.Vector4(t1);
  t1.setValues$4(0, 1, 0, 1);
  return t1;
});
Isolate.$lazy($, "_values", "FrontFace__values", "get$FrontFace__values", function() {
  return H.fillLiteralMap(["FrontFace.Clockwise", 2304, "FrontFace.CounterClockwise", 2305], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
});
Isolate.$lazy($, "_vendorExtensions", "GraphicsDeviceCapabilities__vendorExtensions", "get$GraphicsDeviceCapabilities__vendorExtensions", function() {
  return ["", "WEBKIT_", "MOZ_"];
});
Isolate.$lazy($, "_values", "PixelFormat__values", "get$PixelFormat__values", function() {
  return H.fillLiteralMap(["PixelFormat.Rgb", 6407, "PixelFormat.Rgba", 6408, "PixelFormat.Depth", 6402], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
});
Isolate.$lazy($, "_values", "TextureAddressMode__values", "get$TextureAddressMode__values", function() {
  return H.fillLiteralMap(["TextureAddressMode.Clamp", 33071, "TextureAddressMode.Mirror", 33648, "TextureAddressMode.Wrap", 10497], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
});
Isolate.$lazy($, "_values", "TextureMinFilter__values", "get$TextureMinFilter__values", function() {
  return H.fillLiteralMap(["TextureMinFilter.Linear", 9729, "TextureMinFilter.Point", 9728, "TextureMinFilter.PointMipPoint", 9984, "TextureMinFilter.PointMipLinear", 9986, "TextureMinFilter.LinearMipPoint", 9985, "TextureMinFilter.LinearMipLinear", 9987], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
});
// Native classes

init.functionAliases = {};
;
init.metadata = [];
$ = null;
Isolate = Isolate.$finishIsolateConstructor(Isolate);
$ = new Isolate();
function convertToFastObject(properties) {
  function MyClass() {};
  MyClass.prototype = properties;
  new MyClass();
  return properties;
}
A = convertToFastObject(A);
B = convertToFastObject(B);
C = convertToFastObject(C);
D = convertToFastObject(D);
E = convertToFastObject(E);
F = convertToFastObject(F);
G = convertToFastObject(G);
H = convertToFastObject(H);
J = convertToFastObject(J);
K = convertToFastObject(K);
L = convertToFastObject(L);
M = convertToFastObject(M);
N = convertToFastObject(N);
O = convertToFastObject(O);
P = convertToFastObject(P);
Q = convertToFastObject(Q);
R = convertToFastObject(R);
S = convertToFastObject(S);
T = convertToFastObject(T);
U = convertToFastObject(U);
V = convertToFastObject(V);
W = convertToFastObject(W);
X = convertToFastObject(X);
Y = convertToFastObject(Y);
Z = convertToFastObject(Z);
!function() {
  var objectProto = Object.prototype;
  for (var i = 0;; i++) {
    var property = "___dart_dispatch_record_ZxYxX_0_";
    if (i > 0)
      property = rootProperty + "_" + i;
    if (!(property in objectProto))
      return init.dispatchPropertyName = property;
  }
}();
// BEGIN invoke [main].
;(function (callback) {
  if (typeof document === "undefined") {
    callback(null);
    return;
  }
  if (document.currentScript) {
    callback(document.currentScript);
    return;
  }

  var scripts = document.scripts;
  function onLoad(event) {
    for (var i = 0; i < scripts.length; ++i) {
      scripts[i].removeEventListener("load", onLoad, false);
    }
    callback(event.target);
  }
  for (var i = 0; i < scripts.length; ++i) {
    scripts[i].addEventListener("load", onLoad, false);
  }
})(function(currentScript) {
  init.currentScript = currentScript;

  if (typeof dartMainRunner === "function") {
    dartMainRunner(function() { H.startRootIsolate(A.main$closure); });
  } else {
    H.startRootIsolate(A.main$closure);
  }
});
// END invoke [main].
function init() {
  Isolate.$isolateProperties = {};
  function generateAccessor(field, accessors, cls) {
    var len = field.length;
    var code = field.charCodeAt(len - 1);
    var reflectable = false;
    if (code == 45) {
      len--;
      code = field.charCodeAt(len - 1);
      field = field.substring(0, len);
      reflectable = true;
    }
    code = code >= 60 && code <= 64 ? code - 59 : code >= 123 && code <= 126 ? code - 117 : code >= 37 && code <= 43 ? code - 27 : 0;
    if (code) {
      var getterCode = code & 3;
      var setterCode = code >> 2;
      var accessorName = field = field.substring(0, len - 1);
      var divider = field.indexOf(":");
      if (divider > 0) {
        accessorName = field.substring(0, divider);
        field = field.substring(divider + 1);
      }
      if (getterCode) {
        var args = getterCode & 2 ? "receiver" : "";
        var receiver = getterCode & 1 ? "this" : "receiver";
        var body = "return " + receiver + "." + field;
        var property = cls + ".prototype.get$" + accessorName + "=";
        var fn = "function(" + args + "){" + body + "}";
        if (reflectable)
          accessors.push(property + "$reflectable(" + fn + ");\n");
        else
          accessors.push(property + fn + ";\n");
      }
      if (setterCode) {
        var args = setterCode & 2 ? "receiver, value" : "value";
        var receiver = setterCode & 1 ? "this" : "receiver";
        var body = receiver + "." + field + " = value";
        var property = cls + ".prototype.set$" + accessorName + "=";
        var fn = "function(" + args + "){" + body + "}";
        if (reflectable)
          accessors.push(property + "$reflectable(" + fn + ");\n");
        else
          accessors.push(property + fn + ";\n");
      }
    }
    return field;
  }
  Isolate.$isolateProperties.$generateAccessor = generateAccessor;
  function defineClass(name, cls, fields) {
    var accessors = [];
    var str = "function " + cls + "(";
    var body = "";
    for (var i = 0; i < fields.length; i++) {
      if (i != 0)
        str += ", ";
      var field = generateAccessor(fields[i], accessors, cls);
      var parameter = "parameter_" + field;
      str += parameter;
      body += "this." + field + " = " + parameter + ";\n";
    }
    str += ") {\n" + body + "}\n";
    str += cls + ".builtin$cls=\"" + name + "\";\n";
    str += "$desc=$collectedClasses." + cls + ";\n";
    str += "if($desc instanceof Array) $desc = $desc[1];\n";
    str += cls + ".prototype = $desc;\n";
    if (typeof defineClass.name != "string") {
      str += cls + ".name=\"" + cls + "\";\n";
    }
    str += accessors.join("");
    return str;
  }
  var inheritFrom = function() {
    function tmp() {
    }
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    return function(constructor, superConstructor) {
      tmp.prototype = superConstructor.prototype;
      var object = new tmp();
      var properties = constructor.prototype;
      for (var member in properties)
        if (hasOwnProperty.call(properties, member))
          object[member] = properties[member];
      object.constructor = constructor;
      constructor.prototype = object;
      return object;
    };
  }();
  Isolate.$finishClasses = function(collectedClasses, isolateProperties, existingIsolateProperties) {
    var pendingClasses = {};
    if (!init.allClasses)
      init.allClasses = {};
    var allClasses = init.allClasses;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    if (typeof dart_precompiled == "function") {
      var constructors = dart_precompiled(collectedClasses);
    } else {
      var combinedConstructorFunction = "function $reflectable(fn){fn.$reflectable=1;return fn};\n" + "var $desc;\n";
      var constructorsList = [];
    }
    for (var cls in collectedClasses) {
      if (hasOwnProperty.call(collectedClasses, cls)) {
        var desc = collectedClasses[cls];
        if (desc instanceof Array)
          desc = desc[1];
        var classData = desc[""], supr, name = cls, fields = classData;
        if (typeof classData == "string") {
          var split = classData.split("/");
          if (split.length == 2) {
            name = split[0];
            fields = split[1];
          }
        }
        var s = fields.split(";");
        fields = s[1] == "" ? [] : s[1].split(",");
        supr = s[0];
        if (supr && supr.indexOf("+") > 0) {
          s = supr.split("+");
          supr = s[0];
          var mixin = collectedClasses[s[1]];
          if (mixin instanceof Array)
            mixin = mixin[1];
          for (var d in mixin) {
            if (hasOwnProperty.call(mixin, d) && !hasOwnProperty.call(desc, d))
              desc[d] = mixin[d];
          }
        }
        if (typeof dart_precompiled != "function") {
          combinedConstructorFunction += defineClass(name, cls, fields);
          constructorsList.push(cls);
        }
        if (supr)
          pendingClasses[cls] = supr;
      }
    }
    if (typeof dart_precompiled != "function") {
      combinedConstructorFunction += "return [\n  " + constructorsList.join(",\n  ") + "\n]";
      var constructors = new Function("$collectedClasses", combinedConstructorFunction)(collectedClasses);
      combinedConstructorFunction = null;
    }
    for (var i = 0; i < constructors.length; i++) {
      var constructor = constructors[i];
      var cls = constructor.name;
      var desc = collectedClasses[cls];
      var globalObject = isolateProperties;
      if (desc instanceof Array) {
        globalObject = desc[0] || isolateProperties;
        desc = desc[1];
      }
      allClasses[cls] = constructor;
      globalObject[cls] = constructor;
    }
    constructors = null;
    var finishedClasses = {};
    init.interceptorsByTag = Object.create(null);
    init.leafTags = {};
    function finishClass(cls) {
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      if (hasOwnProperty.call(finishedClasses, cls))
        return;
      finishedClasses[cls] = true;
      var superclass = pendingClasses[cls];
      if (!superclass || typeof superclass != "string")
        return;
      finishClass(superclass);
      var constructor = allClasses[cls];
      var superConstructor = allClasses[superclass];
      if (!superConstructor)
        superConstructor = existingIsolateProperties[superclass];
      var prototype = inheritFrom(constructor, superConstructor);
      if (hasOwnProperty.call(prototype, "%")) {
        var nativeSpec = prototype["%"].split(";");
        if (nativeSpec[0]) {
          var tags = nativeSpec[0].split("|");
          for (var i = 0; i < tags.length; i++) {
            init.interceptorsByTag[tags[i]] = constructor;
            init.leafTags[tags[i]] = true;
          }
        }
        if (nativeSpec[1]) {
          tags = nativeSpec[1].split("|");
          if (nativeSpec[2]) {
            var subclasses = nativeSpec[2].split("|");
            for (var i = 0; i < subclasses.length; i++) {
              var subclass = allClasses[subclasses[i]];
              subclass.$nativeSuperclassTag = tags[0];
            }
          }
          for (i = 0; i < tags.length; i++) {
            init.interceptorsByTag[tags[i]] = constructor;
            init.leafTags[tags[i]] = false;
          }
        }
      }
    }
    for (var cls in pendingClasses)
      finishClass(cls);
  };
  Isolate.$lazy = function(prototype, staticName, fieldName, getterName, lazyValue) {
    var sentinelUndefined = {};
    var sentinelInProgress = {};
    prototype[fieldName] = sentinelUndefined;
    prototype[getterName] = function() {
      var result = $[fieldName];
      try {
        if (result === sentinelUndefined) {
          $[fieldName] = sentinelInProgress;
          try {
            result = $[fieldName] = lazyValue();
          } finally {
            if (result === sentinelUndefined) {
              if ($[fieldName] === sentinelInProgress) {
                $[fieldName] = null;
              }
            }
          }
        } else {
          if (result === sentinelInProgress)
            H.throwCyclicInit(staticName);
        }
        return result;
      } finally {
        $[getterName] = function() {
          return this[fieldName];
        };
      }
    };
  };
  Isolate.$finishIsolateConstructor = function(oldIsolate) {
    var isolateProperties = oldIsolate.$isolateProperties;
    function Isolate() {
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      for (var staticName in isolateProperties)
        if (hasOwnProperty.call(isolateProperties, staticName))
          this[staticName] = isolateProperties[staticName];
      function ForceEfficientMap() {
      }
      ForceEfficientMap.prototype = this;
      new ForceEfficientMap();
    }
    Isolate.prototype = oldIsolate.prototype;
    Isolate.prototype.constructor = Isolate;
    Isolate.$isolateProperties = isolateProperties;
    Isolate.$finishClasses = oldIsolate.$finishClasses;
    Isolate.makeConstantList = oldIsolate.makeConstantList;
    return Isolate;
  };
}
})()
function dart_precompiled($collectedClasses) {
  var $desc;
  function HtmlElement() {
  }
  HtmlElement.builtin$cls = "HtmlElement";
  if (!"name" in HtmlElement)
    HtmlElement.name = "HtmlElement";
  $desc = $collectedClasses.HtmlElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HtmlElement.prototype = $desc;
  function _EntryArray() {
  }
  _EntryArray.builtin$cls = "_EntryArray";
  if (!"name" in _EntryArray)
    _EntryArray.name = "_EntryArray";
  $desc = $collectedClasses._EntryArray;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _EntryArray.prototype = $desc;
  function AbstractWorker() {
  }
  AbstractWorker.builtin$cls = "AbstractWorker";
  if (!"name" in AbstractWorker)
    AbstractWorker.name = "AbstractWorker";
  $desc = $collectedClasses.AbstractWorker;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AbstractWorker.prototype = $desc;
  function AesCbcParams() {
  }
  AesCbcParams.builtin$cls = "AesCbcParams";
  if (!"name" in AesCbcParams)
    AesCbcParams.name = "AesCbcParams";
  $desc = $collectedClasses.AesCbcParams;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AesCbcParams.prototype = $desc;
  function AesKeyGenParams() {
  }
  AesKeyGenParams.builtin$cls = "AesKeyGenParams";
  if (!"name" in AesKeyGenParams)
    AesKeyGenParams.name = "AesKeyGenParams";
  $desc = $collectedClasses.AesKeyGenParams;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AesKeyGenParams.prototype = $desc;
  AesKeyGenParams.prototype.get$length = function(receiver) {
    return receiver.length;
  };
  function Algorithm() {
  }
  Algorithm.builtin$cls = "Algorithm";
  if (!"name" in Algorithm)
    Algorithm.name = "Algorithm";
  $desc = $collectedClasses.Algorithm;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Algorithm.prototype = $desc;
  Algorithm.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  function AnchorElement() {
  }
  AnchorElement.builtin$cls = "AnchorElement";
  if (!"name" in AnchorElement)
    AnchorElement.name = "AnchorElement";
  $desc = $collectedClasses.AnchorElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnchorElement.prototype = $desc;
  AnchorElement.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  function AnimationEvent() {
  }
  AnimationEvent.builtin$cls = "AnimationEvent";
  if (!"name" in AnimationEvent)
    AnimationEvent.name = "AnimationEvent";
  $desc = $collectedClasses.AnimationEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimationEvent.prototype = $desc;
  function ApplicationCache() {
  }
  ApplicationCache.builtin$cls = "ApplicationCache";
  if (!"name" in ApplicationCache)
    ApplicationCache.name = "ApplicationCache";
  $desc = $collectedClasses.ApplicationCache;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ApplicationCache.prototype = $desc;
  function AreaElement() {
  }
  AreaElement.builtin$cls = "AreaElement";
  if (!"name" in AreaElement)
    AreaElement.name = "AreaElement";
  $desc = $collectedClasses.AreaElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AreaElement.prototype = $desc;
  function AudioElement() {
  }
  AudioElement.builtin$cls = "AudioElement";
  if (!"name" in AudioElement)
    AudioElement.name = "AudioElement";
  $desc = $collectedClasses.AudioElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AudioElement.prototype = $desc;
  function AutocompleteErrorEvent() {
  }
  AutocompleteErrorEvent.builtin$cls = "AutocompleteErrorEvent";
  if (!"name" in AutocompleteErrorEvent)
    AutocompleteErrorEvent.name = "AutocompleteErrorEvent";
  $desc = $collectedClasses.AutocompleteErrorEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AutocompleteErrorEvent.prototype = $desc;
  function BRElement() {
  }
  BRElement.builtin$cls = "BRElement";
  if (!"name" in BRElement)
    BRElement.name = "BRElement";
  $desc = $collectedClasses.BRElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BRElement.prototype = $desc;
  function BarProp() {
  }
  BarProp.builtin$cls = "BarProp";
  if (!"name" in BarProp)
    BarProp.name = "BarProp";
  $desc = $collectedClasses.BarProp;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BarProp.prototype = $desc;
  function BaseElement() {
  }
  BaseElement.builtin$cls = "BaseElement";
  if (!"name" in BaseElement)
    BaseElement.name = "BaseElement";
  $desc = $collectedClasses.BaseElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BaseElement.prototype = $desc;
  function BeforeLoadEvent() {
  }
  BeforeLoadEvent.builtin$cls = "BeforeLoadEvent";
  if (!"name" in BeforeLoadEvent)
    BeforeLoadEvent.name = "BeforeLoadEvent";
  $desc = $collectedClasses.BeforeLoadEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BeforeLoadEvent.prototype = $desc;
  function BeforeUnloadEvent() {
  }
  BeforeUnloadEvent.builtin$cls = "BeforeUnloadEvent";
  if (!"name" in BeforeUnloadEvent)
    BeforeUnloadEvent.name = "BeforeUnloadEvent";
  $desc = $collectedClasses.BeforeUnloadEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BeforeUnloadEvent.prototype = $desc;
  function Blob() {
  }
  Blob.builtin$cls = "Blob";
  if (!"name" in Blob)
    Blob.name = "Blob";
  $desc = $collectedClasses.Blob;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Blob.prototype = $desc;
  Blob.prototype.get$size = function(receiver) {
    return receiver.size;
  };
  Blob.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  function BodyElement() {
  }
  BodyElement.builtin$cls = "BodyElement";
  if (!"name" in BodyElement)
    BodyElement.name = "BodyElement";
  $desc = $collectedClasses.BodyElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BodyElement.prototype = $desc;
  function ButtonElement() {
  }
  ButtonElement.builtin$cls = "ButtonElement";
  if (!"name" in ButtonElement)
    ButtonElement.name = "ButtonElement";
  $desc = $collectedClasses.ButtonElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ButtonElement.prototype = $desc;
  ButtonElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  ButtonElement.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  ButtonElement.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  function CDataSection() {
  }
  CDataSection.builtin$cls = "CDataSection";
  if (!"name" in CDataSection)
    CDataSection.name = "CDataSection";
  $desc = $collectedClasses.CDataSection;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CDataSection.prototype = $desc;
  function Canvas2DContextAttributes() {
  }
  Canvas2DContextAttributes.builtin$cls = "Canvas2DContextAttributes";
  if (!"name" in Canvas2DContextAttributes)
    Canvas2DContextAttributes.name = "Canvas2DContextAttributes";
  $desc = $collectedClasses.Canvas2DContextAttributes;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Canvas2DContextAttributes.prototype = $desc;
  function CanvasElement() {
  }
  CanvasElement.builtin$cls = "CanvasElement";
  if (!"name" in CanvasElement)
    CanvasElement.name = "CanvasElement";
  $desc = $collectedClasses.CanvasElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CanvasElement.prototype = $desc;
  CanvasElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  CanvasElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  function CanvasGradient() {
  }
  CanvasGradient.builtin$cls = "CanvasGradient";
  if (!"name" in CanvasGradient)
    CanvasGradient.name = "CanvasGradient";
  $desc = $collectedClasses.CanvasGradient;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CanvasGradient.prototype = $desc;
  function CanvasPattern() {
  }
  CanvasPattern.builtin$cls = "CanvasPattern";
  if (!"name" in CanvasPattern)
    CanvasPattern.name = "CanvasPattern";
  $desc = $collectedClasses.CanvasPattern;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CanvasPattern.prototype = $desc;
  function CanvasRenderingContext() {
  }
  CanvasRenderingContext.builtin$cls = "CanvasRenderingContext";
  if (!"name" in CanvasRenderingContext)
    CanvasRenderingContext.name = "CanvasRenderingContext";
  $desc = $collectedClasses.CanvasRenderingContext;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CanvasRenderingContext.prototype = $desc;
  function CanvasRenderingContext2D() {
  }
  CanvasRenderingContext2D.builtin$cls = "CanvasRenderingContext2D";
  if (!"name" in CanvasRenderingContext2D)
    CanvasRenderingContext2D.name = "CanvasRenderingContext2D";
  $desc = $collectedClasses.CanvasRenderingContext2D;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CanvasRenderingContext2D.prototype = $desc;
  function CharacterData() {
  }
  CharacterData.builtin$cls = "CharacterData";
  if (!"name" in CharacterData)
    CharacterData.name = "CharacterData";
  $desc = $collectedClasses.CharacterData;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CharacterData.prototype = $desc;
  CharacterData.prototype.get$length = function(receiver) {
    return receiver.length;
  };
  function CloseEvent() {
  }
  CloseEvent.builtin$cls = "CloseEvent";
  if (!"name" in CloseEvent)
    CloseEvent.name = "CloseEvent";
  $desc = $collectedClasses.CloseEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CloseEvent.prototype = $desc;
  function Comment() {
  }
  Comment.builtin$cls = "Comment";
  if (!"name" in Comment)
    Comment.name = "Comment";
  $desc = $collectedClasses.Comment;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Comment.prototype = $desc;
  function Composition() {
  }
  Composition.builtin$cls = "Composition";
  if (!"name" in Composition)
    Composition.name = "Composition";
  $desc = $collectedClasses.Composition;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Composition.prototype = $desc;
  function CompositionEvent() {
  }
  CompositionEvent.builtin$cls = "CompositionEvent";
  if (!"name" in CompositionEvent)
    CompositionEvent.name = "CompositionEvent";
  $desc = $collectedClasses.CompositionEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CompositionEvent.prototype = $desc;
  function ConsoleBase() {
  }
  ConsoleBase.builtin$cls = "ConsoleBase";
  if (!"name" in ConsoleBase)
    ConsoleBase.name = "ConsoleBase";
  $desc = $collectedClasses.ConsoleBase;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ConsoleBase.prototype = $desc;
  function ContentElement() {
  }
  ContentElement.builtin$cls = "ContentElement";
  if (!"name" in ContentElement)
    ContentElement.name = "ContentElement";
  $desc = $collectedClasses.ContentElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ContentElement.prototype = $desc;
  function Coordinates() {
  }
  Coordinates.builtin$cls = "Coordinates";
  if (!"name" in Coordinates)
    Coordinates.name = "Coordinates";
  $desc = $collectedClasses.Coordinates;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Coordinates.prototype = $desc;
  function Crypto() {
  }
  Crypto.builtin$cls = "Crypto";
  if (!"name" in Crypto)
    Crypto.name = "Crypto";
  $desc = $collectedClasses.Crypto;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Crypto.prototype = $desc;
  function CryptoKey() {
  }
  CryptoKey.builtin$cls = "CryptoKey";
  if (!"name" in CryptoKey)
    CryptoKey.name = "CryptoKey";
  $desc = $collectedClasses.CryptoKey;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CryptoKey.prototype = $desc;
  CryptoKey.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  function Css() {
  }
  Css.builtin$cls = "Css";
  if (!"name" in Css)
    Css.name = "Css";
  $desc = $collectedClasses.Css;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Css.prototype = $desc;
  function CssCharsetRule() {
  }
  CssCharsetRule.builtin$cls = "CssCharsetRule";
  if (!"name" in CssCharsetRule)
    CssCharsetRule.name = "CssCharsetRule";
  $desc = $collectedClasses.CssCharsetRule;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CssCharsetRule.prototype = $desc;
  function CssFilterRule() {
  }
  CssFilterRule.builtin$cls = "CssFilterRule";
  if (!"name" in CssFilterRule)
    CssFilterRule.name = "CssFilterRule";
  $desc = $collectedClasses.CssFilterRule;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CssFilterRule.prototype = $desc;
  function CssFontFaceLoadEvent() {
  }
  CssFontFaceLoadEvent.builtin$cls = "CssFontFaceLoadEvent";
  if (!"name" in CssFontFaceLoadEvent)
    CssFontFaceLoadEvent.name = "CssFontFaceLoadEvent";
  $desc = $collectedClasses.CssFontFaceLoadEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CssFontFaceLoadEvent.prototype = $desc;
  function CssFontFaceRule() {
  }
  CssFontFaceRule.builtin$cls = "CssFontFaceRule";
  if (!"name" in CssFontFaceRule)
    CssFontFaceRule.name = "CssFontFaceRule";
  $desc = $collectedClasses.CssFontFaceRule;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CssFontFaceRule.prototype = $desc;
  function CssHostRule() {
  }
  CssHostRule.builtin$cls = "CssHostRule";
  if (!"name" in CssHostRule)
    CssHostRule.name = "CssHostRule";
  $desc = $collectedClasses.CssHostRule;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CssHostRule.prototype = $desc;
  function CssImportRule() {
  }
  CssImportRule.builtin$cls = "CssImportRule";
  if (!"name" in CssImportRule)
    CssImportRule.name = "CssImportRule";
  $desc = $collectedClasses.CssImportRule;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CssImportRule.prototype = $desc;
  function CssKeyframeRule() {
  }
  CssKeyframeRule.builtin$cls = "CssKeyframeRule";
  if (!"name" in CssKeyframeRule)
    CssKeyframeRule.name = "CssKeyframeRule";
  $desc = $collectedClasses.CssKeyframeRule;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CssKeyframeRule.prototype = $desc;
  function CssKeyframesRule() {
  }
  CssKeyframesRule.builtin$cls = "CssKeyframesRule";
  if (!"name" in CssKeyframesRule)
    CssKeyframesRule.name = "CssKeyframesRule";
  $desc = $collectedClasses.CssKeyframesRule;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CssKeyframesRule.prototype = $desc;
  CssKeyframesRule.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  function CssMediaRule() {
  }
  CssMediaRule.builtin$cls = "CssMediaRule";
  if (!"name" in CssMediaRule)
    CssMediaRule.name = "CssMediaRule";
  $desc = $collectedClasses.CssMediaRule;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CssMediaRule.prototype = $desc;
  function CssPageRule() {
  }
  CssPageRule.builtin$cls = "CssPageRule";
  if (!"name" in CssPageRule)
    CssPageRule.name = "CssPageRule";
  $desc = $collectedClasses.CssPageRule;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CssPageRule.prototype = $desc;
  function CssRegionRule() {
  }
  CssRegionRule.builtin$cls = "CssRegionRule";
  if (!"name" in CssRegionRule)
    CssRegionRule.name = "CssRegionRule";
  $desc = $collectedClasses.CssRegionRule;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CssRegionRule.prototype = $desc;
  function CssRule() {
  }
  CssRule.builtin$cls = "CssRule";
  if (!"name" in CssRule)
    CssRule.name = "CssRule";
  $desc = $collectedClasses.CssRule;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CssRule.prototype = $desc;
  CssRule.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  function CssStyleDeclaration() {
  }
  CssStyleDeclaration.builtin$cls = "CssStyleDeclaration";
  if (!"name" in CssStyleDeclaration)
    CssStyleDeclaration.name = "CssStyleDeclaration";
  $desc = $collectedClasses.CssStyleDeclaration;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CssStyleDeclaration.prototype = $desc;
  CssStyleDeclaration.prototype.get$length = function(receiver) {
    return receiver.length;
  };
  function CssStyleRule() {
  }
  CssStyleRule.builtin$cls = "CssStyleRule";
  if (!"name" in CssStyleRule)
    CssStyleRule.name = "CssStyleRule";
  $desc = $collectedClasses.CssStyleRule;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CssStyleRule.prototype = $desc;
  function CssStyleSheet() {
  }
  CssStyleSheet.builtin$cls = "CssStyleSheet";
  if (!"name" in CssStyleSheet)
    CssStyleSheet.name = "CssStyleSheet";
  $desc = $collectedClasses.CssStyleSheet;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CssStyleSheet.prototype = $desc;
  function CssSupportsRule() {
  }
  CssSupportsRule.builtin$cls = "CssSupportsRule";
  if (!"name" in CssSupportsRule)
    CssSupportsRule.name = "CssSupportsRule";
  $desc = $collectedClasses.CssSupportsRule;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CssSupportsRule.prototype = $desc;
  function CssVariablesMap() {
  }
  CssVariablesMap.builtin$cls = "CssVariablesMap";
  if (!"name" in CssVariablesMap)
    CssVariablesMap.name = "CssVariablesMap";
  $desc = $collectedClasses.CssVariablesMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CssVariablesMap.prototype = $desc;
  CssVariablesMap.prototype.get$size = function(receiver) {
    return receiver.size;
  };
  function CssViewportRule() {
  }
  CssViewportRule.builtin$cls = "CssViewportRule";
  if (!"name" in CssViewportRule)
    CssViewportRule.name = "CssViewportRule";
  $desc = $collectedClasses.CssViewportRule;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CssViewportRule.prototype = $desc;
  function CustomEvent() {
  }
  CustomEvent.builtin$cls = "CustomEvent";
  if (!"name" in CustomEvent)
    CustomEvent.name = "CustomEvent";
  $desc = $collectedClasses.CustomEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CustomEvent.prototype = $desc;
  function DListElement() {
  }
  DListElement.builtin$cls = "DListElement";
  if (!"name" in DListElement)
    DListElement.name = "DListElement";
  $desc = $collectedClasses.DListElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DListElement.prototype = $desc;
  function DataListElement() {
  }
  DataListElement.builtin$cls = "DataListElement";
  if (!"name" in DataListElement)
    DataListElement.name = "DataListElement";
  $desc = $collectedClasses.DataListElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DataListElement.prototype = $desc;
  function DataTransfer() {
  }
  DataTransfer.builtin$cls = "DataTransfer";
  if (!"name" in DataTransfer)
    DataTransfer.name = "DataTransfer";
  $desc = $collectedClasses.DataTransfer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DataTransfer.prototype = $desc;
  function DataTransferItem() {
  }
  DataTransferItem.builtin$cls = "DataTransferItem";
  if (!"name" in DataTransferItem)
    DataTransferItem.name = "DataTransferItem";
  $desc = $collectedClasses.DataTransferItem;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DataTransferItem.prototype = $desc;
  DataTransferItem.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  function DataTransferItemList() {
  }
  DataTransferItemList.builtin$cls = "DataTransferItemList";
  if (!"name" in DataTransferItemList)
    DataTransferItemList.name = "DataTransferItemList";
  $desc = $collectedClasses.DataTransferItemList;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DataTransferItemList.prototype = $desc;
  DataTransferItemList.prototype.get$length = function(receiver) {
    return receiver.length;
  };
  function DedicatedWorkerGlobalScope() {
  }
  DedicatedWorkerGlobalScope.builtin$cls = "DedicatedWorkerGlobalScope";
  if (!"name" in DedicatedWorkerGlobalScope)
    DedicatedWorkerGlobalScope.name = "DedicatedWorkerGlobalScope";
  $desc = $collectedClasses.DedicatedWorkerGlobalScope;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DedicatedWorkerGlobalScope.prototype = $desc;
  function DetailsElement() {
  }
  DetailsElement.builtin$cls = "DetailsElement";
  if (!"name" in DetailsElement)
    DetailsElement.name = "DetailsElement";
  $desc = $collectedClasses.DetailsElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DetailsElement.prototype = $desc;
  function DeviceAcceleration() {
  }
  DeviceAcceleration.builtin$cls = "DeviceAcceleration";
  if (!"name" in DeviceAcceleration)
    DeviceAcceleration.name = "DeviceAcceleration";
  $desc = $collectedClasses.DeviceAcceleration;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DeviceAcceleration.prototype = $desc;
  DeviceAcceleration.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  DeviceAcceleration.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function DeviceMotionEvent() {
  }
  DeviceMotionEvent.builtin$cls = "DeviceMotionEvent";
  if (!"name" in DeviceMotionEvent)
    DeviceMotionEvent.name = "DeviceMotionEvent";
  $desc = $collectedClasses.DeviceMotionEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DeviceMotionEvent.prototype = $desc;
  function DeviceOrientationEvent() {
  }
  DeviceOrientationEvent.builtin$cls = "DeviceOrientationEvent";
  if (!"name" in DeviceOrientationEvent)
    DeviceOrientationEvent.name = "DeviceOrientationEvent";
  $desc = $collectedClasses.DeviceOrientationEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DeviceOrientationEvent.prototype = $desc;
  function DeviceRotationRate() {
  }
  DeviceRotationRate.builtin$cls = "DeviceRotationRate";
  if (!"name" in DeviceRotationRate)
    DeviceRotationRate.name = "DeviceRotationRate";
  $desc = $collectedClasses.DeviceRotationRate;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DeviceRotationRate.prototype = $desc;
  function DialogElement() {
  }
  DialogElement.builtin$cls = "DialogElement";
  if (!"name" in DialogElement)
    DialogElement.name = "DialogElement";
  $desc = $collectedClasses.DialogElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DialogElement.prototype = $desc;
  function DirectoryEntry() {
  }
  DirectoryEntry.builtin$cls = "DirectoryEntry";
  if (!"name" in DirectoryEntry)
    DirectoryEntry.name = "DirectoryEntry";
  $desc = $collectedClasses.DirectoryEntry;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DirectoryEntry.prototype = $desc;
  function DirectoryReader() {
  }
  DirectoryReader.builtin$cls = "DirectoryReader";
  if (!"name" in DirectoryReader)
    DirectoryReader.name = "DirectoryReader";
  $desc = $collectedClasses.DirectoryReader;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DirectoryReader.prototype = $desc;
  function DivElement() {
  }
  DivElement.builtin$cls = "DivElement";
  if (!"name" in DivElement)
    DivElement.name = "DivElement";
  $desc = $collectedClasses.DivElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DivElement.prototype = $desc;
  function Document() {
  }
  Document.builtin$cls = "Document";
  if (!"name" in Document)
    Document.name = "Document";
  $desc = $collectedClasses.Document;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Document.prototype = $desc;
  function DocumentFragment() {
  }
  DocumentFragment.builtin$cls = "DocumentFragment";
  if (!"name" in DocumentFragment)
    DocumentFragment.name = "DocumentFragment";
  $desc = $collectedClasses.DocumentFragment;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DocumentFragment.prototype = $desc;
  function DocumentType() {
  }
  DocumentType.builtin$cls = "DocumentType";
  if (!"name" in DocumentType)
    DocumentType.name = "DocumentType";
  $desc = $collectedClasses.DocumentType;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DocumentType.prototype = $desc;
  function DomError() {
  }
  DomError.builtin$cls = "DomError";
  if (!"name" in DomError)
    DomError.name = "DomError";
  $desc = $collectedClasses.DomError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DomError.prototype = $desc;
  DomError.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  function DomException() {
  }
  DomException.builtin$cls = "DomException";
  if (!"name" in DomException)
    DomException.name = "DomException";
  $desc = $collectedClasses.DomException;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DomException.prototype = $desc;
  function DomImplementation() {
  }
  DomImplementation.builtin$cls = "DomImplementation";
  if (!"name" in DomImplementation)
    DomImplementation.name = "DomImplementation";
  $desc = $collectedClasses.DomImplementation;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DomImplementation.prototype = $desc;
  function DomParser() {
  }
  DomParser.builtin$cls = "DomParser";
  if (!"name" in DomParser)
    DomParser.name = "DomParser";
  $desc = $collectedClasses.DomParser;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DomParser.prototype = $desc;
  function DomSettableTokenList() {
  }
  DomSettableTokenList.builtin$cls = "DomSettableTokenList";
  if (!"name" in DomSettableTokenList)
    DomSettableTokenList.name = "DomSettableTokenList";
  $desc = $collectedClasses.DomSettableTokenList;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DomSettableTokenList.prototype = $desc;
  DomSettableTokenList.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  function DomStringList() {
  }
  DomStringList.builtin$cls = "DomStringList";
  if (!"name" in DomStringList)
    DomStringList.name = "DomStringList";
  $desc = $collectedClasses.DomStringList;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DomStringList.prototype = $desc;
  function DomTokenList() {
  }
  DomTokenList.builtin$cls = "DomTokenList";
  if (!"name" in DomTokenList)
    DomTokenList.name = "DomTokenList";
  $desc = $collectedClasses.DomTokenList;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DomTokenList.prototype = $desc;
  DomTokenList.prototype.get$length = function(receiver) {
    return receiver.length;
  };
  function Element() {
  }
  Element.builtin$cls = "Element";
  if (!"name" in Element)
    Element.name = "Element";
  $desc = $collectedClasses.Element;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Element.prototype = $desc;
  function EmbedElement() {
  }
  EmbedElement.builtin$cls = "EmbedElement";
  if (!"name" in EmbedElement)
    EmbedElement.name = "EmbedElement";
  $desc = $collectedClasses.EmbedElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  EmbedElement.prototype = $desc;
  EmbedElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  EmbedElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  EmbedElement.prototype.set$src = function(receiver, v) {
    return receiver.src = v;
  };
  EmbedElement.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  EmbedElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  function Entry() {
  }
  Entry.builtin$cls = "Entry";
  if (!"name" in Entry)
    Entry.name = "Entry";
  $desc = $collectedClasses.Entry;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Entry.prototype = $desc;
  Entry.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  function ErrorEvent() {
  }
  ErrorEvent.builtin$cls = "ErrorEvent";
  if (!"name" in ErrorEvent)
    ErrorEvent.name = "ErrorEvent";
  $desc = $collectedClasses.ErrorEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ErrorEvent.prototype = $desc;
  ErrorEvent.prototype.get$error = function(receiver) {
    return receiver.error;
  };
  function Event() {
  }
  Event.builtin$cls = "Event";
  if (!"name" in Event)
    Event.name = "Event";
  $desc = $collectedClasses.Event;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Event.prototype = $desc;
  Event.prototype.get$timeStamp = function(receiver) {
    return receiver.timeStamp;
  };
  Event.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  function EventSource() {
  }
  EventSource.builtin$cls = "EventSource";
  if (!"name" in EventSource)
    EventSource.name = "EventSource";
  $desc = $collectedClasses.EventSource;
  if ($desc instanceof Array)
    $desc = $desc[1];
  EventSource.prototype = $desc;
  function EventTarget() {
  }
  EventTarget.builtin$cls = "EventTarget";
  if (!"name" in EventTarget)
    EventTarget.name = "EventTarget";
  $desc = $collectedClasses.EventTarget;
  if ($desc instanceof Array)
    $desc = $desc[1];
  EventTarget.prototype = $desc;
  function FieldSetElement() {
  }
  FieldSetElement.builtin$cls = "FieldSetElement";
  if (!"name" in FieldSetElement)
    FieldSetElement.name = "FieldSetElement";
  $desc = $collectedClasses.FieldSetElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FieldSetElement.prototype = $desc;
  FieldSetElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  FieldSetElement.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  function File() {
  }
  File.builtin$cls = "File";
  if (!"name" in File)
    File.name = "File";
  $desc = $collectedClasses.File;
  if ($desc instanceof Array)
    $desc = $desc[1];
  File.prototype = $desc;
  File.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  function FileEntry() {
  }
  FileEntry.builtin$cls = "FileEntry";
  if (!"name" in FileEntry)
    FileEntry.name = "FileEntry";
  $desc = $collectedClasses.FileEntry;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FileEntry.prototype = $desc;
  function FileError() {
  }
  FileError.builtin$cls = "FileError";
  if (!"name" in FileError)
    FileError.name = "FileError";
  $desc = $collectedClasses.FileError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FileError.prototype = $desc;
  function FileList() {
  }
  FileList.builtin$cls = "FileList";
  if (!"name" in FileList)
    FileList.name = "FileList";
  $desc = $collectedClasses.FileList;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FileList.prototype = $desc;
  function FileReader() {
  }
  FileReader.builtin$cls = "FileReader";
  if (!"name" in FileReader)
    FileReader.name = "FileReader";
  $desc = $collectedClasses.FileReader;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FileReader.prototype = $desc;
  FileReader.prototype.get$error = function(receiver) {
    return receiver.error;
  };
  function FileStream() {
  }
  FileStream.builtin$cls = "FileStream";
  if (!"name" in FileStream)
    FileStream.name = "FileStream";
  $desc = $collectedClasses.FileStream;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FileStream.prototype = $desc;
  FileStream.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  function FileSystem() {
  }
  FileSystem.builtin$cls = "FileSystem";
  if (!"name" in FileSystem)
    FileSystem.name = "FileSystem";
  $desc = $collectedClasses.FileSystem;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FileSystem.prototype = $desc;
  FileSystem.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  function FileWriter() {
  }
  FileWriter.builtin$cls = "FileWriter";
  if (!"name" in FileWriter)
    FileWriter.name = "FileWriter";
  $desc = $collectedClasses.FileWriter;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FileWriter.prototype = $desc;
  FileWriter.prototype.get$error = function(receiver) {
    return receiver.error;
  };
  FileWriter.prototype.get$length = function(receiver) {
    return receiver.length;
  };
  function FocusEvent() {
  }
  FocusEvent.builtin$cls = "FocusEvent";
  if (!"name" in FocusEvent)
    FocusEvent.name = "FocusEvent";
  $desc = $collectedClasses.FocusEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FocusEvent.prototype = $desc;
  function FontFace() {
  }
  FontFace.builtin$cls = "FontFace";
  if (!"name" in FontFace)
    FontFace.name = "FontFace";
  $desc = $collectedClasses.FontFace;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FontFace.prototype = $desc;
  function FontFaceSet() {
  }
  FontFaceSet.builtin$cls = "FontFaceSet";
  if (!"name" in FontFaceSet)
    FontFaceSet.name = "FontFaceSet";
  $desc = $collectedClasses.FontFaceSet;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FontFaceSet.prototype = $desc;
  function FormData() {
  }
  FormData.builtin$cls = "FormData";
  if (!"name" in FormData)
    FormData.name = "FormData";
  $desc = $collectedClasses.FormData;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FormData.prototype = $desc;
  function FormElement() {
  }
  FormElement.builtin$cls = "FormElement";
  if (!"name" in FormElement)
    FormElement.name = "FormElement";
  $desc = $collectedClasses.FormElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FormElement.prototype = $desc;
  FormElement.prototype.get$length = function(receiver) {
    return receiver.length;
  };
  FormElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  function Gamepad() {
  }
  Gamepad.builtin$cls = "Gamepad";
  if (!"name" in Gamepad)
    Gamepad.name = "Gamepad";
  $desc = $collectedClasses.Gamepad;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Gamepad.prototype = $desc;
  Gamepad.prototype.get$index = function(receiver) {
    return receiver.index;
  };
  function Geolocation() {
  }
  Geolocation.builtin$cls = "Geolocation";
  if (!"name" in Geolocation)
    Geolocation.name = "Geolocation";
  $desc = $collectedClasses.Geolocation;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Geolocation.prototype = $desc;
  function Geoposition() {
  }
  Geoposition.builtin$cls = "Geoposition";
  if (!"name" in Geoposition)
    Geoposition.name = "Geoposition";
  $desc = $collectedClasses.Geoposition;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Geoposition.prototype = $desc;
  function HRElement() {
  }
  HRElement.builtin$cls = "HRElement";
  if (!"name" in HRElement)
    HRElement.name = "HRElement";
  $desc = $collectedClasses.HRElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HRElement.prototype = $desc;
  function HashChangeEvent() {
  }
  HashChangeEvent.builtin$cls = "HashChangeEvent";
  if (!"name" in HashChangeEvent)
    HashChangeEvent.name = "HashChangeEvent";
  $desc = $collectedClasses.HashChangeEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HashChangeEvent.prototype = $desc;
  function HeadElement() {
  }
  HeadElement.builtin$cls = "HeadElement";
  if (!"name" in HeadElement)
    HeadElement.name = "HeadElement";
  $desc = $collectedClasses.HeadElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HeadElement.prototype = $desc;
  function HeadingElement() {
  }
  HeadingElement.builtin$cls = "HeadingElement";
  if (!"name" in HeadingElement)
    HeadingElement.name = "HeadingElement";
  $desc = $collectedClasses.HeadingElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HeadingElement.prototype = $desc;
  function History() {
  }
  History.builtin$cls = "History";
  if (!"name" in History)
    History.name = "History";
  $desc = $collectedClasses.History;
  if ($desc instanceof Array)
    $desc = $desc[1];
  History.prototype = $desc;
  History.prototype.get$length = function(receiver) {
    return receiver.length;
  };
  function HmacKeyParams() {
  }
  HmacKeyParams.builtin$cls = "HmacKeyParams";
  if (!"name" in HmacKeyParams)
    HmacKeyParams.name = "HmacKeyParams";
  $desc = $collectedClasses.HmacKeyParams;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HmacKeyParams.prototype = $desc;
  HmacKeyParams.prototype.get$length = function(receiver) {
    return receiver.length;
  };
  function HmacParams() {
  }
  HmacParams.builtin$cls = "HmacParams";
  if (!"name" in HmacParams)
    HmacParams.name = "HmacParams";
  $desc = $collectedClasses.HmacParams;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HmacParams.prototype = $desc;
  function HtmlCollection() {
  }
  HtmlCollection.builtin$cls = "HtmlCollection";
  if (!"name" in HtmlCollection)
    HtmlCollection.name = "HtmlCollection";
  $desc = $collectedClasses.HtmlCollection;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HtmlCollection.prototype = $desc;
  function HtmlDocument() {
  }
  HtmlDocument.builtin$cls = "HtmlDocument";
  if (!"name" in HtmlDocument)
    HtmlDocument.name = "HtmlDocument";
  $desc = $collectedClasses.HtmlDocument;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HtmlDocument.prototype = $desc;
  function HtmlFormControlsCollection() {
  }
  HtmlFormControlsCollection.builtin$cls = "HtmlFormControlsCollection";
  if (!"name" in HtmlFormControlsCollection)
    HtmlFormControlsCollection.name = "HtmlFormControlsCollection";
  $desc = $collectedClasses.HtmlFormControlsCollection;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HtmlFormControlsCollection.prototype = $desc;
  function HtmlHtmlElement() {
  }
  HtmlHtmlElement.builtin$cls = "HtmlHtmlElement";
  if (!"name" in HtmlHtmlElement)
    HtmlHtmlElement.name = "HtmlHtmlElement";
  $desc = $collectedClasses.HtmlHtmlElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HtmlHtmlElement.prototype = $desc;
  function HtmlOptionsCollection() {
  }
  HtmlOptionsCollection.builtin$cls = "HtmlOptionsCollection";
  if (!"name" in HtmlOptionsCollection)
    HtmlOptionsCollection.name = "HtmlOptionsCollection";
  $desc = $collectedClasses.HtmlOptionsCollection;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HtmlOptionsCollection.prototype = $desc;
  function HttpRequest() {
  }
  HttpRequest.builtin$cls = "HttpRequest";
  if (!"name" in HttpRequest)
    HttpRequest.name = "HttpRequest";
  $desc = $collectedClasses.HttpRequest;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HttpRequest.prototype = $desc;
  function HttpRequestEventTarget() {
  }
  HttpRequestEventTarget.builtin$cls = "HttpRequestEventTarget";
  if (!"name" in HttpRequestEventTarget)
    HttpRequestEventTarget.name = "HttpRequestEventTarget";
  $desc = $collectedClasses.HttpRequestEventTarget;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HttpRequestEventTarget.prototype = $desc;
  function HttpRequestUpload() {
  }
  HttpRequestUpload.builtin$cls = "HttpRequestUpload";
  if (!"name" in HttpRequestUpload)
    HttpRequestUpload.name = "HttpRequestUpload";
  $desc = $collectedClasses.HttpRequestUpload;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HttpRequestUpload.prototype = $desc;
  function IFrameElement() {
  }
  IFrameElement.builtin$cls = "IFrameElement";
  if (!"name" in IFrameElement)
    IFrameElement.name = "IFrameElement";
  $desc = $collectedClasses.IFrameElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  IFrameElement.prototype = $desc;
  IFrameElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  IFrameElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  IFrameElement.prototype.set$src = function(receiver, v) {
    return receiver.src = v;
  };
  IFrameElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  function ImageBitmap() {
  }
  ImageBitmap.builtin$cls = "ImageBitmap";
  if (!"name" in ImageBitmap)
    ImageBitmap.name = "ImageBitmap";
  $desc = $collectedClasses.ImageBitmap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ImageBitmap.prototype = $desc;
  function ImageData() {
  }
  ImageData.builtin$cls = "ImageData";
  if (!"name" in ImageData)
    ImageData.name = "ImageData";
  $desc = $collectedClasses.ImageData;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ImageData.prototype = $desc;
  function ImageElement() {
  }
  ImageElement.builtin$cls = "ImageElement";
  if (!"name" in ImageElement)
    ImageElement.name = "ImageElement";
  $desc = $collectedClasses.ImageElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ImageElement.prototype = $desc;
  ImageElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  ImageElement.prototype.set$src = function(receiver, v) {
    return receiver.src = v;
  };
  ImageElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  function InputElement() {
  }
  InputElement.builtin$cls = "InputElement";
  if (!"name" in InputElement)
    InputElement.name = "InputElement";
  $desc = $collectedClasses.InputElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  InputElement.prototype = $desc;
  InputElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  InputElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  InputElement.prototype.get$size = function(receiver) {
    return receiver.size;
  };
  InputElement.prototype.set$src = function(receiver, v) {
    return receiver.src = v;
  };
  InputElement.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  InputElement.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  InputElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  function InputMethodContext() {
  }
  InputMethodContext.builtin$cls = "InputMethodContext";
  if (!"name" in InputMethodContext)
    InputMethodContext.name = "InputMethodContext";
  $desc = $collectedClasses.InputMethodContext;
  if ($desc instanceof Array)
    $desc = $desc[1];
  InputMethodContext.prototype = $desc;
  function KeyPair() {
  }
  KeyPair.builtin$cls = "KeyPair";
  if (!"name" in KeyPair)
    KeyPair.name = "KeyPair";
  $desc = $collectedClasses.KeyPair;
  if ($desc instanceof Array)
    $desc = $desc[1];
  KeyPair.prototype = $desc;
  function KeyboardEvent() {
  }
  KeyboardEvent.builtin$cls = "KeyboardEvent";
  if (!"name" in KeyboardEvent)
    KeyboardEvent.name = "KeyboardEvent";
  $desc = $collectedClasses.KeyboardEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  KeyboardEvent.prototype = $desc;
  KeyboardEvent.prototype.get$location = function(receiver) {
    return receiver.location;
  };
  function KeygenElement() {
  }
  KeygenElement.builtin$cls = "KeygenElement";
  if (!"name" in KeygenElement)
    KeygenElement.name = "KeygenElement";
  $desc = $collectedClasses.KeygenElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  KeygenElement.prototype = $desc;
  KeygenElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  KeygenElement.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  function LIElement() {
  }
  LIElement.builtin$cls = "LIElement";
  if (!"name" in LIElement)
    LIElement.name = "LIElement";
  $desc = $collectedClasses.LIElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LIElement.prototype = $desc;
  LIElement.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  function LabelElement() {
  }
  LabelElement.builtin$cls = "LabelElement";
  if (!"name" in LabelElement)
    LabelElement.name = "LabelElement";
  $desc = $collectedClasses.LabelElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LabelElement.prototype = $desc;
  function LegendElement() {
  }
  LegendElement.builtin$cls = "LegendElement";
  if (!"name" in LegendElement)
    LegendElement.name = "LegendElement";
  $desc = $collectedClasses.LegendElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LegendElement.prototype = $desc;
  function LinkElement() {
  }
  LinkElement.builtin$cls = "LinkElement";
  if (!"name" in LinkElement)
    LinkElement.name = "LinkElement";
  $desc = $collectedClasses.LinkElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LinkElement.prototype = $desc;
  LinkElement.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  function Location() {
  }
  Location.builtin$cls = "Location";
  if (!"name" in Location)
    Location.name = "Location";
  $desc = $collectedClasses.Location;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Location.prototype = $desc;
  function MapElement() {
  }
  MapElement.builtin$cls = "MapElement";
  if (!"name" in MapElement)
    MapElement.name = "MapElement";
  $desc = $collectedClasses.MapElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MapElement.prototype = $desc;
  MapElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  function MediaController() {
  }
  MediaController.builtin$cls = "MediaController";
  if (!"name" in MediaController)
    MediaController.name = "MediaController";
  $desc = $collectedClasses.MediaController;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaController.prototype = $desc;
  function MediaElement() {
  }
  MediaElement.builtin$cls = "MediaElement";
  if (!"name" in MediaElement)
    MediaElement.name = "MediaElement";
  $desc = $collectedClasses.MediaElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaElement.prototype = $desc;
  MediaElement.prototype.get$error = function(receiver) {
    return receiver.error;
  };
  MediaElement.prototype.set$src = function(receiver, v) {
    return receiver.src = v;
  };
  function MediaError() {
  }
  MediaError.builtin$cls = "MediaError";
  if (!"name" in MediaError)
    MediaError.name = "MediaError";
  $desc = $collectedClasses.MediaError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaError.prototype = $desc;
  function MediaKeyError() {
  }
  MediaKeyError.builtin$cls = "MediaKeyError";
  if (!"name" in MediaKeyError)
    MediaKeyError.name = "MediaKeyError";
  $desc = $collectedClasses.MediaKeyError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaKeyError.prototype = $desc;
  function MediaKeyEvent() {
  }
  MediaKeyEvent.builtin$cls = "MediaKeyEvent";
  if (!"name" in MediaKeyEvent)
    MediaKeyEvent.name = "MediaKeyEvent";
  $desc = $collectedClasses.MediaKeyEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaKeyEvent.prototype = $desc;
  function MediaKeyMessageEvent() {
  }
  MediaKeyMessageEvent.builtin$cls = "MediaKeyMessageEvent";
  if (!"name" in MediaKeyMessageEvent)
    MediaKeyMessageEvent.name = "MediaKeyMessageEvent";
  $desc = $collectedClasses.MediaKeyMessageEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaKeyMessageEvent.prototype = $desc;
  function MediaKeyNeededEvent() {
  }
  MediaKeyNeededEvent.builtin$cls = "MediaKeyNeededEvent";
  if (!"name" in MediaKeyNeededEvent)
    MediaKeyNeededEvent.name = "MediaKeyNeededEvent";
  $desc = $collectedClasses.MediaKeyNeededEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaKeyNeededEvent.prototype = $desc;
  function MediaKeySession() {
  }
  MediaKeySession.builtin$cls = "MediaKeySession";
  if (!"name" in MediaKeySession)
    MediaKeySession.name = "MediaKeySession";
  $desc = $collectedClasses.MediaKeySession;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaKeySession.prototype = $desc;
  MediaKeySession.prototype.get$error = function(receiver) {
    return receiver.error;
  };
  function MediaKeys() {
  }
  MediaKeys.builtin$cls = "MediaKeys";
  if (!"name" in MediaKeys)
    MediaKeys.name = "MediaKeys";
  $desc = $collectedClasses.MediaKeys;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaKeys.prototype = $desc;
  function MediaList() {
  }
  MediaList.builtin$cls = "MediaList";
  if (!"name" in MediaList)
    MediaList.name = "MediaList";
  $desc = $collectedClasses.MediaList;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaList.prototype = $desc;
  MediaList.prototype.get$length = function(receiver) {
    return receiver.length;
  };
  function MediaQueryList() {
  }
  MediaQueryList.builtin$cls = "MediaQueryList";
  if (!"name" in MediaQueryList)
    MediaQueryList.name = "MediaQueryList";
  $desc = $collectedClasses.MediaQueryList;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaQueryList.prototype = $desc;
  function MediaSource() {
  }
  MediaSource.builtin$cls = "MediaSource";
  if (!"name" in MediaSource)
    MediaSource.name = "MediaSource";
  $desc = $collectedClasses.MediaSource;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaSource.prototype = $desc;
  function MediaStream() {
  }
  MediaStream.builtin$cls = "MediaStream";
  if (!"name" in MediaStream)
    MediaStream.name = "MediaStream";
  $desc = $collectedClasses.MediaStream;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaStream.prototype = $desc;
  function MediaStreamEvent() {
  }
  MediaStreamEvent.builtin$cls = "MediaStreamEvent";
  if (!"name" in MediaStreamEvent)
    MediaStreamEvent.name = "MediaStreamEvent";
  $desc = $collectedClasses.MediaStreamEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaStreamEvent.prototype = $desc;
  function MediaStreamTrack() {
  }
  MediaStreamTrack.builtin$cls = "MediaStreamTrack";
  if (!"name" in MediaStreamTrack)
    MediaStreamTrack.name = "MediaStreamTrack";
  $desc = $collectedClasses.MediaStreamTrack;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaStreamTrack.prototype = $desc;
  function MediaStreamTrackEvent() {
  }
  MediaStreamTrackEvent.builtin$cls = "MediaStreamTrackEvent";
  if (!"name" in MediaStreamTrackEvent)
    MediaStreamTrackEvent.name = "MediaStreamTrackEvent";
  $desc = $collectedClasses.MediaStreamTrackEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaStreamTrackEvent.prototype = $desc;
  function MemoryInfo() {
  }
  MemoryInfo.builtin$cls = "MemoryInfo";
  if (!"name" in MemoryInfo)
    MemoryInfo.name = "MemoryInfo";
  $desc = $collectedClasses.MemoryInfo;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MemoryInfo.prototype = $desc;
  function MenuElement() {
  }
  MenuElement.builtin$cls = "MenuElement";
  if (!"name" in MenuElement)
    MenuElement.name = "MenuElement";
  $desc = $collectedClasses.MenuElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MenuElement.prototype = $desc;
  function MessageChannel() {
  }
  MessageChannel.builtin$cls = "MessageChannel";
  if (!"name" in MessageChannel)
    MessageChannel.name = "MessageChannel";
  $desc = $collectedClasses.MessageChannel;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MessageChannel.prototype = $desc;
  function MessageEvent() {
  }
  MessageEvent.builtin$cls = "MessageEvent";
  if (!"name" in MessageEvent)
    MessageEvent.name = "MessageEvent";
  $desc = $collectedClasses.MessageEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MessageEvent.prototype = $desc;
  function MessagePort() {
  }
  MessagePort.builtin$cls = "MessagePort";
  if (!"name" in MessagePort)
    MessagePort.name = "MessagePort";
  $desc = $collectedClasses.MessagePort;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MessagePort.prototype = $desc;
  function MetaElement() {
  }
  MetaElement.builtin$cls = "MetaElement";
  if (!"name" in MetaElement)
    MetaElement.name = "MetaElement";
  $desc = $collectedClasses.MetaElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MetaElement.prototype = $desc;
  MetaElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  function Metadata() {
  }
  Metadata.builtin$cls = "Metadata";
  if (!"name" in Metadata)
    Metadata.name = "Metadata";
  $desc = $collectedClasses.Metadata;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Metadata.prototype = $desc;
  Metadata.prototype.get$size = function(receiver) {
    return receiver.size;
  };
  function MeterElement() {
  }
  MeterElement.builtin$cls = "MeterElement";
  if (!"name" in MeterElement)
    MeterElement.name = "MeterElement";
  $desc = $collectedClasses.MeterElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MeterElement.prototype = $desc;
  MeterElement.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  function MidiAccess() {
  }
  MidiAccess.builtin$cls = "MidiAccess";
  if (!"name" in MidiAccess)
    MidiAccess.name = "MidiAccess";
  $desc = $collectedClasses.MidiAccess;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MidiAccess.prototype = $desc;
  function MidiAccessPromise() {
  }
  MidiAccessPromise.builtin$cls = "MidiAccessPromise";
  if (!"name" in MidiAccessPromise)
    MidiAccessPromise.name = "MidiAccessPromise";
  $desc = $collectedClasses.MidiAccessPromise;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MidiAccessPromise.prototype = $desc;
  function MidiConnectionEvent() {
  }
  MidiConnectionEvent.builtin$cls = "MidiConnectionEvent";
  if (!"name" in MidiConnectionEvent)
    MidiConnectionEvent.name = "MidiConnectionEvent";
  $desc = $collectedClasses.MidiConnectionEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MidiConnectionEvent.prototype = $desc;
  function MidiInput() {
  }
  MidiInput.builtin$cls = "MidiInput";
  if (!"name" in MidiInput)
    MidiInput.name = "MidiInput";
  $desc = $collectedClasses.MidiInput;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MidiInput.prototype = $desc;
  function MidiMessageEvent() {
  }
  MidiMessageEvent.builtin$cls = "MidiMessageEvent";
  if (!"name" in MidiMessageEvent)
    MidiMessageEvent.name = "MidiMessageEvent";
  $desc = $collectedClasses.MidiMessageEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MidiMessageEvent.prototype = $desc;
  function MidiOutput() {
  }
  MidiOutput.builtin$cls = "MidiOutput";
  if (!"name" in MidiOutput)
    MidiOutput.name = "MidiOutput";
  $desc = $collectedClasses.MidiOutput;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MidiOutput.prototype = $desc;
  function MidiPort() {
  }
  MidiPort.builtin$cls = "MidiPort";
  if (!"name" in MidiPort)
    MidiPort.name = "MidiPort";
  $desc = $collectedClasses.MidiPort;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MidiPort.prototype = $desc;
  MidiPort.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  MidiPort.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  function MimeType() {
  }
  MimeType.builtin$cls = "MimeType";
  if (!"name" in MimeType)
    MimeType.name = "MimeType";
  $desc = $collectedClasses.MimeType;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MimeType.prototype = $desc;
  MimeType.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  function MimeTypeArray() {
  }
  MimeTypeArray.builtin$cls = "MimeTypeArray";
  if (!"name" in MimeTypeArray)
    MimeTypeArray.name = "MimeTypeArray";
  $desc = $collectedClasses.MimeTypeArray;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MimeTypeArray.prototype = $desc;
  function ModElement() {
  }
  ModElement.builtin$cls = "ModElement";
  if (!"name" in ModElement)
    ModElement.name = "ModElement";
  $desc = $collectedClasses.ModElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ModElement.prototype = $desc;
  function MouseEvent() {
  }
  MouseEvent.builtin$cls = "MouseEvent";
  if (!"name" in MouseEvent)
    MouseEvent.name = "MouseEvent";
  $desc = $collectedClasses.MouseEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MouseEvent.prototype = $desc;
  MouseEvent.prototype.get$button = function(receiver) {
    return receiver.button;
  };
  MouseEvent.prototype.get$_clientX = function(receiver) {
    return receiver.clientX;
  };
  function MutationObserver() {
  }
  MutationObserver.builtin$cls = "MutationObserver";
  if (!"name" in MutationObserver)
    MutationObserver.name = "MutationObserver";
  $desc = $collectedClasses.MutationObserver;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MutationObserver.prototype = $desc;
  function MutationRecord() {
  }
  MutationRecord.builtin$cls = "MutationRecord";
  if (!"name" in MutationRecord)
    MutationRecord.name = "MutationRecord";
  $desc = $collectedClasses.MutationRecord;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MutationRecord.prototype = $desc;
  MutationRecord.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  function NamedFlow() {
  }
  NamedFlow.builtin$cls = "NamedFlow";
  if (!"name" in NamedFlow)
    NamedFlow.name = "NamedFlow";
  $desc = $collectedClasses.NamedFlow;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NamedFlow.prototype = $desc;
  NamedFlow.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  function NamedFlowCollection() {
  }
  NamedFlowCollection.builtin$cls = "NamedFlowCollection";
  if (!"name" in NamedFlowCollection)
    NamedFlowCollection.name = "NamedFlowCollection";
  $desc = $collectedClasses.NamedFlowCollection;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NamedFlowCollection.prototype = $desc;
  NamedFlowCollection.prototype.get$length = function(receiver) {
    return receiver.length;
  };
  function Navigator() {
  }
  Navigator.builtin$cls = "Navigator";
  if (!"name" in Navigator)
    Navigator.name = "Navigator";
  $desc = $collectedClasses.Navigator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Navigator.prototype = $desc;
  function NavigatorUserMediaError() {
  }
  NavigatorUserMediaError.builtin$cls = "NavigatorUserMediaError";
  if (!"name" in NavigatorUserMediaError)
    NavigatorUserMediaError.name = "NavigatorUserMediaError";
  $desc = $collectedClasses.NavigatorUserMediaError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NavigatorUserMediaError.prototype = $desc;
  NavigatorUserMediaError.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  function Node() {
  }
  Node.builtin$cls = "Node";
  if (!"name" in Node)
    Node.name = "Node";
  $desc = $collectedClasses.Node;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Node.prototype = $desc;
  function NodeFilter() {
  }
  NodeFilter.builtin$cls = "NodeFilter";
  if (!"name" in NodeFilter)
    NodeFilter.name = "NodeFilter";
  $desc = $collectedClasses.NodeFilter;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NodeFilter.prototype = $desc;
  function NodeIterator() {
  }
  NodeIterator.builtin$cls = "NodeIterator";
  if (!"name" in NodeIterator)
    NodeIterator.name = "NodeIterator";
  $desc = $collectedClasses.NodeIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NodeIterator.prototype = $desc;
  function NodeList() {
  }
  NodeList.builtin$cls = "NodeList";
  if (!"name" in NodeList)
    NodeList.name = "NodeList";
  $desc = $collectedClasses.NodeList;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NodeList.prototype = $desc;
  function Notification() {
  }
  Notification.builtin$cls = "Notification";
  if (!"name" in Notification)
    Notification.name = "Notification";
  $desc = $collectedClasses.Notification;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Notification.prototype = $desc;
  function OListElement() {
  }
  OListElement.builtin$cls = "OListElement";
  if (!"name" in OListElement)
    OListElement.name = "OListElement";
  $desc = $collectedClasses.OListElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  OListElement.prototype = $desc;
  OListElement.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  function ObjectElement() {
  }
  ObjectElement.builtin$cls = "ObjectElement";
  if (!"name" in ObjectElement)
    ObjectElement.name = "ObjectElement";
  $desc = $collectedClasses.ObjectElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ObjectElement.prototype = $desc;
  ObjectElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  ObjectElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  ObjectElement.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  ObjectElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  function OptGroupElement() {
  }
  OptGroupElement.builtin$cls = "OptGroupElement";
  if (!"name" in OptGroupElement)
    OptGroupElement.name = "OptGroupElement";
  $desc = $collectedClasses.OptGroupElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  OptGroupElement.prototype = $desc;
  function OptionElement() {
  }
  OptionElement.builtin$cls = "OptionElement";
  if (!"name" in OptionElement)
    OptionElement.name = "OptionElement";
  $desc = $collectedClasses.OptionElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  OptionElement.prototype = $desc;
  OptionElement.prototype.get$index = function(receiver) {
    return receiver.index;
  };
  OptionElement.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  function OutputElement() {
  }
  OutputElement.builtin$cls = "OutputElement";
  if (!"name" in OutputElement)
    OutputElement.name = "OutputElement";
  $desc = $collectedClasses.OutputElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  OutputElement.prototype = $desc;
  OutputElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  OutputElement.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  OutputElement.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  function OverflowEvent() {
  }
  OverflowEvent.builtin$cls = "OverflowEvent";
  if (!"name" in OverflowEvent)
    OverflowEvent.name = "OverflowEvent";
  $desc = $collectedClasses.OverflowEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  OverflowEvent.prototype = $desc;
  function PageTransitionEvent() {
  }
  PageTransitionEvent.builtin$cls = "PageTransitionEvent";
  if (!"name" in PageTransitionEvent)
    PageTransitionEvent.name = "PageTransitionEvent";
  $desc = $collectedClasses.PageTransitionEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PageTransitionEvent.prototype = $desc;
  function ParagraphElement() {
  }
  ParagraphElement.builtin$cls = "ParagraphElement";
  if (!"name" in ParagraphElement)
    ParagraphElement.name = "ParagraphElement";
  $desc = $collectedClasses.ParagraphElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ParagraphElement.prototype = $desc;
  function ParamElement() {
  }
  ParamElement.builtin$cls = "ParamElement";
  if (!"name" in ParamElement)
    ParamElement.name = "ParamElement";
  $desc = $collectedClasses.ParamElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ParamElement.prototype = $desc;
  ParamElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  ParamElement.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  function Path() {
  }
  Path.builtin$cls = "Path";
  if (!"name" in Path)
    Path.name = "Path";
  $desc = $collectedClasses.Path;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Path.prototype = $desc;
  function Performance() {
  }
  Performance.builtin$cls = "Performance";
  if (!"name" in Performance)
    Performance.name = "Performance";
  $desc = $collectedClasses.Performance;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Performance.prototype = $desc;
  function PerformanceEntry() {
  }
  PerformanceEntry.builtin$cls = "PerformanceEntry";
  if (!"name" in PerformanceEntry)
    PerformanceEntry.name = "PerformanceEntry";
  $desc = $collectedClasses.PerformanceEntry;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PerformanceEntry.prototype = $desc;
  PerformanceEntry.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  function PerformanceMark() {
  }
  PerformanceMark.builtin$cls = "PerformanceMark";
  if (!"name" in PerformanceMark)
    PerformanceMark.name = "PerformanceMark";
  $desc = $collectedClasses.PerformanceMark;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PerformanceMark.prototype = $desc;
  function PerformanceMeasure() {
  }
  PerformanceMeasure.builtin$cls = "PerformanceMeasure";
  if (!"name" in PerformanceMeasure)
    PerformanceMeasure.name = "PerformanceMeasure";
  $desc = $collectedClasses.PerformanceMeasure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PerformanceMeasure.prototype = $desc;
  function PerformanceNavigation() {
  }
  PerformanceNavigation.builtin$cls = "PerformanceNavigation";
  if (!"name" in PerformanceNavigation)
    PerformanceNavigation.name = "PerformanceNavigation";
  $desc = $collectedClasses.PerformanceNavigation;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PerformanceNavigation.prototype = $desc;
  PerformanceNavigation.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  function PerformanceResourceTiming() {
  }
  PerformanceResourceTiming.builtin$cls = "PerformanceResourceTiming";
  if (!"name" in PerformanceResourceTiming)
    PerformanceResourceTiming.name = "PerformanceResourceTiming";
  $desc = $collectedClasses.PerformanceResourceTiming;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PerformanceResourceTiming.prototype = $desc;
  function PerformanceTiming() {
  }
  PerformanceTiming.builtin$cls = "PerformanceTiming";
  if (!"name" in PerformanceTiming)
    PerformanceTiming.name = "PerformanceTiming";
  $desc = $collectedClasses.PerformanceTiming;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PerformanceTiming.prototype = $desc;
  function Plugin() {
  }
  Plugin.builtin$cls = "Plugin";
  if (!"name" in Plugin)
    Plugin.name = "Plugin";
  $desc = $collectedClasses.Plugin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Plugin.prototype = $desc;
  Plugin.prototype.get$length = function(receiver) {
    return receiver.length;
  };
  Plugin.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  function PluginArray() {
  }
  PluginArray.builtin$cls = "PluginArray";
  if (!"name" in PluginArray)
    PluginArray.name = "PluginArray";
  $desc = $collectedClasses.PluginArray;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PluginArray.prototype = $desc;
  function PopStateEvent() {
  }
  PopStateEvent.builtin$cls = "PopStateEvent";
  if (!"name" in PopStateEvent)
    PopStateEvent.name = "PopStateEvent";
  $desc = $collectedClasses.PopStateEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PopStateEvent.prototype = $desc;
  function PositionError() {
  }
  PositionError.builtin$cls = "PositionError";
  if (!"name" in PositionError)
    PositionError.name = "PositionError";
  $desc = $collectedClasses.PositionError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PositionError.prototype = $desc;
  function PreElement() {
  }
  PreElement.builtin$cls = "PreElement";
  if (!"name" in PreElement)
    PreElement.name = "PreElement";
  $desc = $collectedClasses.PreElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PreElement.prototype = $desc;
  function ProcessingInstruction() {
  }
  ProcessingInstruction.builtin$cls = "ProcessingInstruction";
  if (!"name" in ProcessingInstruction)
    ProcessingInstruction.name = "ProcessingInstruction";
  $desc = $collectedClasses.ProcessingInstruction;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ProcessingInstruction.prototype = $desc;
  function ProgressElement() {
  }
  ProgressElement.builtin$cls = "ProgressElement";
  if (!"name" in ProgressElement)
    ProgressElement.name = "ProgressElement";
  $desc = $collectedClasses.ProgressElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ProgressElement.prototype = $desc;
  ProgressElement.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  function ProgressEvent() {
  }
  ProgressEvent.builtin$cls = "ProgressEvent";
  if (!"name" in ProgressEvent)
    ProgressEvent.name = "ProgressEvent";
  $desc = $collectedClasses.ProgressEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ProgressEvent.prototype = $desc;
  function Promise() {
  }
  Promise.builtin$cls = "Promise";
  if (!"name" in Promise)
    Promise.name = "Promise";
  $desc = $collectedClasses.Promise;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Promise.prototype = $desc;
  function QuoteElement() {
  }
  QuoteElement.builtin$cls = "QuoteElement";
  if (!"name" in QuoteElement)
    QuoteElement.name = "QuoteElement";
  $desc = $collectedClasses.QuoteElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  QuoteElement.prototype = $desc;
  function Range() {
  }
  Range.builtin$cls = "Range";
  if (!"name" in Range)
    Range.name = "Range";
  $desc = $collectedClasses.Range;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Range.prototype = $desc;
  function ResourceProgressEvent() {
  }
  ResourceProgressEvent.builtin$cls = "ResourceProgressEvent";
  if (!"name" in ResourceProgressEvent)
    ResourceProgressEvent.name = "ResourceProgressEvent";
  $desc = $collectedClasses.ResourceProgressEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ResourceProgressEvent.prototype = $desc;
  function RsaKeyGenParams() {
  }
  RsaKeyGenParams.builtin$cls = "RsaKeyGenParams";
  if (!"name" in RsaKeyGenParams)
    RsaKeyGenParams.name = "RsaKeyGenParams";
  $desc = $collectedClasses.RsaKeyGenParams;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RsaKeyGenParams.prototype = $desc;
  function RsaSsaParams() {
  }
  RsaSsaParams.builtin$cls = "RsaSsaParams";
  if (!"name" in RsaSsaParams)
    RsaSsaParams.name = "RsaSsaParams";
  $desc = $collectedClasses.RsaSsaParams;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RsaSsaParams.prototype = $desc;
  function RtcDataChannel() {
  }
  RtcDataChannel.builtin$cls = "RtcDataChannel";
  if (!"name" in RtcDataChannel)
    RtcDataChannel.name = "RtcDataChannel";
  $desc = $collectedClasses.RtcDataChannel;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RtcDataChannel.prototype = $desc;
  function RtcDataChannelEvent() {
  }
  RtcDataChannelEvent.builtin$cls = "RtcDataChannelEvent";
  if (!"name" in RtcDataChannelEvent)
    RtcDataChannelEvent.name = "RtcDataChannelEvent";
  $desc = $collectedClasses.RtcDataChannelEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RtcDataChannelEvent.prototype = $desc;
  function RtcDtmfSender() {
  }
  RtcDtmfSender.builtin$cls = "RtcDtmfSender";
  if (!"name" in RtcDtmfSender)
    RtcDtmfSender.name = "RtcDtmfSender";
  $desc = $collectedClasses.RtcDtmfSender;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RtcDtmfSender.prototype = $desc;
  function RtcDtmfToneChangeEvent() {
  }
  RtcDtmfToneChangeEvent.builtin$cls = "RtcDtmfToneChangeEvent";
  if (!"name" in RtcDtmfToneChangeEvent)
    RtcDtmfToneChangeEvent.name = "RtcDtmfToneChangeEvent";
  $desc = $collectedClasses.RtcDtmfToneChangeEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RtcDtmfToneChangeEvent.prototype = $desc;
  function RtcIceCandidate() {
  }
  RtcIceCandidate.builtin$cls = "RtcIceCandidate";
  if (!"name" in RtcIceCandidate)
    RtcIceCandidate.name = "RtcIceCandidate";
  $desc = $collectedClasses.RtcIceCandidate;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RtcIceCandidate.prototype = $desc;
  function RtcIceCandidateEvent() {
  }
  RtcIceCandidateEvent.builtin$cls = "RtcIceCandidateEvent";
  if (!"name" in RtcIceCandidateEvent)
    RtcIceCandidateEvent.name = "RtcIceCandidateEvent";
  $desc = $collectedClasses.RtcIceCandidateEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RtcIceCandidateEvent.prototype = $desc;
  function RtcPeerConnection() {
  }
  RtcPeerConnection.builtin$cls = "RtcPeerConnection";
  if (!"name" in RtcPeerConnection)
    RtcPeerConnection.name = "RtcPeerConnection";
  $desc = $collectedClasses.RtcPeerConnection;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RtcPeerConnection.prototype = $desc;
  function RtcSessionDescription() {
  }
  RtcSessionDescription.builtin$cls = "RtcSessionDescription";
  if (!"name" in RtcSessionDescription)
    RtcSessionDescription.name = "RtcSessionDescription";
  $desc = $collectedClasses.RtcSessionDescription;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RtcSessionDescription.prototype = $desc;
  RtcSessionDescription.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  function RtcStatsReport() {
  }
  RtcStatsReport.builtin$cls = "RtcStatsReport";
  if (!"name" in RtcStatsReport)
    RtcStatsReport.name = "RtcStatsReport";
  $desc = $collectedClasses.RtcStatsReport;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RtcStatsReport.prototype = $desc;
  RtcStatsReport.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  function RtcStatsResponse() {
  }
  RtcStatsResponse.builtin$cls = "RtcStatsResponse";
  if (!"name" in RtcStatsResponse)
    RtcStatsResponse.name = "RtcStatsResponse";
  $desc = $collectedClasses.RtcStatsResponse;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RtcStatsResponse.prototype = $desc;
  function Screen() {
  }
  Screen.builtin$cls = "Screen";
  if (!"name" in Screen)
    Screen.name = "Screen";
  $desc = $collectedClasses.Screen;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Screen.prototype = $desc;
  function ScriptElement() {
  }
  ScriptElement.builtin$cls = "ScriptElement";
  if (!"name" in ScriptElement)
    ScriptElement.name = "ScriptElement";
  $desc = $collectedClasses.ScriptElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ScriptElement.prototype = $desc;
  ScriptElement.prototype.set$src = function(receiver, v) {
    return receiver.src = v;
  };
  ScriptElement.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  function SecurityPolicy() {
  }
  SecurityPolicy.builtin$cls = "SecurityPolicy";
  if (!"name" in SecurityPolicy)
    SecurityPolicy.name = "SecurityPolicy";
  $desc = $collectedClasses.SecurityPolicy;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SecurityPolicy.prototype = $desc;
  function SecurityPolicyViolationEvent() {
  }
  SecurityPolicyViolationEvent.builtin$cls = "SecurityPolicyViolationEvent";
  if (!"name" in SecurityPolicyViolationEvent)
    SecurityPolicyViolationEvent.name = "SecurityPolicyViolationEvent";
  $desc = $collectedClasses.SecurityPolicyViolationEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SecurityPolicyViolationEvent.prototype = $desc;
  function SelectElement() {
  }
  SelectElement.builtin$cls = "SelectElement";
  if (!"name" in SelectElement)
    SelectElement.name = "SelectElement";
  $desc = $collectedClasses.SelectElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SelectElement.prototype = $desc;
  SelectElement.prototype.get$length = function(receiver) {
    return receiver.length;
  };
  SelectElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  SelectElement.prototype.get$size = function(receiver) {
    return receiver.size;
  };
  SelectElement.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  SelectElement.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  function Selection() {
  }
  Selection.builtin$cls = "Selection";
  if (!"name" in Selection)
    Selection.name = "Selection";
  $desc = $collectedClasses.Selection;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Selection.prototype = $desc;
  Selection.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  function ServiceWorker() {
  }
  ServiceWorker.builtin$cls = "ServiceWorker";
  if (!"name" in ServiceWorker)
    ServiceWorker.name = "ServiceWorker";
  $desc = $collectedClasses.ServiceWorker;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ServiceWorker.prototype = $desc;
  function ShadowElement() {
  }
  ShadowElement.builtin$cls = "ShadowElement";
  if (!"name" in ShadowElement)
    ShadowElement.name = "ShadowElement";
  $desc = $collectedClasses.ShadowElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ShadowElement.prototype = $desc;
  function ShadowRoot() {
  }
  ShadowRoot.builtin$cls = "ShadowRoot";
  if (!"name" in ShadowRoot)
    ShadowRoot.name = "ShadowRoot";
  $desc = $collectedClasses.ShadowRoot;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ShadowRoot.prototype = $desc;
  function SharedWorkerGlobalScope() {
  }
  SharedWorkerGlobalScope.builtin$cls = "SharedWorkerGlobalScope";
  if (!"name" in SharedWorkerGlobalScope)
    SharedWorkerGlobalScope.name = "SharedWorkerGlobalScope";
  $desc = $collectedClasses.SharedWorkerGlobalScope;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SharedWorkerGlobalScope.prototype = $desc;
  SharedWorkerGlobalScope.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  function SourceBuffer() {
  }
  SourceBuffer.builtin$cls = "SourceBuffer";
  if (!"name" in SourceBuffer)
    SourceBuffer.name = "SourceBuffer";
  $desc = $collectedClasses.SourceBuffer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SourceBuffer.prototype = $desc;
  function SourceBufferList() {
  }
  SourceBufferList.builtin$cls = "SourceBufferList";
  if (!"name" in SourceBufferList)
    SourceBufferList.name = "SourceBufferList";
  $desc = $collectedClasses.SourceBufferList;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SourceBufferList.prototype = $desc;
  function SourceElement() {
  }
  SourceElement.builtin$cls = "SourceElement";
  if (!"name" in SourceElement)
    SourceElement.name = "SourceElement";
  $desc = $collectedClasses.SourceElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SourceElement.prototype = $desc;
  SourceElement.prototype.set$src = function(receiver, v) {
    return receiver.src = v;
  };
  SourceElement.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  function SourceInfo() {
  }
  SourceInfo.builtin$cls = "SourceInfo";
  if (!"name" in SourceInfo)
    SourceInfo.name = "SourceInfo";
  $desc = $collectedClasses.SourceInfo;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SourceInfo.prototype = $desc;
  function SpanElement() {
  }
  SpanElement.builtin$cls = "SpanElement";
  if (!"name" in SpanElement)
    SpanElement.name = "SpanElement";
  $desc = $collectedClasses.SpanElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SpanElement.prototype = $desc;
  function SpeechGrammar() {
  }
  SpeechGrammar.builtin$cls = "SpeechGrammar";
  if (!"name" in SpeechGrammar)
    SpeechGrammar.name = "SpeechGrammar";
  $desc = $collectedClasses.SpeechGrammar;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SpeechGrammar.prototype = $desc;
  function SpeechGrammarList() {
  }
  SpeechGrammarList.builtin$cls = "SpeechGrammarList";
  if (!"name" in SpeechGrammarList)
    SpeechGrammarList.name = "SpeechGrammarList";
  $desc = $collectedClasses.SpeechGrammarList;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SpeechGrammarList.prototype = $desc;
  function SpeechInputEvent() {
  }
  SpeechInputEvent.builtin$cls = "SpeechInputEvent";
  if (!"name" in SpeechInputEvent)
    SpeechInputEvent.name = "SpeechInputEvent";
  $desc = $collectedClasses.SpeechInputEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SpeechInputEvent.prototype = $desc;
  function SpeechInputResult() {
  }
  SpeechInputResult.builtin$cls = "SpeechInputResult";
  if (!"name" in SpeechInputResult)
    SpeechInputResult.name = "SpeechInputResult";
  $desc = $collectedClasses.SpeechInputResult;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SpeechInputResult.prototype = $desc;
  function SpeechRecognition() {
  }
  SpeechRecognition.builtin$cls = "SpeechRecognition";
  if (!"name" in SpeechRecognition)
    SpeechRecognition.name = "SpeechRecognition";
  $desc = $collectedClasses.SpeechRecognition;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SpeechRecognition.prototype = $desc;
  function SpeechRecognitionAlternative() {
  }
  SpeechRecognitionAlternative.builtin$cls = "SpeechRecognitionAlternative";
  if (!"name" in SpeechRecognitionAlternative)
    SpeechRecognitionAlternative.name = "SpeechRecognitionAlternative";
  $desc = $collectedClasses.SpeechRecognitionAlternative;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SpeechRecognitionAlternative.prototype = $desc;
  function SpeechRecognitionError() {
  }
  SpeechRecognitionError.builtin$cls = "SpeechRecognitionError";
  if (!"name" in SpeechRecognitionError)
    SpeechRecognitionError.name = "SpeechRecognitionError";
  $desc = $collectedClasses.SpeechRecognitionError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SpeechRecognitionError.prototype = $desc;
  SpeechRecognitionError.prototype.get$error = function(receiver) {
    return receiver.error;
  };
  function SpeechRecognitionEvent() {
  }
  SpeechRecognitionEvent.builtin$cls = "SpeechRecognitionEvent";
  if (!"name" in SpeechRecognitionEvent)
    SpeechRecognitionEvent.name = "SpeechRecognitionEvent";
  $desc = $collectedClasses.SpeechRecognitionEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SpeechRecognitionEvent.prototype = $desc;
  function SpeechRecognitionResult() {
  }
  SpeechRecognitionResult.builtin$cls = "SpeechRecognitionResult";
  if (!"name" in SpeechRecognitionResult)
    SpeechRecognitionResult.name = "SpeechRecognitionResult";
  $desc = $collectedClasses.SpeechRecognitionResult;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SpeechRecognitionResult.prototype = $desc;
  SpeechRecognitionResult.prototype.get$length = function(receiver) {
    return receiver.length;
  };
  function SpeechSynthesis() {
  }
  SpeechSynthesis.builtin$cls = "SpeechSynthesis";
  if (!"name" in SpeechSynthesis)
    SpeechSynthesis.name = "SpeechSynthesis";
  $desc = $collectedClasses.SpeechSynthesis;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SpeechSynthesis.prototype = $desc;
  function SpeechSynthesisEvent() {
  }
  SpeechSynthesisEvent.builtin$cls = "SpeechSynthesisEvent";
  if (!"name" in SpeechSynthesisEvent)
    SpeechSynthesisEvent.name = "SpeechSynthesisEvent";
  $desc = $collectedClasses.SpeechSynthesisEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SpeechSynthesisEvent.prototype = $desc;
  SpeechSynthesisEvent.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  function SpeechSynthesisUtterance() {
  }
  SpeechSynthesisUtterance.builtin$cls = "SpeechSynthesisUtterance";
  if (!"name" in SpeechSynthesisUtterance)
    SpeechSynthesisUtterance.name = "SpeechSynthesisUtterance";
  $desc = $collectedClasses.SpeechSynthesisUtterance;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SpeechSynthesisUtterance.prototype = $desc;
  function SpeechSynthesisVoice() {
  }
  SpeechSynthesisVoice.builtin$cls = "SpeechSynthesisVoice";
  if (!"name" in SpeechSynthesisVoice)
    SpeechSynthesisVoice.name = "SpeechSynthesisVoice";
  $desc = $collectedClasses.SpeechSynthesisVoice;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SpeechSynthesisVoice.prototype = $desc;
  SpeechSynthesisVoice.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  function Storage() {
  }
  Storage.builtin$cls = "Storage";
  if (!"name" in Storage)
    Storage.name = "Storage";
  $desc = $collectedClasses.Storage;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Storage.prototype = $desc;
  function StorageEvent() {
  }
  StorageEvent.builtin$cls = "StorageEvent";
  if (!"name" in StorageEvent)
    StorageEvent.name = "StorageEvent";
  $desc = $collectedClasses.StorageEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StorageEvent.prototype = $desc;
  function StorageInfo() {
  }
  StorageInfo.builtin$cls = "StorageInfo";
  if (!"name" in StorageInfo)
    StorageInfo.name = "StorageInfo";
  $desc = $collectedClasses.StorageInfo;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StorageInfo.prototype = $desc;
  function StorageQuota() {
  }
  StorageQuota.builtin$cls = "StorageQuota";
  if (!"name" in StorageQuota)
    StorageQuota.name = "StorageQuota";
  $desc = $collectedClasses.StorageQuota;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StorageQuota.prototype = $desc;
  function StyleElement() {
  }
  StyleElement.builtin$cls = "StyleElement";
  if (!"name" in StyleElement)
    StyleElement.name = "StyleElement";
  $desc = $collectedClasses.StyleElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StyleElement.prototype = $desc;
  StyleElement.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  function StyleMedia() {
  }
  StyleMedia.builtin$cls = "StyleMedia";
  if (!"name" in StyleMedia)
    StyleMedia.name = "StyleMedia";
  $desc = $collectedClasses.StyleMedia;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StyleMedia.prototype = $desc;
  StyleMedia.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  function StyleSheet() {
  }
  StyleSheet.builtin$cls = "StyleSheet";
  if (!"name" in StyleSheet)
    StyleSheet.name = "StyleSheet";
  $desc = $collectedClasses.StyleSheet;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StyleSheet.prototype = $desc;
  StyleSheet.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  function TableCaptionElement() {
  }
  TableCaptionElement.builtin$cls = "TableCaptionElement";
  if (!"name" in TableCaptionElement)
    TableCaptionElement.name = "TableCaptionElement";
  $desc = $collectedClasses.TableCaptionElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TableCaptionElement.prototype = $desc;
  function TableCellElement() {
  }
  TableCellElement.builtin$cls = "TableCellElement";
  if (!"name" in TableCellElement)
    TableCellElement.name = "TableCellElement";
  $desc = $collectedClasses.TableCellElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TableCellElement.prototype = $desc;
  function TableColElement() {
  }
  TableColElement.builtin$cls = "TableColElement";
  if (!"name" in TableColElement)
    TableColElement.name = "TableColElement";
  $desc = $collectedClasses.TableColElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TableColElement.prototype = $desc;
  function TableElement() {
  }
  TableElement.builtin$cls = "TableElement";
  if (!"name" in TableElement)
    TableElement.name = "TableElement";
  $desc = $collectedClasses.TableElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TableElement.prototype = $desc;
  function TableRowElement() {
  }
  TableRowElement.builtin$cls = "TableRowElement";
  if (!"name" in TableRowElement)
    TableRowElement.name = "TableRowElement";
  $desc = $collectedClasses.TableRowElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TableRowElement.prototype = $desc;
  function TableSectionElement() {
  }
  TableSectionElement.builtin$cls = "TableSectionElement";
  if (!"name" in TableSectionElement)
    TableSectionElement.name = "TableSectionElement";
  $desc = $collectedClasses.TableSectionElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TableSectionElement.prototype = $desc;
  function TemplateElement() {
  }
  TemplateElement.builtin$cls = "TemplateElement";
  if (!"name" in TemplateElement)
    TemplateElement.name = "TemplateElement";
  $desc = $collectedClasses.TemplateElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TemplateElement.prototype = $desc;
  function Text() {
  }
  Text.builtin$cls = "Text";
  if (!"name" in Text)
    Text.name = "Text";
  $desc = $collectedClasses.Text;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Text.prototype = $desc;
  function TextAreaElement() {
  }
  TextAreaElement.builtin$cls = "TextAreaElement";
  if (!"name" in TextAreaElement)
    TextAreaElement.name = "TextAreaElement";
  $desc = $collectedClasses.TextAreaElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TextAreaElement.prototype = $desc;
  TextAreaElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  TextAreaElement.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  TextAreaElement.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  function TextEvent() {
  }
  TextEvent.builtin$cls = "TextEvent";
  if (!"name" in TextEvent)
    TextEvent.name = "TextEvent";
  $desc = $collectedClasses.TextEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TextEvent.prototype = $desc;
  function TextMetrics() {
  }
  TextMetrics.builtin$cls = "TextMetrics";
  if (!"name" in TextMetrics)
    TextMetrics.name = "TextMetrics";
  $desc = $collectedClasses.TextMetrics;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TextMetrics.prototype = $desc;
  function TextTrack() {
  }
  TextTrack.builtin$cls = "TextTrack";
  if (!"name" in TextTrack)
    TextTrack.name = "TextTrack";
  $desc = $collectedClasses.TextTrack;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TextTrack.prototype = $desc;
  function TextTrackCue() {
  }
  TextTrackCue.builtin$cls = "TextTrackCue";
  if (!"name" in TextTrackCue)
    TextTrackCue.name = "TextTrackCue";
  $desc = $collectedClasses.TextTrackCue;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TextTrackCue.prototype = $desc;
  TextTrackCue.prototype.get$size = function(receiver) {
    return receiver.size;
  };
  function TextTrackCueList() {
  }
  TextTrackCueList.builtin$cls = "TextTrackCueList";
  if (!"name" in TextTrackCueList)
    TextTrackCueList.name = "TextTrackCueList";
  $desc = $collectedClasses.TextTrackCueList;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TextTrackCueList.prototype = $desc;
  function TextTrackList() {
  }
  TextTrackList.builtin$cls = "TextTrackList";
  if (!"name" in TextTrackList)
    TextTrackList.name = "TextTrackList";
  $desc = $collectedClasses.TextTrackList;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TextTrackList.prototype = $desc;
  function TimeRanges() {
  }
  TimeRanges.builtin$cls = "TimeRanges";
  if (!"name" in TimeRanges)
    TimeRanges.name = "TimeRanges";
  $desc = $collectedClasses.TimeRanges;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TimeRanges.prototype = $desc;
  TimeRanges.prototype.get$length = function(receiver) {
    return receiver.length;
  };
  function TitleElement() {
  }
  TitleElement.builtin$cls = "TitleElement";
  if (!"name" in TitleElement)
    TitleElement.name = "TitleElement";
  $desc = $collectedClasses.TitleElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TitleElement.prototype = $desc;
  function Touch() {
  }
  Touch.builtin$cls = "Touch";
  if (!"name" in Touch)
    Touch.name = "Touch";
  $desc = $collectedClasses.Touch;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Touch.prototype = $desc;
  Touch.prototype.get$identifier = function(receiver) {
    return receiver.identifier;
  };
  function TouchEvent() {
  }
  TouchEvent.builtin$cls = "TouchEvent";
  if (!"name" in TouchEvent)
    TouchEvent.name = "TouchEvent";
  $desc = $collectedClasses.TouchEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TouchEvent.prototype = $desc;
  TouchEvent.prototype.get$changedTouches = function(receiver) {
    return receiver.changedTouches;
  };
  function TouchList() {
  }
  TouchList.builtin$cls = "TouchList";
  if (!"name" in TouchList)
    TouchList.name = "TouchList";
  $desc = $collectedClasses.TouchList;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TouchList.prototype = $desc;
  function TrackElement() {
  }
  TrackElement.builtin$cls = "TrackElement";
  if (!"name" in TrackElement)
    TrackElement.name = "TrackElement";
  $desc = $collectedClasses.TrackElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TrackElement.prototype = $desc;
  TrackElement.prototype.set$src = function(receiver, v) {
    return receiver.src = v;
  };
  function TrackEvent() {
  }
  TrackEvent.builtin$cls = "TrackEvent";
  if (!"name" in TrackEvent)
    TrackEvent.name = "TrackEvent";
  $desc = $collectedClasses.TrackEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TrackEvent.prototype = $desc;
  function TransitionEvent() {
  }
  TransitionEvent.builtin$cls = "TransitionEvent";
  if (!"name" in TransitionEvent)
    TransitionEvent.name = "TransitionEvent";
  $desc = $collectedClasses.TransitionEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TransitionEvent.prototype = $desc;
  function TreeWalker() {
  }
  TreeWalker.builtin$cls = "TreeWalker";
  if (!"name" in TreeWalker)
    TreeWalker.name = "TreeWalker";
  $desc = $collectedClasses.TreeWalker;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TreeWalker.prototype = $desc;
  function UIEvent() {
  }
  UIEvent.builtin$cls = "UIEvent";
  if (!"name" in UIEvent)
    UIEvent.name = "UIEvent";
  $desc = $collectedClasses.UIEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UIEvent.prototype = $desc;
  function UListElement() {
  }
  UListElement.builtin$cls = "UListElement";
  if (!"name" in UListElement)
    UListElement.name = "UListElement";
  $desc = $collectedClasses.UListElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UListElement.prototype = $desc;
  function UnknownElement() {
  }
  UnknownElement.builtin$cls = "UnknownElement";
  if (!"name" in UnknownElement)
    UnknownElement.name = "UnknownElement";
  $desc = $collectedClasses.UnknownElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UnknownElement.prototype = $desc;
  function Url() {
  }
  Url.builtin$cls = "Url";
  if (!"name" in Url)
    Url.name = "Url";
  $desc = $collectedClasses.Url;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Url.prototype = $desc;
  function ValidityState() {
  }
  ValidityState.builtin$cls = "ValidityState";
  if (!"name" in ValidityState)
    ValidityState.name = "ValidityState";
  $desc = $collectedClasses.ValidityState;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ValidityState.prototype = $desc;
  function VideoElement() {
  }
  VideoElement.builtin$cls = "VideoElement";
  if (!"name" in VideoElement)
    VideoElement.name = "VideoElement";
  $desc = $collectedClasses.VideoElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  VideoElement.prototype = $desc;
  VideoElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  VideoElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  function WebSocket() {
  }
  WebSocket.builtin$cls = "WebSocket";
  if (!"name" in WebSocket)
    WebSocket.name = "WebSocket";
  $desc = $collectedClasses.WebSocket;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WebSocket.prototype = $desc;
  function WheelEvent() {
  }
  WheelEvent.builtin$cls = "WheelEvent";
  if (!"name" in WheelEvent)
    WheelEvent.name = "WheelEvent";
  $desc = $collectedClasses.WheelEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WheelEvent.prototype = $desc;
  function Window() {
  }
  Window.builtin$cls = "Window";
  if (!"name" in Window)
    Window.name = "Window";
  $desc = $collectedClasses.Window;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Window.prototype = $desc;
  Window.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  function Worker() {
  }
  Worker.builtin$cls = "Worker";
  if (!"name" in Worker)
    Worker.name = "Worker";
  $desc = $collectedClasses.Worker;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Worker.prototype = $desc;
  function WorkerConsole() {
  }
  WorkerConsole.builtin$cls = "WorkerConsole";
  if (!"name" in WorkerConsole)
    WorkerConsole.name = "WorkerConsole";
  $desc = $collectedClasses.WorkerConsole;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WorkerConsole.prototype = $desc;
  function WorkerCrypto() {
  }
  WorkerCrypto.builtin$cls = "WorkerCrypto";
  if (!"name" in WorkerCrypto)
    WorkerCrypto.name = "WorkerCrypto";
  $desc = $collectedClasses.WorkerCrypto;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WorkerCrypto.prototype = $desc;
  function WorkerGlobalScope() {
  }
  WorkerGlobalScope.builtin$cls = "WorkerGlobalScope";
  if (!"name" in WorkerGlobalScope)
    WorkerGlobalScope.name = "WorkerGlobalScope";
  $desc = $collectedClasses.WorkerGlobalScope;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WorkerGlobalScope.prototype = $desc;
  WorkerGlobalScope.prototype.get$location = function(receiver) {
    return receiver.location;
  };
  function WorkerPerformance() {
  }
  WorkerPerformance.builtin$cls = "WorkerPerformance";
  if (!"name" in WorkerPerformance)
    WorkerPerformance.name = "WorkerPerformance";
  $desc = $collectedClasses.WorkerPerformance;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WorkerPerformance.prototype = $desc;
  function XPathEvaluator() {
  }
  XPathEvaluator.builtin$cls = "XPathEvaluator";
  if (!"name" in XPathEvaluator)
    XPathEvaluator.name = "XPathEvaluator";
  $desc = $collectedClasses.XPathEvaluator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  XPathEvaluator.prototype = $desc;
  function XPathExpression() {
  }
  XPathExpression.builtin$cls = "XPathExpression";
  if (!"name" in XPathExpression)
    XPathExpression.name = "XPathExpression";
  $desc = $collectedClasses.XPathExpression;
  if ($desc instanceof Array)
    $desc = $desc[1];
  XPathExpression.prototype = $desc;
  function XPathNSResolver() {
  }
  XPathNSResolver.builtin$cls = "XPathNSResolver";
  if (!"name" in XPathNSResolver)
    XPathNSResolver.name = "XPathNSResolver";
  $desc = $collectedClasses.XPathNSResolver;
  if ($desc instanceof Array)
    $desc = $desc[1];
  XPathNSResolver.prototype = $desc;
  function XPathResult() {
  }
  XPathResult.builtin$cls = "XPathResult";
  if (!"name" in XPathResult)
    XPathResult.name = "XPathResult";
  $desc = $collectedClasses.XPathResult;
  if ($desc instanceof Array)
    $desc = $desc[1];
  XPathResult.prototype = $desc;
  function XmlSerializer() {
  }
  XmlSerializer.builtin$cls = "XmlSerializer";
  if (!"name" in XmlSerializer)
    XmlSerializer.name = "XmlSerializer";
  $desc = $collectedClasses.XmlSerializer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  XmlSerializer.prototype = $desc;
  function XsltProcessor() {
  }
  XsltProcessor.builtin$cls = "XsltProcessor";
  if (!"name" in XsltProcessor)
    XsltProcessor.name = "XsltProcessor";
  $desc = $collectedClasses.XsltProcessor;
  if ($desc instanceof Array)
    $desc = $desc[1];
  XsltProcessor.prototype = $desc;
  function _Attr() {
  }
  _Attr.builtin$cls = "_Attr";
  if (!"name" in _Attr)
    _Attr.name = "_Attr";
  $desc = $collectedClasses._Attr;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Attr.prototype = $desc;
  _Attr.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  _Attr.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  function _CSSPrimitiveValue() {
  }
  _CSSPrimitiveValue.builtin$cls = "_CSSPrimitiveValue";
  if (!"name" in _CSSPrimitiveValue)
    _CSSPrimitiveValue.name = "_CSSPrimitiveValue";
  $desc = $collectedClasses._CSSPrimitiveValue;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _CSSPrimitiveValue.prototype = $desc;
  function _CSSUnknownRule() {
  }
  _CSSUnknownRule.builtin$cls = "_CSSUnknownRule";
  if (!"name" in _CSSUnknownRule)
    _CSSUnknownRule.name = "_CSSUnknownRule";
  $desc = $collectedClasses._CSSUnknownRule;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _CSSUnknownRule.prototype = $desc;
  function _CSSValue() {
  }
  _CSSValue.builtin$cls = "_CSSValue";
  if (!"name" in _CSSValue)
    _CSSValue.name = "_CSSValue";
  $desc = $collectedClasses._CSSValue;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _CSSValue.prototype = $desc;
  function _ClientRect() {
  }
  _ClientRect.builtin$cls = "_ClientRect";
  if (!"name" in _ClientRect)
    _ClientRect.name = "_ClientRect";
  $desc = $collectedClasses._ClientRect;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ClientRect.prototype = $desc;
  _ClientRect.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  _ClientRect.prototype.get$left = function(receiver) {
    return receiver.left;
  };
  _ClientRect.prototype.get$top = function(receiver) {
    return receiver.top;
  };
  _ClientRect.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  function _ClientRectList() {
  }
  _ClientRectList.builtin$cls = "_ClientRectList";
  if (!"name" in _ClientRectList)
    _ClientRectList.name = "_ClientRectList";
  $desc = $collectedClasses._ClientRectList;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ClientRectList.prototype = $desc;
  function _Counter() {
  }
  _Counter.builtin$cls = "_Counter";
  if (!"name" in _Counter)
    _Counter.name = "_Counter";
  $desc = $collectedClasses._Counter;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Counter.prototype = $desc;
  function _CssRuleList() {
  }
  _CssRuleList.builtin$cls = "_CssRuleList";
  if (!"name" in _CssRuleList)
    _CssRuleList.name = "_CssRuleList";
  $desc = $collectedClasses._CssRuleList;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _CssRuleList.prototype = $desc;
  function _CssValueList() {
  }
  _CssValueList.builtin$cls = "_CssValueList";
  if (!"name" in _CssValueList)
    _CssValueList.name = "_CssValueList";
  $desc = $collectedClasses._CssValueList;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _CssValueList.prototype = $desc;
  function _DOMFileSystemSync() {
  }
  _DOMFileSystemSync.builtin$cls = "_DOMFileSystemSync";
  if (!"name" in _DOMFileSystemSync)
    _DOMFileSystemSync.name = "_DOMFileSystemSync";
  $desc = $collectedClasses._DOMFileSystemSync;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _DOMFileSystemSync.prototype = $desc;
  function _DatabaseSync() {
  }
  _DatabaseSync.builtin$cls = "_DatabaseSync";
  if (!"name" in _DatabaseSync)
    _DatabaseSync.name = "_DatabaseSync";
  $desc = $collectedClasses._DatabaseSync;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _DatabaseSync.prototype = $desc;
  function _DirectoryEntrySync() {
  }
  _DirectoryEntrySync.builtin$cls = "_DirectoryEntrySync";
  if (!"name" in _DirectoryEntrySync)
    _DirectoryEntrySync.name = "_DirectoryEntrySync";
  $desc = $collectedClasses._DirectoryEntrySync;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _DirectoryEntrySync.prototype = $desc;
  function _DirectoryReaderSync() {
  }
  _DirectoryReaderSync.builtin$cls = "_DirectoryReaderSync";
  if (!"name" in _DirectoryReaderSync)
    _DirectoryReaderSync.name = "_DirectoryReaderSync";
  $desc = $collectedClasses._DirectoryReaderSync;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _DirectoryReaderSync.prototype = $desc;
  function _DomPoint() {
  }
  _DomPoint.builtin$cls = "_DomPoint";
  if (!"name" in _DomPoint)
    _DomPoint.name = "_DomPoint";
  $desc = $collectedClasses._DomPoint;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _DomPoint.prototype = $desc;
  _DomPoint.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  _DomPoint.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function _Entity() {
  }
  _Entity.builtin$cls = "_Entity";
  if (!"name" in _Entity)
    _Entity.name = "_Entity";
  $desc = $collectedClasses._Entity;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Entity.prototype = $desc;
  function _EntrySync() {
  }
  _EntrySync.builtin$cls = "_EntrySync";
  if (!"name" in _EntrySync)
    _EntrySync.name = "_EntrySync";
  $desc = $collectedClasses._EntrySync;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _EntrySync.prototype = $desc;
  function _FileEntrySync() {
  }
  _FileEntrySync.builtin$cls = "_FileEntrySync";
  if (!"name" in _FileEntrySync)
    _FileEntrySync.name = "_FileEntrySync";
  $desc = $collectedClasses._FileEntrySync;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _FileEntrySync.prototype = $desc;
  function _FileReaderSync() {
  }
  _FileReaderSync.builtin$cls = "_FileReaderSync";
  if (!"name" in _FileReaderSync)
    _FileReaderSync.name = "_FileReaderSync";
  $desc = $collectedClasses._FileReaderSync;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _FileReaderSync.prototype = $desc;
  function _FileWriterSync() {
  }
  _FileWriterSync.builtin$cls = "_FileWriterSync";
  if (!"name" in _FileWriterSync)
    _FileWriterSync.name = "_FileWriterSync";
  $desc = $collectedClasses._FileWriterSync;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _FileWriterSync.prototype = $desc;
  function _GamepadList() {
  }
  _GamepadList.builtin$cls = "_GamepadList";
  if (!"name" in _GamepadList)
    _GamepadList.name = "_GamepadList";
  $desc = $collectedClasses._GamepadList;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _GamepadList.prototype = $desc;
  function _HTMLAllCollection() {
  }
  _HTMLAllCollection.builtin$cls = "_HTMLAllCollection";
  if (!"name" in _HTMLAllCollection)
    _HTMLAllCollection.name = "_HTMLAllCollection";
  $desc = $collectedClasses._HTMLAllCollection;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HTMLAllCollection.prototype = $desc;
  function _HTMLAppletElement() {
  }
  _HTMLAppletElement.builtin$cls = "_HTMLAppletElement";
  if (!"name" in _HTMLAppletElement)
    _HTMLAppletElement.name = "_HTMLAppletElement";
  $desc = $collectedClasses._HTMLAppletElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HTMLAppletElement.prototype = $desc;
  function _HTMLBaseFontElement() {
  }
  _HTMLBaseFontElement.builtin$cls = "_HTMLBaseFontElement";
  if (!"name" in _HTMLBaseFontElement)
    _HTMLBaseFontElement.name = "_HTMLBaseFontElement";
  $desc = $collectedClasses._HTMLBaseFontElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HTMLBaseFontElement.prototype = $desc;
  function _HTMLDirectoryElement() {
  }
  _HTMLDirectoryElement.builtin$cls = "_HTMLDirectoryElement";
  if (!"name" in _HTMLDirectoryElement)
    _HTMLDirectoryElement.name = "_HTMLDirectoryElement";
  $desc = $collectedClasses._HTMLDirectoryElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HTMLDirectoryElement.prototype = $desc;
  function _HTMLFontElement() {
  }
  _HTMLFontElement.builtin$cls = "_HTMLFontElement";
  if (!"name" in _HTMLFontElement)
    _HTMLFontElement.name = "_HTMLFontElement";
  $desc = $collectedClasses._HTMLFontElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HTMLFontElement.prototype = $desc;
  function _HTMLFrameElement() {
  }
  _HTMLFrameElement.builtin$cls = "_HTMLFrameElement";
  if (!"name" in _HTMLFrameElement)
    _HTMLFrameElement.name = "_HTMLFrameElement";
  $desc = $collectedClasses._HTMLFrameElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HTMLFrameElement.prototype = $desc;
  function _HTMLFrameSetElement() {
  }
  _HTMLFrameSetElement.builtin$cls = "_HTMLFrameSetElement";
  if (!"name" in _HTMLFrameSetElement)
    _HTMLFrameSetElement.name = "_HTMLFrameSetElement";
  $desc = $collectedClasses._HTMLFrameSetElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HTMLFrameSetElement.prototype = $desc;
  function _HTMLMarqueeElement() {
  }
  _HTMLMarqueeElement.builtin$cls = "_HTMLMarqueeElement";
  if (!"name" in _HTMLMarqueeElement)
    _HTMLMarqueeElement.name = "_HTMLMarqueeElement";
  $desc = $collectedClasses._HTMLMarqueeElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HTMLMarqueeElement.prototype = $desc;
  function _MutationEvent() {
  }
  _MutationEvent.builtin$cls = "_MutationEvent";
  if (!"name" in _MutationEvent)
    _MutationEvent.name = "_MutationEvent";
  $desc = $collectedClasses._MutationEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _MutationEvent.prototype = $desc;
  function _NamedNodeMap() {
  }
  _NamedNodeMap.builtin$cls = "_NamedNodeMap";
  if (!"name" in _NamedNodeMap)
    _NamedNodeMap.name = "_NamedNodeMap";
  $desc = $collectedClasses._NamedNodeMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _NamedNodeMap.prototype = $desc;
  function _Notation() {
  }
  _Notation.builtin$cls = "_Notation";
  if (!"name" in _Notation)
    _Notation.name = "_Notation";
  $desc = $collectedClasses._Notation;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Notation.prototype = $desc;
  function _NotificationCenter() {
  }
  _NotificationCenter.builtin$cls = "_NotificationCenter";
  if (!"name" in _NotificationCenter)
    _NotificationCenter.name = "_NotificationCenter";
  $desc = $collectedClasses._NotificationCenter;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _NotificationCenter.prototype = $desc;
  function _PagePopupController() {
  }
  _PagePopupController.builtin$cls = "_PagePopupController";
  if (!"name" in _PagePopupController)
    _PagePopupController.name = "_PagePopupController";
  $desc = $collectedClasses._PagePopupController;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _PagePopupController.prototype = $desc;
  function _RGBColor() {
  }
  _RGBColor.builtin$cls = "_RGBColor";
  if (!"name" in _RGBColor)
    _RGBColor.name = "_RGBColor";
  $desc = $collectedClasses._RGBColor;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _RGBColor.prototype = $desc;
  function _Rect() {
  }
  _Rect.builtin$cls = "_Rect";
  if (!"name" in _Rect)
    _Rect.name = "_Rect";
  $desc = $collectedClasses._Rect;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Rect.prototype = $desc;
  function _SharedWorker() {
  }
  _SharedWorker.builtin$cls = "_SharedWorker";
  if (!"name" in _SharedWorker)
    _SharedWorker.name = "_SharedWorker";
  $desc = $collectedClasses._SharedWorker;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SharedWorker.prototype = $desc;
  function _SpeechInputResultList() {
  }
  _SpeechInputResultList.builtin$cls = "_SpeechInputResultList";
  if (!"name" in _SpeechInputResultList)
    _SpeechInputResultList.name = "_SpeechInputResultList";
  $desc = $collectedClasses._SpeechInputResultList;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SpeechInputResultList.prototype = $desc;
  function _SpeechRecognitionResultList() {
  }
  _SpeechRecognitionResultList.builtin$cls = "_SpeechRecognitionResultList";
  if (!"name" in _SpeechRecognitionResultList)
    _SpeechRecognitionResultList.name = "_SpeechRecognitionResultList";
  $desc = $collectedClasses._SpeechRecognitionResultList;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SpeechRecognitionResultList.prototype = $desc;
  function _StyleSheetList() {
  }
  _StyleSheetList.builtin$cls = "_StyleSheetList";
  if (!"name" in _StyleSheetList)
    _StyleSheetList.name = "_StyleSheetList";
  $desc = $collectedClasses._StyleSheetList;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StyleSheetList.prototype = $desc;
  function _SubtleCrypto() {
  }
  _SubtleCrypto.builtin$cls = "_SubtleCrypto";
  if (!"name" in _SubtleCrypto)
    _SubtleCrypto.name = "_SubtleCrypto";
  $desc = $collectedClasses._SubtleCrypto;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SubtleCrypto.prototype = $desc;
  function _WebKitCSSFilterValue() {
  }
  _WebKitCSSFilterValue.builtin$cls = "_WebKitCSSFilterValue";
  if (!"name" in _WebKitCSSFilterValue)
    _WebKitCSSFilterValue.name = "_WebKitCSSFilterValue";
  $desc = $collectedClasses._WebKitCSSFilterValue;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _WebKitCSSFilterValue.prototype = $desc;
  function _WebKitCSSMatrix() {
  }
  _WebKitCSSMatrix.builtin$cls = "_WebKitCSSMatrix";
  if (!"name" in _WebKitCSSMatrix)
    _WebKitCSSMatrix.name = "_WebKitCSSMatrix";
  $desc = $collectedClasses._WebKitCSSMatrix;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _WebKitCSSMatrix.prototype = $desc;
  function _WebKitCSSMixFunctionValue() {
  }
  _WebKitCSSMixFunctionValue.builtin$cls = "_WebKitCSSMixFunctionValue";
  if (!"name" in _WebKitCSSMixFunctionValue)
    _WebKitCSSMixFunctionValue.name = "_WebKitCSSMixFunctionValue";
  $desc = $collectedClasses._WebKitCSSMixFunctionValue;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _WebKitCSSMixFunctionValue.prototype = $desc;
  function _WebKitCSSTransformValue() {
  }
  _WebKitCSSTransformValue.builtin$cls = "_WebKitCSSTransformValue";
  if (!"name" in _WebKitCSSTransformValue)
    _WebKitCSSTransformValue.name = "_WebKitCSSTransformValue";
  $desc = $collectedClasses._WebKitCSSTransformValue;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _WebKitCSSTransformValue.prototype = $desc;
  function _WebKitMediaSource() {
  }
  _WebKitMediaSource.builtin$cls = "_WebKitMediaSource";
  if (!"name" in _WebKitMediaSource)
    _WebKitMediaSource.name = "_WebKitMediaSource";
  $desc = $collectedClasses._WebKitMediaSource;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _WebKitMediaSource.prototype = $desc;
  function _WebKitSourceBuffer() {
  }
  _WebKitSourceBuffer.builtin$cls = "_WebKitSourceBuffer";
  if (!"name" in _WebKitSourceBuffer)
    _WebKitSourceBuffer.name = "_WebKitSourceBuffer";
  $desc = $collectedClasses._WebKitSourceBuffer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _WebKitSourceBuffer.prototype = $desc;
  function _WebKitSourceBufferList() {
  }
  _WebKitSourceBufferList.builtin$cls = "_WebKitSourceBufferList";
  if (!"name" in _WebKitSourceBufferList)
    _WebKitSourceBufferList.name = "_WebKitSourceBufferList";
  $desc = $collectedClasses._WebKitSourceBufferList;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _WebKitSourceBufferList.prototype = $desc;
  function _WorkerLocation() {
  }
  _WorkerLocation.builtin$cls = "_WorkerLocation";
  if (!"name" in _WorkerLocation)
    _WorkerLocation.name = "_WorkerLocation";
  $desc = $collectedClasses._WorkerLocation;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _WorkerLocation.prototype = $desc;
  function _WorkerNavigator() {
  }
  _WorkerNavigator.builtin$cls = "_WorkerNavigator";
  if (!"name" in _WorkerNavigator)
    _WorkerNavigator.name = "_WorkerNavigator";
  $desc = $collectedClasses._WorkerNavigator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _WorkerNavigator.prototype = $desc;
  function _XMLHttpRequestProgressEvent() {
  }
  _XMLHttpRequestProgressEvent.builtin$cls = "_XMLHttpRequestProgressEvent";
  if (!"name" in _XMLHttpRequestProgressEvent)
    _XMLHttpRequestProgressEvent.name = "_XMLHttpRequestProgressEvent";
  $desc = $collectedClasses._XMLHttpRequestProgressEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _XMLHttpRequestProgressEvent.prototype = $desc;
  function Cursor() {
  }
  Cursor.builtin$cls = "Cursor";
  if (!"name" in Cursor)
    Cursor.name = "Cursor";
  $desc = $collectedClasses.Cursor;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Cursor.prototype = $desc;
  function CursorWithValue() {
  }
  CursorWithValue.builtin$cls = "CursorWithValue";
  if (!"name" in CursorWithValue)
    CursorWithValue.name = "CursorWithValue";
  $desc = $collectedClasses.CursorWithValue;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CursorWithValue.prototype = $desc;
  function Database() {
  }
  Database.builtin$cls = "Database";
  if (!"name" in Database)
    Database.name = "Database";
  $desc = $collectedClasses.Database;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Database.prototype = $desc;
  Database.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  function IdbFactory() {
  }
  IdbFactory.builtin$cls = "IdbFactory";
  if (!"name" in IdbFactory)
    IdbFactory.name = "IdbFactory";
  $desc = $collectedClasses.IdbFactory;
  if ($desc instanceof Array)
    $desc = $desc[1];
  IdbFactory.prototype = $desc;
  function Index() {
  }
  Index.builtin$cls = "Index";
  if (!"name" in Index)
    Index.name = "Index";
  $desc = $collectedClasses.Index;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Index.prototype = $desc;
  Index.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  function KeyRange() {
  }
  KeyRange.builtin$cls = "KeyRange";
  if (!"name" in KeyRange)
    KeyRange.name = "KeyRange";
  $desc = $collectedClasses.KeyRange;
  if ($desc instanceof Array)
    $desc = $desc[1];
  KeyRange.prototype = $desc;
  function ObjectStore() {
  }
  ObjectStore.builtin$cls = "ObjectStore";
  if (!"name" in ObjectStore)
    ObjectStore.name = "ObjectStore";
  $desc = $collectedClasses.ObjectStore;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ObjectStore.prototype = $desc;
  ObjectStore.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  function BoundClosure$i1(_self, __js_helper$_target, _receiver, __js_helper$_name) {
    this._self = _self;
    this.__js_helper$_target = __js_helper$_target;
    this._receiver = _receiver;
    this.__js_helper$_name = __js_helper$_name;
  }
  BoundClosure$i1.builtin$cls = "BoundClosure$i1";
  $desc = $collectedClasses.BoundClosure$i1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BoundClosure$i1.prototype = $desc;
  function OpenDBRequest() {
  }
  OpenDBRequest.builtin$cls = "OpenDBRequest";
  if (!"name" in OpenDBRequest)
    OpenDBRequest.name = "OpenDBRequest";
  $desc = $collectedClasses.OpenDBRequest;
  if ($desc instanceof Array)
    $desc = $desc[1];
  OpenDBRequest.prototype = $desc;
  function Request() {
  }
  Request.builtin$cls = "Request";
  if (!"name" in Request)
    Request.name = "Request";
  $desc = $collectedClasses.Request;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Request.prototype = $desc;
  Request.prototype.get$error = function(receiver) {
    return receiver.error;
  };
  function Transaction() {
  }
  Transaction.builtin$cls = "Transaction";
  if (!"name" in Transaction)
    Transaction.name = "Transaction";
  $desc = $collectedClasses.Transaction;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Transaction.prototype = $desc;
  Transaction.prototype.get$error = function(receiver) {
    return receiver.error;
  };
  function VersionChangeEvent() {
  }
  VersionChangeEvent.builtin$cls = "VersionChangeEvent";
  if (!"name" in VersionChangeEvent)
    VersionChangeEvent.name = "VersionChangeEvent";
  $desc = $collectedClasses.VersionChangeEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  VersionChangeEvent.prototype = $desc;
  function _IDBAny() {
  }
  _IDBAny.builtin$cls = "_IDBAny";
  if (!"name" in _IDBAny)
    _IDBAny.name = "_IDBAny";
  $desc = $collectedClasses._IDBAny;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _IDBAny.prototype = $desc;
  function AElement() {
  }
  AElement.builtin$cls = "AElement";
  if (!"name" in AElement)
    AElement.name = "AElement";
  $desc = $collectedClasses.AElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AElement.prototype = $desc;
  function AltGlyphElement() {
  }
  AltGlyphElement.builtin$cls = "AltGlyphElement";
  if (!"name" in AltGlyphElement)
    AltGlyphElement.name = "AltGlyphElement";
  $desc = $collectedClasses.AltGlyphElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AltGlyphElement.prototype = $desc;
  function Angle() {
  }
  Angle.builtin$cls = "Angle";
  if (!"name" in Angle)
    Angle.name = "Angle";
  $desc = $collectedClasses.Angle;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Angle.prototype = $desc;
  Angle.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  function AnimateElement() {
  }
  AnimateElement.builtin$cls = "AnimateElement";
  if (!"name" in AnimateElement)
    AnimateElement.name = "AnimateElement";
  $desc = $collectedClasses.AnimateElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimateElement.prototype = $desc;
  function AnimateMotionElement() {
  }
  AnimateMotionElement.builtin$cls = "AnimateMotionElement";
  if (!"name" in AnimateMotionElement)
    AnimateMotionElement.name = "AnimateMotionElement";
  $desc = $collectedClasses.AnimateMotionElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimateMotionElement.prototype = $desc;
  function AnimateTransformElement() {
  }
  AnimateTransformElement.builtin$cls = "AnimateTransformElement";
  if (!"name" in AnimateTransformElement)
    AnimateTransformElement.name = "AnimateTransformElement";
  $desc = $collectedClasses.AnimateTransformElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimateTransformElement.prototype = $desc;
  function AnimatedAngle() {
  }
  AnimatedAngle.builtin$cls = "AnimatedAngle";
  if (!"name" in AnimatedAngle)
    AnimatedAngle.name = "AnimatedAngle";
  $desc = $collectedClasses.AnimatedAngle;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimatedAngle.prototype = $desc;
  function AnimatedBoolean() {
  }
  AnimatedBoolean.builtin$cls = "AnimatedBoolean";
  if (!"name" in AnimatedBoolean)
    AnimatedBoolean.name = "AnimatedBoolean";
  $desc = $collectedClasses.AnimatedBoolean;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimatedBoolean.prototype = $desc;
  function AnimatedEnumeration() {
  }
  AnimatedEnumeration.builtin$cls = "AnimatedEnumeration";
  if (!"name" in AnimatedEnumeration)
    AnimatedEnumeration.name = "AnimatedEnumeration";
  $desc = $collectedClasses.AnimatedEnumeration;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimatedEnumeration.prototype = $desc;
  function AnimatedInteger() {
  }
  AnimatedInteger.builtin$cls = "AnimatedInteger";
  if (!"name" in AnimatedInteger)
    AnimatedInteger.name = "AnimatedInteger";
  $desc = $collectedClasses.AnimatedInteger;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimatedInteger.prototype = $desc;
  function AnimatedLength() {
  }
  AnimatedLength.builtin$cls = "AnimatedLength";
  if (!"name" in AnimatedLength)
    AnimatedLength.name = "AnimatedLength";
  $desc = $collectedClasses.AnimatedLength;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimatedLength.prototype = $desc;
  function AnimatedLengthList() {
  }
  AnimatedLengthList.builtin$cls = "AnimatedLengthList";
  if (!"name" in AnimatedLengthList)
    AnimatedLengthList.name = "AnimatedLengthList";
  $desc = $collectedClasses.AnimatedLengthList;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimatedLengthList.prototype = $desc;
  function AnimatedNumber() {
  }
  AnimatedNumber.builtin$cls = "AnimatedNumber";
  if (!"name" in AnimatedNumber)
    AnimatedNumber.name = "AnimatedNumber";
  $desc = $collectedClasses.AnimatedNumber;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimatedNumber.prototype = $desc;
  function AnimatedNumberList() {
  }
  AnimatedNumberList.builtin$cls = "AnimatedNumberList";
  if (!"name" in AnimatedNumberList)
    AnimatedNumberList.name = "AnimatedNumberList";
  $desc = $collectedClasses.AnimatedNumberList;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimatedNumberList.prototype = $desc;
  function AnimatedPreserveAspectRatio() {
  }
  AnimatedPreserveAspectRatio.builtin$cls = "AnimatedPreserveAspectRatio";
  if (!"name" in AnimatedPreserveAspectRatio)
    AnimatedPreserveAspectRatio.name = "AnimatedPreserveAspectRatio";
  $desc = $collectedClasses.AnimatedPreserveAspectRatio;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimatedPreserveAspectRatio.prototype = $desc;
  function AnimatedRect() {
  }
  AnimatedRect.builtin$cls = "AnimatedRect";
  if (!"name" in AnimatedRect)
    AnimatedRect.name = "AnimatedRect";
  $desc = $collectedClasses.AnimatedRect;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimatedRect.prototype = $desc;
  function AnimatedString() {
  }
  AnimatedString.builtin$cls = "AnimatedString";
  if (!"name" in AnimatedString)
    AnimatedString.name = "AnimatedString";
  $desc = $collectedClasses.AnimatedString;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimatedString.prototype = $desc;
  function AnimatedTransformList() {
  }
  AnimatedTransformList.builtin$cls = "AnimatedTransformList";
  if (!"name" in AnimatedTransformList)
    AnimatedTransformList.name = "AnimatedTransformList";
  $desc = $collectedClasses.AnimatedTransformList;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimatedTransformList.prototype = $desc;
  function AnimationElement() {
  }
  AnimationElement.builtin$cls = "AnimationElement";
  if (!"name" in AnimationElement)
    AnimationElement.name = "AnimationElement";
  $desc = $collectedClasses.AnimationElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimationElement.prototype = $desc;
  function CircleElement() {
  }
  CircleElement.builtin$cls = "CircleElement";
  if (!"name" in CircleElement)
    CircleElement.name = "CircleElement";
  $desc = $collectedClasses.CircleElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CircleElement.prototype = $desc;
  function ClipPathElement() {
  }
  ClipPathElement.builtin$cls = "ClipPathElement";
  if (!"name" in ClipPathElement)
    ClipPathElement.name = "ClipPathElement";
  $desc = $collectedClasses.ClipPathElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ClipPathElement.prototype = $desc;
  function DefsElement() {
  }
  DefsElement.builtin$cls = "DefsElement";
  if (!"name" in DefsElement)
    DefsElement.name = "DefsElement";
  $desc = $collectedClasses.DefsElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DefsElement.prototype = $desc;
  function DescElement() {
  }
  DescElement.builtin$cls = "DescElement";
  if (!"name" in DescElement)
    DescElement.name = "DescElement";
  $desc = $collectedClasses.DescElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DescElement.prototype = $desc;
  function ElementInstance() {
  }
  ElementInstance.builtin$cls = "ElementInstance";
  if (!"name" in ElementInstance)
    ElementInstance.name = "ElementInstance";
  $desc = $collectedClasses.ElementInstance;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ElementInstance.prototype = $desc;
  function EllipseElement() {
  }
  EllipseElement.builtin$cls = "EllipseElement";
  if (!"name" in EllipseElement)
    EllipseElement.name = "EllipseElement";
  $desc = $collectedClasses.EllipseElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  EllipseElement.prototype = $desc;
  function FEBlendElement() {
  }
  FEBlendElement.builtin$cls = "FEBlendElement";
  if (!"name" in FEBlendElement)
    FEBlendElement.name = "FEBlendElement";
  $desc = $collectedClasses.FEBlendElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEBlendElement.prototype = $desc;
  FEBlendElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  FEBlendElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  FEBlendElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEBlendElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEColorMatrixElement() {
  }
  FEColorMatrixElement.builtin$cls = "FEColorMatrixElement";
  if (!"name" in FEColorMatrixElement)
    FEColorMatrixElement.name = "FEColorMatrixElement";
  $desc = $collectedClasses.FEColorMatrixElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEColorMatrixElement.prototype = $desc;
  FEColorMatrixElement.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  FEColorMatrixElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  FEColorMatrixElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  FEColorMatrixElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEColorMatrixElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEComponentTransferElement() {
  }
  FEComponentTransferElement.builtin$cls = "FEComponentTransferElement";
  if (!"name" in FEComponentTransferElement)
    FEComponentTransferElement.name = "FEComponentTransferElement";
  $desc = $collectedClasses.FEComponentTransferElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEComponentTransferElement.prototype = $desc;
  FEComponentTransferElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  FEComponentTransferElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  FEComponentTransferElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEComponentTransferElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FECompositeElement() {
  }
  FECompositeElement.builtin$cls = "FECompositeElement";
  if (!"name" in FECompositeElement)
    FECompositeElement.name = "FECompositeElement";
  $desc = $collectedClasses.FECompositeElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FECompositeElement.prototype = $desc;
  FECompositeElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  FECompositeElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  FECompositeElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FECompositeElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEConvolveMatrixElement() {
  }
  FEConvolveMatrixElement.builtin$cls = "FEConvolveMatrixElement";
  if (!"name" in FEConvolveMatrixElement)
    FEConvolveMatrixElement.name = "FEConvolveMatrixElement";
  $desc = $collectedClasses.FEConvolveMatrixElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEConvolveMatrixElement.prototype = $desc;
  FEConvolveMatrixElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  FEConvolveMatrixElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  FEConvolveMatrixElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEConvolveMatrixElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEDiffuseLightingElement() {
  }
  FEDiffuseLightingElement.builtin$cls = "FEDiffuseLightingElement";
  if (!"name" in FEDiffuseLightingElement)
    FEDiffuseLightingElement.name = "FEDiffuseLightingElement";
  $desc = $collectedClasses.FEDiffuseLightingElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEDiffuseLightingElement.prototype = $desc;
  FEDiffuseLightingElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  FEDiffuseLightingElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  FEDiffuseLightingElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEDiffuseLightingElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEDisplacementMapElement() {
  }
  FEDisplacementMapElement.builtin$cls = "FEDisplacementMapElement";
  if (!"name" in FEDisplacementMapElement)
    FEDisplacementMapElement.name = "FEDisplacementMapElement";
  $desc = $collectedClasses.FEDisplacementMapElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEDisplacementMapElement.prototype = $desc;
  FEDisplacementMapElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  FEDisplacementMapElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  FEDisplacementMapElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEDisplacementMapElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEDistantLightElement() {
  }
  FEDistantLightElement.builtin$cls = "FEDistantLightElement";
  if (!"name" in FEDistantLightElement)
    FEDistantLightElement.name = "FEDistantLightElement";
  $desc = $collectedClasses.FEDistantLightElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEDistantLightElement.prototype = $desc;
  function FEFloodElement() {
  }
  FEFloodElement.builtin$cls = "FEFloodElement";
  if (!"name" in FEFloodElement)
    FEFloodElement.name = "FEFloodElement";
  $desc = $collectedClasses.FEFloodElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEFloodElement.prototype = $desc;
  FEFloodElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  FEFloodElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  FEFloodElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEFloodElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEFuncAElement() {
  }
  FEFuncAElement.builtin$cls = "FEFuncAElement";
  if (!"name" in FEFuncAElement)
    FEFuncAElement.name = "FEFuncAElement";
  $desc = $collectedClasses.FEFuncAElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEFuncAElement.prototype = $desc;
  function FEFuncBElement() {
  }
  FEFuncBElement.builtin$cls = "FEFuncBElement";
  if (!"name" in FEFuncBElement)
    FEFuncBElement.name = "FEFuncBElement";
  $desc = $collectedClasses.FEFuncBElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEFuncBElement.prototype = $desc;
  function FEFuncGElement() {
  }
  FEFuncGElement.builtin$cls = "FEFuncGElement";
  if (!"name" in FEFuncGElement)
    FEFuncGElement.name = "FEFuncGElement";
  $desc = $collectedClasses.FEFuncGElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEFuncGElement.prototype = $desc;
  function FEFuncRElement() {
  }
  FEFuncRElement.builtin$cls = "FEFuncRElement";
  if (!"name" in FEFuncRElement)
    FEFuncRElement.name = "FEFuncRElement";
  $desc = $collectedClasses.FEFuncRElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEFuncRElement.prototype = $desc;
  function FEGaussianBlurElement() {
  }
  FEGaussianBlurElement.builtin$cls = "FEGaussianBlurElement";
  if (!"name" in FEGaussianBlurElement)
    FEGaussianBlurElement.name = "FEGaussianBlurElement";
  $desc = $collectedClasses.FEGaussianBlurElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEGaussianBlurElement.prototype = $desc;
  FEGaussianBlurElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  FEGaussianBlurElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  FEGaussianBlurElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEGaussianBlurElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEImageElement() {
  }
  FEImageElement.builtin$cls = "FEImageElement";
  if (!"name" in FEImageElement)
    FEImageElement.name = "FEImageElement";
  $desc = $collectedClasses.FEImageElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEImageElement.prototype = $desc;
  FEImageElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  FEImageElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  FEImageElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEImageElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEMergeElement() {
  }
  FEMergeElement.builtin$cls = "FEMergeElement";
  if (!"name" in FEMergeElement)
    FEMergeElement.name = "FEMergeElement";
  $desc = $collectedClasses.FEMergeElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEMergeElement.prototype = $desc;
  FEMergeElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  FEMergeElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  FEMergeElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEMergeElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEMergeNodeElement() {
  }
  FEMergeNodeElement.builtin$cls = "FEMergeNodeElement";
  if (!"name" in FEMergeNodeElement)
    FEMergeNodeElement.name = "FEMergeNodeElement";
  $desc = $collectedClasses.FEMergeNodeElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEMergeNodeElement.prototype = $desc;
  function FEMorphologyElement() {
  }
  FEMorphologyElement.builtin$cls = "FEMorphologyElement";
  if (!"name" in FEMorphologyElement)
    FEMorphologyElement.name = "FEMorphologyElement";
  $desc = $collectedClasses.FEMorphologyElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEMorphologyElement.prototype = $desc;
  FEMorphologyElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  FEMorphologyElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  FEMorphologyElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEMorphologyElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEOffsetElement() {
  }
  FEOffsetElement.builtin$cls = "FEOffsetElement";
  if (!"name" in FEOffsetElement)
    FEOffsetElement.name = "FEOffsetElement";
  $desc = $collectedClasses.FEOffsetElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEOffsetElement.prototype = $desc;
  FEOffsetElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  FEOffsetElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  FEOffsetElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEOffsetElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEPointLightElement() {
  }
  FEPointLightElement.builtin$cls = "FEPointLightElement";
  if (!"name" in FEPointLightElement)
    FEPointLightElement.name = "FEPointLightElement";
  $desc = $collectedClasses.FEPointLightElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEPointLightElement.prototype = $desc;
  FEPointLightElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEPointLightElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FESpecularLightingElement() {
  }
  FESpecularLightingElement.builtin$cls = "FESpecularLightingElement";
  if (!"name" in FESpecularLightingElement)
    FESpecularLightingElement.name = "FESpecularLightingElement";
  $desc = $collectedClasses.FESpecularLightingElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FESpecularLightingElement.prototype = $desc;
  FESpecularLightingElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  FESpecularLightingElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  FESpecularLightingElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FESpecularLightingElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FESpotLightElement() {
  }
  FESpotLightElement.builtin$cls = "FESpotLightElement";
  if (!"name" in FESpotLightElement)
    FESpotLightElement.name = "FESpotLightElement";
  $desc = $collectedClasses.FESpotLightElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FESpotLightElement.prototype = $desc;
  FESpotLightElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FESpotLightElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FETileElement() {
  }
  FETileElement.builtin$cls = "FETileElement";
  if (!"name" in FETileElement)
    FETileElement.name = "FETileElement";
  $desc = $collectedClasses.FETileElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FETileElement.prototype = $desc;
  FETileElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  FETileElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  FETileElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FETileElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FETurbulenceElement() {
  }
  FETurbulenceElement.builtin$cls = "FETurbulenceElement";
  if (!"name" in FETurbulenceElement)
    FETurbulenceElement.name = "FETurbulenceElement";
  $desc = $collectedClasses.FETurbulenceElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FETurbulenceElement.prototype = $desc;
  FETurbulenceElement.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  FETurbulenceElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  FETurbulenceElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  FETurbulenceElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FETurbulenceElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FilterElement() {
  }
  FilterElement.builtin$cls = "FilterElement";
  if (!"name" in FilterElement)
    FilterElement.name = "FilterElement";
  $desc = $collectedClasses.FilterElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FilterElement.prototype = $desc;
  FilterElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  FilterElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  FilterElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FilterElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function ForeignObjectElement() {
  }
  ForeignObjectElement.builtin$cls = "ForeignObjectElement";
  if (!"name" in ForeignObjectElement)
    ForeignObjectElement.name = "ForeignObjectElement";
  $desc = $collectedClasses.ForeignObjectElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ForeignObjectElement.prototype = $desc;
  ForeignObjectElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  ForeignObjectElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  ForeignObjectElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  ForeignObjectElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function GElement() {
  }
  GElement.builtin$cls = "GElement";
  if (!"name" in GElement)
    GElement.name = "GElement";
  $desc = $collectedClasses.GElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  GElement.prototype = $desc;
  function GraphicsElement() {
  }
  GraphicsElement.builtin$cls = "GraphicsElement";
  if (!"name" in GraphicsElement)
    GraphicsElement.name = "GraphicsElement";
  $desc = $collectedClasses.GraphicsElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  GraphicsElement.prototype = $desc;
  function ImageElement0() {
  }
  ImageElement0.builtin$cls = "ImageElement0";
  if (!"name" in ImageElement0)
    ImageElement0.name = "ImageElement0";
  $desc = $collectedClasses.ImageElement0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ImageElement0.prototype = $desc;
  ImageElement0.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  ImageElement0.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  ImageElement0.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  ImageElement0.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function Length() {
  }
  Length.builtin$cls = "Length";
  if (!"name" in Length)
    Length.name = "Length";
  $desc = $collectedClasses.Length;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Length.prototype = $desc;
  Length.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  function LengthList() {
  }
  LengthList.builtin$cls = "LengthList";
  if (!"name" in LengthList)
    LengthList.name = "LengthList";
  $desc = $collectedClasses.LengthList;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LengthList.prototype = $desc;
  function LineElement() {
  }
  LineElement.builtin$cls = "LineElement";
  if (!"name" in LineElement)
    LineElement.name = "LineElement";
  $desc = $collectedClasses.LineElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LineElement.prototype = $desc;
  function LinearGradientElement() {
  }
  LinearGradientElement.builtin$cls = "LinearGradientElement";
  if (!"name" in LinearGradientElement)
    LinearGradientElement.name = "LinearGradientElement";
  $desc = $collectedClasses.LinearGradientElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LinearGradientElement.prototype = $desc;
  function MarkerElement() {
  }
  MarkerElement.builtin$cls = "MarkerElement";
  if (!"name" in MarkerElement)
    MarkerElement.name = "MarkerElement";
  $desc = $collectedClasses.MarkerElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MarkerElement.prototype = $desc;
  function MaskElement() {
  }
  MaskElement.builtin$cls = "MaskElement";
  if (!"name" in MaskElement)
    MaskElement.name = "MaskElement";
  $desc = $collectedClasses.MaskElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MaskElement.prototype = $desc;
  MaskElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  MaskElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  MaskElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  MaskElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function Matrix() {
  }
  Matrix.builtin$cls = "Matrix";
  if (!"name" in Matrix)
    Matrix.name = "Matrix";
  $desc = $collectedClasses.Matrix;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Matrix.prototype = $desc;
  function MetadataElement() {
  }
  MetadataElement.builtin$cls = "MetadataElement";
  if (!"name" in MetadataElement)
    MetadataElement.name = "MetadataElement";
  $desc = $collectedClasses.MetadataElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MetadataElement.prototype = $desc;
  function Number() {
  }
  Number.builtin$cls = "Number";
  if (!"name" in Number)
    Number.name = "Number";
  $desc = $collectedClasses.Number;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Number.prototype = $desc;
  Number.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  function NumberList() {
  }
  NumberList.builtin$cls = "NumberList";
  if (!"name" in NumberList)
    NumberList.name = "NumberList";
  $desc = $collectedClasses.NumberList;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NumberList.prototype = $desc;
  function PathElement() {
  }
  PathElement.builtin$cls = "PathElement";
  if (!"name" in PathElement)
    PathElement.name = "PathElement";
  $desc = $collectedClasses.PathElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PathElement.prototype = $desc;
  function PathSeg() {
  }
  PathSeg.builtin$cls = "PathSeg";
  if (!"name" in PathSeg)
    PathSeg.name = "PathSeg";
  $desc = $collectedClasses.PathSeg;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PathSeg.prototype = $desc;
  function PathSegArcAbs() {
  }
  PathSegArcAbs.builtin$cls = "PathSegArcAbs";
  if (!"name" in PathSegArcAbs)
    PathSegArcAbs.name = "PathSegArcAbs";
  $desc = $collectedClasses.PathSegArcAbs;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PathSegArcAbs.prototype = $desc;
  PathSegArcAbs.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  PathSegArcAbs.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function PathSegArcRel() {
  }
  PathSegArcRel.builtin$cls = "PathSegArcRel";
  if (!"name" in PathSegArcRel)
    PathSegArcRel.name = "PathSegArcRel";
  $desc = $collectedClasses.PathSegArcRel;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PathSegArcRel.prototype = $desc;
  PathSegArcRel.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  PathSegArcRel.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function PathSegClosePath() {
  }
  PathSegClosePath.builtin$cls = "PathSegClosePath";
  if (!"name" in PathSegClosePath)
    PathSegClosePath.name = "PathSegClosePath";
  $desc = $collectedClasses.PathSegClosePath;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PathSegClosePath.prototype = $desc;
  function PathSegCurvetoCubicAbs() {
  }
  PathSegCurvetoCubicAbs.builtin$cls = "PathSegCurvetoCubicAbs";
  if (!"name" in PathSegCurvetoCubicAbs)
    PathSegCurvetoCubicAbs.name = "PathSegCurvetoCubicAbs";
  $desc = $collectedClasses.PathSegCurvetoCubicAbs;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PathSegCurvetoCubicAbs.prototype = $desc;
  PathSegCurvetoCubicAbs.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  PathSegCurvetoCubicAbs.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function PathSegCurvetoCubicRel() {
  }
  PathSegCurvetoCubicRel.builtin$cls = "PathSegCurvetoCubicRel";
  if (!"name" in PathSegCurvetoCubicRel)
    PathSegCurvetoCubicRel.name = "PathSegCurvetoCubicRel";
  $desc = $collectedClasses.PathSegCurvetoCubicRel;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PathSegCurvetoCubicRel.prototype = $desc;
  PathSegCurvetoCubicRel.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  PathSegCurvetoCubicRel.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function PathSegCurvetoCubicSmoothAbs() {
  }
  PathSegCurvetoCubicSmoothAbs.builtin$cls = "PathSegCurvetoCubicSmoothAbs";
  if (!"name" in PathSegCurvetoCubicSmoothAbs)
    PathSegCurvetoCubicSmoothAbs.name = "PathSegCurvetoCubicSmoothAbs";
  $desc = $collectedClasses.PathSegCurvetoCubicSmoothAbs;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PathSegCurvetoCubicSmoothAbs.prototype = $desc;
  PathSegCurvetoCubicSmoothAbs.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  PathSegCurvetoCubicSmoothAbs.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function PathSegCurvetoCubicSmoothRel() {
  }
  PathSegCurvetoCubicSmoothRel.builtin$cls = "PathSegCurvetoCubicSmoothRel";
  if (!"name" in PathSegCurvetoCubicSmoothRel)
    PathSegCurvetoCubicSmoothRel.name = "PathSegCurvetoCubicSmoothRel";
  $desc = $collectedClasses.PathSegCurvetoCubicSmoothRel;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PathSegCurvetoCubicSmoothRel.prototype = $desc;
  PathSegCurvetoCubicSmoothRel.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  PathSegCurvetoCubicSmoothRel.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function PathSegCurvetoQuadraticAbs() {
  }
  PathSegCurvetoQuadraticAbs.builtin$cls = "PathSegCurvetoQuadraticAbs";
  if (!"name" in PathSegCurvetoQuadraticAbs)
    PathSegCurvetoQuadraticAbs.name = "PathSegCurvetoQuadraticAbs";
  $desc = $collectedClasses.PathSegCurvetoQuadraticAbs;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PathSegCurvetoQuadraticAbs.prototype = $desc;
  PathSegCurvetoQuadraticAbs.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  PathSegCurvetoQuadraticAbs.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function PathSegCurvetoQuadraticRel() {
  }
  PathSegCurvetoQuadraticRel.builtin$cls = "PathSegCurvetoQuadraticRel";
  if (!"name" in PathSegCurvetoQuadraticRel)
    PathSegCurvetoQuadraticRel.name = "PathSegCurvetoQuadraticRel";
  $desc = $collectedClasses.PathSegCurvetoQuadraticRel;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PathSegCurvetoQuadraticRel.prototype = $desc;
  PathSegCurvetoQuadraticRel.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  PathSegCurvetoQuadraticRel.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function PathSegCurvetoQuadraticSmoothAbs() {
  }
  PathSegCurvetoQuadraticSmoothAbs.builtin$cls = "PathSegCurvetoQuadraticSmoothAbs";
  if (!"name" in PathSegCurvetoQuadraticSmoothAbs)
    PathSegCurvetoQuadraticSmoothAbs.name = "PathSegCurvetoQuadraticSmoothAbs";
  $desc = $collectedClasses.PathSegCurvetoQuadraticSmoothAbs;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PathSegCurvetoQuadraticSmoothAbs.prototype = $desc;
  PathSegCurvetoQuadraticSmoothAbs.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  PathSegCurvetoQuadraticSmoothAbs.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function PathSegCurvetoQuadraticSmoothRel() {
  }
  PathSegCurvetoQuadraticSmoothRel.builtin$cls = "PathSegCurvetoQuadraticSmoothRel";
  if (!"name" in PathSegCurvetoQuadraticSmoothRel)
    PathSegCurvetoQuadraticSmoothRel.name = "PathSegCurvetoQuadraticSmoothRel";
  $desc = $collectedClasses.PathSegCurvetoQuadraticSmoothRel;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PathSegCurvetoQuadraticSmoothRel.prototype = $desc;
  PathSegCurvetoQuadraticSmoothRel.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  PathSegCurvetoQuadraticSmoothRel.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function PathSegLinetoAbs() {
  }
  PathSegLinetoAbs.builtin$cls = "PathSegLinetoAbs";
  if (!"name" in PathSegLinetoAbs)
    PathSegLinetoAbs.name = "PathSegLinetoAbs";
  $desc = $collectedClasses.PathSegLinetoAbs;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PathSegLinetoAbs.prototype = $desc;
  PathSegLinetoAbs.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  PathSegLinetoAbs.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function PathSegLinetoHorizontalAbs() {
  }
  PathSegLinetoHorizontalAbs.builtin$cls = "PathSegLinetoHorizontalAbs";
  if (!"name" in PathSegLinetoHorizontalAbs)
    PathSegLinetoHorizontalAbs.name = "PathSegLinetoHorizontalAbs";
  $desc = $collectedClasses.PathSegLinetoHorizontalAbs;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PathSegLinetoHorizontalAbs.prototype = $desc;
  PathSegLinetoHorizontalAbs.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  function PathSegLinetoHorizontalRel() {
  }
  PathSegLinetoHorizontalRel.builtin$cls = "PathSegLinetoHorizontalRel";
  if (!"name" in PathSegLinetoHorizontalRel)
    PathSegLinetoHorizontalRel.name = "PathSegLinetoHorizontalRel";
  $desc = $collectedClasses.PathSegLinetoHorizontalRel;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PathSegLinetoHorizontalRel.prototype = $desc;
  PathSegLinetoHorizontalRel.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  function PathSegLinetoRel() {
  }
  PathSegLinetoRel.builtin$cls = "PathSegLinetoRel";
  if (!"name" in PathSegLinetoRel)
    PathSegLinetoRel.name = "PathSegLinetoRel";
  $desc = $collectedClasses.PathSegLinetoRel;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PathSegLinetoRel.prototype = $desc;
  PathSegLinetoRel.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  PathSegLinetoRel.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function PathSegLinetoVerticalAbs() {
  }
  PathSegLinetoVerticalAbs.builtin$cls = "PathSegLinetoVerticalAbs";
  if (!"name" in PathSegLinetoVerticalAbs)
    PathSegLinetoVerticalAbs.name = "PathSegLinetoVerticalAbs";
  $desc = $collectedClasses.PathSegLinetoVerticalAbs;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PathSegLinetoVerticalAbs.prototype = $desc;
  PathSegLinetoVerticalAbs.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function PathSegLinetoVerticalRel() {
  }
  PathSegLinetoVerticalRel.builtin$cls = "PathSegLinetoVerticalRel";
  if (!"name" in PathSegLinetoVerticalRel)
    PathSegLinetoVerticalRel.name = "PathSegLinetoVerticalRel";
  $desc = $collectedClasses.PathSegLinetoVerticalRel;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PathSegLinetoVerticalRel.prototype = $desc;
  PathSegLinetoVerticalRel.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function PathSegList() {
  }
  PathSegList.builtin$cls = "PathSegList";
  if (!"name" in PathSegList)
    PathSegList.name = "PathSegList";
  $desc = $collectedClasses.PathSegList;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PathSegList.prototype = $desc;
  function PathSegMovetoAbs() {
  }
  PathSegMovetoAbs.builtin$cls = "PathSegMovetoAbs";
  if (!"name" in PathSegMovetoAbs)
    PathSegMovetoAbs.name = "PathSegMovetoAbs";
  $desc = $collectedClasses.PathSegMovetoAbs;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PathSegMovetoAbs.prototype = $desc;
  PathSegMovetoAbs.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  PathSegMovetoAbs.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function PathSegMovetoRel() {
  }
  PathSegMovetoRel.builtin$cls = "PathSegMovetoRel";
  if (!"name" in PathSegMovetoRel)
    PathSegMovetoRel.name = "PathSegMovetoRel";
  $desc = $collectedClasses.PathSegMovetoRel;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PathSegMovetoRel.prototype = $desc;
  PathSegMovetoRel.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  PathSegMovetoRel.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function PatternElement() {
  }
  PatternElement.builtin$cls = "PatternElement";
  if (!"name" in PatternElement)
    PatternElement.name = "PatternElement";
  $desc = $collectedClasses.PatternElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PatternElement.prototype = $desc;
  PatternElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  PatternElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  PatternElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  PatternElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function Point0() {
  }
  Point0.builtin$cls = "Point0";
  if (!"name" in Point0)
    Point0.name = "Point0";
  $desc = $collectedClasses.Point0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Point0.prototype = $desc;
  Point0.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  Point0.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function PointList() {
  }
  PointList.builtin$cls = "PointList";
  if (!"name" in PointList)
    PointList.name = "PointList";
  $desc = $collectedClasses.PointList;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PointList.prototype = $desc;
  function PolygonElement() {
  }
  PolygonElement.builtin$cls = "PolygonElement";
  if (!"name" in PolygonElement)
    PolygonElement.name = "PolygonElement";
  $desc = $collectedClasses.PolygonElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PolygonElement.prototype = $desc;
  function PolylineElement() {
  }
  PolylineElement.builtin$cls = "PolylineElement";
  if (!"name" in PolylineElement)
    PolylineElement.name = "PolylineElement";
  $desc = $collectedClasses.PolylineElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PolylineElement.prototype = $desc;
  function PreserveAspectRatio() {
  }
  PreserveAspectRatio.builtin$cls = "PreserveAspectRatio";
  if (!"name" in PreserveAspectRatio)
    PreserveAspectRatio.name = "PreserveAspectRatio";
  $desc = $collectedClasses.PreserveAspectRatio;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PreserveAspectRatio.prototype = $desc;
  function RadialGradientElement() {
  }
  RadialGradientElement.builtin$cls = "RadialGradientElement";
  if (!"name" in RadialGradientElement)
    RadialGradientElement.name = "RadialGradientElement";
  $desc = $collectedClasses.RadialGradientElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RadialGradientElement.prototype = $desc;
  function Rect() {
  }
  Rect.builtin$cls = "Rect";
  if (!"name" in Rect)
    Rect.name = "Rect";
  $desc = $collectedClasses.Rect;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Rect.prototype = $desc;
  Rect.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  Rect.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function RectElement() {
  }
  RectElement.builtin$cls = "RectElement";
  if (!"name" in RectElement)
    RectElement.name = "RectElement";
  $desc = $collectedClasses.RectElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RectElement.prototype = $desc;
  RectElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  RectElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  RectElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  RectElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function RenderingIntent() {
  }
  RenderingIntent.builtin$cls = "RenderingIntent";
  if (!"name" in RenderingIntent)
    RenderingIntent.name = "RenderingIntent";
  $desc = $collectedClasses.RenderingIntent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RenderingIntent.prototype = $desc;
  function ScriptElement0() {
  }
  ScriptElement0.builtin$cls = "ScriptElement0";
  if (!"name" in ScriptElement0)
    ScriptElement0.name = "ScriptElement0";
  $desc = $collectedClasses.ScriptElement0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ScriptElement0.prototype = $desc;
  ScriptElement0.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  function SetElement() {
  }
  SetElement.builtin$cls = "SetElement";
  if (!"name" in SetElement)
    SetElement.name = "SetElement";
  $desc = $collectedClasses.SetElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SetElement.prototype = $desc;
  function StopElement() {
  }
  StopElement.builtin$cls = "StopElement";
  if (!"name" in StopElement)
    StopElement.name = "StopElement";
  $desc = $collectedClasses.StopElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StopElement.prototype = $desc;
  function StringList() {
  }
  StringList.builtin$cls = "StringList";
  if (!"name" in StringList)
    StringList.name = "StringList";
  $desc = $collectedClasses.StringList;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StringList.prototype = $desc;
  function StyleElement0() {
  }
  StyleElement0.builtin$cls = "StyleElement0";
  if (!"name" in StyleElement0)
    StyleElement0.name = "StyleElement0";
  $desc = $collectedClasses.StyleElement0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StyleElement0.prototype = $desc;
  StyleElement0.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  function SvgDocument() {
  }
  SvgDocument.builtin$cls = "SvgDocument";
  if (!"name" in SvgDocument)
    SvgDocument.name = "SvgDocument";
  $desc = $collectedClasses.SvgDocument;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SvgDocument.prototype = $desc;
  function SvgElement() {
  }
  SvgElement.builtin$cls = "SvgElement";
  if (!"name" in SvgElement)
    SvgElement.name = "SvgElement";
  $desc = $collectedClasses.SvgElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SvgElement.prototype = $desc;
  function SvgSvgElement() {
  }
  SvgSvgElement.builtin$cls = "SvgSvgElement";
  if (!"name" in SvgSvgElement)
    SvgSvgElement.name = "SvgSvgElement";
  $desc = $collectedClasses.SvgSvgElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SvgSvgElement.prototype = $desc;
  SvgSvgElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  SvgSvgElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  SvgSvgElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  SvgSvgElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function SwitchElement() {
  }
  SwitchElement.builtin$cls = "SwitchElement";
  if (!"name" in SwitchElement)
    SwitchElement.name = "SwitchElement";
  $desc = $collectedClasses.SwitchElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SwitchElement.prototype = $desc;
  function SymbolElement() {
  }
  SymbolElement.builtin$cls = "SymbolElement";
  if (!"name" in SymbolElement)
    SymbolElement.name = "SymbolElement";
  $desc = $collectedClasses.SymbolElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SymbolElement.prototype = $desc;
  function TSpanElement() {
  }
  TSpanElement.builtin$cls = "TSpanElement";
  if (!"name" in TSpanElement)
    TSpanElement.name = "TSpanElement";
  $desc = $collectedClasses.TSpanElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TSpanElement.prototype = $desc;
  function TextContentElement() {
  }
  TextContentElement.builtin$cls = "TextContentElement";
  if (!"name" in TextContentElement)
    TextContentElement.name = "TextContentElement";
  $desc = $collectedClasses.TextContentElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TextContentElement.prototype = $desc;
  function TextElement() {
  }
  TextElement.builtin$cls = "TextElement";
  if (!"name" in TextElement)
    TextElement.name = "TextElement";
  $desc = $collectedClasses.TextElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TextElement.prototype = $desc;
  function TextPathElement() {
  }
  TextPathElement.builtin$cls = "TextPathElement";
  if (!"name" in TextPathElement)
    TextPathElement.name = "TextPathElement";
  $desc = $collectedClasses.TextPathElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TextPathElement.prototype = $desc;
  function TextPositioningElement() {
  }
  TextPositioningElement.builtin$cls = "TextPositioningElement";
  if (!"name" in TextPositioningElement)
    TextPositioningElement.name = "TextPositioningElement";
  $desc = $collectedClasses.TextPositioningElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TextPositioningElement.prototype = $desc;
  TextPositioningElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  TextPositioningElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function TitleElement0() {
  }
  TitleElement0.builtin$cls = "TitleElement0";
  if (!"name" in TitleElement0)
    TitleElement0.name = "TitleElement0";
  $desc = $collectedClasses.TitleElement0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TitleElement0.prototype = $desc;
  function Transform() {
  }
  Transform.builtin$cls = "Transform";
  if (!"name" in Transform)
    Transform.name = "Transform";
  $desc = $collectedClasses.Transform;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Transform.prototype = $desc;
  Transform.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  function TransformList() {
  }
  TransformList.builtin$cls = "TransformList";
  if (!"name" in TransformList)
    TransformList.name = "TransformList";
  $desc = $collectedClasses.TransformList;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TransformList.prototype = $desc;
  function UnitTypes() {
  }
  UnitTypes.builtin$cls = "UnitTypes";
  if (!"name" in UnitTypes)
    UnitTypes.name = "UnitTypes";
  $desc = $collectedClasses.UnitTypes;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UnitTypes.prototype = $desc;
  function UseElement() {
  }
  UseElement.builtin$cls = "UseElement";
  if (!"name" in UseElement)
    UseElement.name = "UseElement";
  $desc = $collectedClasses.UseElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UseElement.prototype = $desc;
  UseElement.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  UseElement.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  UseElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  UseElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function ViewElement() {
  }
  ViewElement.builtin$cls = "ViewElement";
  if (!"name" in ViewElement)
    ViewElement.name = "ViewElement";
  $desc = $collectedClasses.ViewElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ViewElement.prototype = $desc;
  function ViewSpec() {
  }
  ViewSpec.builtin$cls = "ViewSpec";
  if (!"name" in ViewSpec)
    ViewSpec.name = "ViewSpec";
  $desc = $collectedClasses.ViewSpec;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ViewSpec.prototype = $desc;
  function ZoomEvent() {
  }
  ZoomEvent.builtin$cls = "ZoomEvent";
  if (!"name" in ZoomEvent)
    ZoomEvent.name = "ZoomEvent";
  $desc = $collectedClasses.ZoomEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ZoomEvent.prototype = $desc;
  function _ElementInstanceList() {
  }
  _ElementInstanceList.builtin$cls = "_ElementInstanceList";
  if (!"name" in _ElementInstanceList)
    _ElementInstanceList.name = "_ElementInstanceList";
  $desc = $collectedClasses._ElementInstanceList;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ElementInstanceList.prototype = $desc;
  function _GradientElement() {
  }
  _GradientElement.builtin$cls = "_GradientElement";
  if (!"name" in _GradientElement)
    _GradientElement.name = "_GradientElement";
  $desc = $collectedClasses._GradientElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _GradientElement.prototype = $desc;
  function _SVGAltGlyphDefElement() {
  }
  _SVGAltGlyphDefElement.builtin$cls = "_SVGAltGlyphDefElement";
  if (!"name" in _SVGAltGlyphDefElement)
    _SVGAltGlyphDefElement.name = "_SVGAltGlyphDefElement";
  $desc = $collectedClasses._SVGAltGlyphDefElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGAltGlyphDefElement.prototype = $desc;
  function _SVGAltGlyphItemElement() {
  }
  _SVGAltGlyphItemElement.builtin$cls = "_SVGAltGlyphItemElement";
  if (!"name" in _SVGAltGlyphItemElement)
    _SVGAltGlyphItemElement.name = "_SVGAltGlyphItemElement";
  $desc = $collectedClasses._SVGAltGlyphItemElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGAltGlyphItemElement.prototype = $desc;
  function _SVGAnimateColorElement() {
  }
  _SVGAnimateColorElement.builtin$cls = "_SVGAnimateColorElement";
  if (!"name" in _SVGAnimateColorElement)
    _SVGAnimateColorElement.name = "_SVGAnimateColorElement";
  $desc = $collectedClasses._SVGAnimateColorElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGAnimateColorElement.prototype = $desc;
  function _SVGColor() {
  }
  _SVGColor.builtin$cls = "_SVGColor";
  if (!"name" in _SVGColor)
    _SVGColor.name = "_SVGColor";
  $desc = $collectedClasses._SVGColor;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGColor.prototype = $desc;
  function _SVGComponentTransferFunctionElement() {
  }
  _SVGComponentTransferFunctionElement.builtin$cls = "_SVGComponentTransferFunctionElement";
  if (!"name" in _SVGComponentTransferFunctionElement)
    _SVGComponentTransferFunctionElement.name = "_SVGComponentTransferFunctionElement";
  $desc = $collectedClasses._SVGComponentTransferFunctionElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGComponentTransferFunctionElement.prototype = $desc;
  function _SVGCursorElement() {
  }
  _SVGCursorElement.builtin$cls = "_SVGCursorElement";
  if (!"name" in _SVGCursorElement)
    _SVGCursorElement.name = "_SVGCursorElement";
  $desc = $collectedClasses._SVGCursorElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGCursorElement.prototype = $desc;
  function _SVGFEDropShadowElement() {
  }
  _SVGFEDropShadowElement.builtin$cls = "_SVGFEDropShadowElement";
  if (!"name" in _SVGFEDropShadowElement)
    _SVGFEDropShadowElement.name = "_SVGFEDropShadowElement";
  $desc = $collectedClasses._SVGFEDropShadowElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGFEDropShadowElement.prototype = $desc;
  function _SVGFontElement() {
  }
  _SVGFontElement.builtin$cls = "_SVGFontElement";
  if (!"name" in _SVGFontElement)
    _SVGFontElement.name = "_SVGFontElement";
  $desc = $collectedClasses._SVGFontElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGFontElement.prototype = $desc;
  function _SVGFontFaceElement() {
  }
  _SVGFontFaceElement.builtin$cls = "_SVGFontFaceElement";
  if (!"name" in _SVGFontFaceElement)
    _SVGFontFaceElement.name = "_SVGFontFaceElement";
  $desc = $collectedClasses._SVGFontFaceElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGFontFaceElement.prototype = $desc;
  function _SVGFontFaceFormatElement() {
  }
  _SVGFontFaceFormatElement.builtin$cls = "_SVGFontFaceFormatElement";
  if (!"name" in _SVGFontFaceFormatElement)
    _SVGFontFaceFormatElement.name = "_SVGFontFaceFormatElement";
  $desc = $collectedClasses._SVGFontFaceFormatElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGFontFaceFormatElement.prototype = $desc;
  function _SVGFontFaceNameElement() {
  }
  _SVGFontFaceNameElement.builtin$cls = "_SVGFontFaceNameElement";
  if (!"name" in _SVGFontFaceNameElement)
    _SVGFontFaceNameElement.name = "_SVGFontFaceNameElement";
  $desc = $collectedClasses._SVGFontFaceNameElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGFontFaceNameElement.prototype = $desc;
  function _SVGFontFaceSrcElement() {
  }
  _SVGFontFaceSrcElement.builtin$cls = "_SVGFontFaceSrcElement";
  if (!"name" in _SVGFontFaceSrcElement)
    _SVGFontFaceSrcElement.name = "_SVGFontFaceSrcElement";
  $desc = $collectedClasses._SVGFontFaceSrcElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGFontFaceSrcElement.prototype = $desc;
  function _SVGFontFaceUriElement() {
  }
  _SVGFontFaceUriElement.builtin$cls = "_SVGFontFaceUriElement";
  if (!"name" in _SVGFontFaceUriElement)
    _SVGFontFaceUriElement.name = "_SVGFontFaceUriElement";
  $desc = $collectedClasses._SVGFontFaceUriElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGFontFaceUriElement.prototype = $desc;
  function _SVGGlyphElement() {
  }
  _SVGGlyphElement.builtin$cls = "_SVGGlyphElement";
  if (!"name" in _SVGGlyphElement)
    _SVGGlyphElement.name = "_SVGGlyphElement";
  $desc = $collectedClasses._SVGGlyphElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGGlyphElement.prototype = $desc;
  function _SVGGlyphRefElement() {
  }
  _SVGGlyphRefElement.builtin$cls = "_SVGGlyphRefElement";
  if (!"name" in _SVGGlyphRefElement)
    _SVGGlyphRefElement.name = "_SVGGlyphRefElement";
  $desc = $collectedClasses._SVGGlyphRefElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGGlyphRefElement.prototype = $desc;
  function _SVGHKernElement() {
  }
  _SVGHKernElement.builtin$cls = "_SVGHKernElement";
  if (!"name" in _SVGHKernElement)
    _SVGHKernElement.name = "_SVGHKernElement";
  $desc = $collectedClasses._SVGHKernElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGHKernElement.prototype = $desc;
  function _SVGMPathElement() {
  }
  _SVGMPathElement.builtin$cls = "_SVGMPathElement";
  if (!"name" in _SVGMPathElement)
    _SVGMPathElement.name = "_SVGMPathElement";
  $desc = $collectedClasses._SVGMPathElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGMPathElement.prototype = $desc;
  function _SVGMissingGlyphElement() {
  }
  _SVGMissingGlyphElement.builtin$cls = "_SVGMissingGlyphElement";
  if (!"name" in _SVGMissingGlyphElement)
    _SVGMissingGlyphElement.name = "_SVGMissingGlyphElement";
  $desc = $collectedClasses._SVGMissingGlyphElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGMissingGlyphElement.prototype = $desc;
  function _SVGPaint() {
  }
  _SVGPaint.builtin$cls = "_SVGPaint";
  if (!"name" in _SVGPaint)
    _SVGPaint.name = "_SVGPaint";
  $desc = $collectedClasses._SVGPaint;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGPaint.prototype = $desc;
  function _SVGVKernElement() {
  }
  _SVGVKernElement.builtin$cls = "_SVGVKernElement";
  if (!"name" in _SVGVKernElement)
    _SVGVKernElement.name = "_SVGVKernElement";
  $desc = $collectedClasses._SVGVKernElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGVKernElement.prototype = $desc;
  function AnalyserNode() {
  }
  AnalyserNode.builtin$cls = "AnalyserNode";
  if (!"name" in AnalyserNode)
    AnalyserNode.name = "AnalyserNode";
  $desc = $collectedClasses.AnalyserNode;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnalyserNode.prototype = $desc;
  function AudioBuffer() {
  }
  AudioBuffer.builtin$cls = "AudioBuffer";
  if (!"name" in AudioBuffer)
    AudioBuffer.name = "AudioBuffer";
  $desc = $collectedClasses.AudioBuffer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AudioBuffer.prototype = $desc;
  AudioBuffer.prototype.get$length = function(receiver) {
    return receiver.length;
  };
  function AudioBufferSourceNode() {
  }
  AudioBufferSourceNode.builtin$cls = "AudioBufferSourceNode";
  if (!"name" in AudioBufferSourceNode)
    AudioBufferSourceNode.name = "AudioBufferSourceNode";
  $desc = $collectedClasses.AudioBufferSourceNode;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AudioBufferSourceNode.prototype = $desc;
  function AudioContext() {
  }
  AudioContext.builtin$cls = "AudioContext";
  if (!"name" in AudioContext)
    AudioContext.name = "AudioContext";
  $desc = $collectedClasses.AudioContext;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AudioContext.prototype = $desc;
  function AudioDestinationNode() {
  }
  AudioDestinationNode.builtin$cls = "AudioDestinationNode";
  if (!"name" in AudioDestinationNode)
    AudioDestinationNode.name = "AudioDestinationNode";
  $desc = $collectedClasses.AudioDestinationNode;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AudioDestinationNode.prototype = $desc;
  function AudioListener() {
  }
  AudioListener.builtin$cls = "AudioListener";
  if (!"name" in AudioListener)
    AudioListener.name = "AudioListener";
  $desc = $collectedClasses.AudioListener;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AudioListener.prototype = $desc;
  function AudioNode() {
  }
  AudioNode.builtin$cls = "AudioNode";
  if (!"name" in AudioNode)
    AudioNode.name = "AudioNode";
  $desc = $collectedClasses.AudioNode;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AudioNode.prototype = $desc;
  function AudioParam() {
  }
  AudioParam.builtin$cls = "AudioParam";
  if (!"name" in AudioParam)
    AudioParam.name = "AudioParam";
  $desc = $collectedClasses.AudioParam;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AudioParam.prototype = $desc;
  AudioParam.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  AudioParam.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  function AudioProcessingEvent() {
  }
  AudioProcessingEvent.builtin$cls = "AudioProcessingEvent";
  if (!"name" in AudioProcessingEvent)
    AudioProcessingEvent.name = "AudioProcessingEvent";
  $desc = $collectedClasses.AudioProcessingEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AudioProcessingEvent.prototype = $desc;
  function AudioSourceNode() {
  }
  AudioSourceNode.builtin$cls = "AudioSourceNode";
  if (!"name" in AudioSourceNode)
    AudioSourceNode.name = "AudioSourceNode";
  $desc = $collectedClasses.AudioSourceNode;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AudioSourceNode.prototype = $desc;
  function BiquadFilterNode() {
  }
  BiquadFilterNode.builtin$cls = "BiquadFilterNode";
  if (!"name" in BiquadFilterNode)
    BiquadFilterNode.name = "BiquadFilterNode";
  $desc = $collectedClasses.BiquadFilterNode;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BiquadFilterNode.prototype = $desc;
  BiquadFilterNode.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  function ChannelMergerNode() {
  }
  ChannelMergerNode.builtin$cls = "ChannelMergerNode";
  if (!"name" in ChannelMergerNode)
    ChannelMergerNode.name = "ChannelMergerNode";
  $desc = $collectedClasses.ChannelMergerNode;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ChannelMergerNode.prototype = $desc;
  function ChannelSplitterNode() {
  }
  ChannelSplitterNode.builtin$cls = "ChannelSplitterNode";
  if (!"name" in ChannelSplitterNode)
    ChannelSplitterNode.name = "ChannelSplitterNode";
  $desc = $collectedClasses.ChannelSplitterNode;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ChannelSplitterNode.prototype = $desc;
  function ConvolverNode() {
  }
  ConvolverNode.builtin$cls = "ConvolverNode";
  if (!"name" in ConvolverNode)
    ConvolverNode.name = "ConvolverNode";
  $desc = $collectedClasses.ConvolverNode;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ConvolverNode.prototype = $desc;
  function DelayNode() {
  }
  DelayNode.builtin$cls = "DelayNode";
  if (!"name" in DelayNode)
    DelayNode.name = "DelayNode";
  $desc = $collectedClasses.DelayNode;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DelayNode.prototype = $desc;
  function DynamicsCompressorNode() {
  }
  DynamicsCompressorNode.builtin$cls = "DynamicsCompressorNode";
  if (!"name" in DynamicsCompressorNode)
    DynamicsCompressorNode.name = "DynamicsCompressorNode";
  $desc = $collectedClasses.DynamicsCompressorNode;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DynamicsCompressorNode.prototype = $desc;
  function GainNode() {
  }
  GainNode.builtin$cls = "GainNode";
  if (!"name" in GainNode)
    GainNode.name = "GainNode";
  $desc = $collectedClasses.GainNode;
  if ($desc instanceof Array)
    $desc = $desc[1];
  GainNode.prototype = $desc;
  function MediaElementAudioSourceNode() {
  }
  MediaElementAudioSourceNode.builtin$cls = "MediaElementAudioSourceNode";
  if (!"name" in MediaElementAudioSourceNode)
    MediaElementAudioSourceNode.name = "MediaElementAudioSourceNode";
  $desc = $collectedClasses.MediaElementAudioSourceNode;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaElementAudioSourceNode.prototype = $desc;
  function MediaStreamAudioDestinationNode() {
  }
  MediaStreamAudioDestinationNode.builtin$cls = "MediaStreamAudioDestinationNode";
  if (!"name" in MediaStreamAudioDestinationNode)
    MediaStreamAudioDestinationNode.name = "MediaStreamAudioDestinationNode";
  $desc = $collectedClasses.MediaStreamAudioDestinationNode;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaStreamAudioDestinationNode.prototype = $desc;
  function MediaStreamAudioSourceNode() {
  }
  MediaStreamAudioSourceNode.builtin$cls = "MediaStreamAudioSourceNode";
  if (!"name" in MediaStreamAudioSourceNode)
    MediaStreamAudioSourceNode.name = "MediaStreamAudioSourceNode";
  $desc = $collectedClasses.MediaStreamAudioSourceNode;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaStreamAudioSourceNode.prototype = $desc;
  function OfflineAudioCompletionEvent() {
  }
  OfflineAudioCompletionEvent.builtin$cls = "OfflineAudioCompletionEvent";
  if (!"name" in OfflineAudioCompletionEvent)
    OfflineAudioCompletionEvent.name = "OfflineAudioCompletionEvent";
  $desc = $collectedClasses.OfflineAudioCompletionEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  OfflineAudioCompletionEvent.prototype = $desc;
  function OfflineAudioContext() {
  }
  OfflineAudioContext.builtin$cls = "OfflineAudioContext";
  if (!"name" in OfflineAudioContext)
    OfflineAudioContext.name = "OfflineAudioContext";
  $desc = $collectedClasses.OfflineAudioContext;
  if ($desc instanceof Array)
    $desc = $desc[1];
  OfflineAudioContext.prototype = $desc;
  function OscillatorNode() {
  }
  OscillatorNode.builtin$cls = "OscillatorNode";
  if (!"name" in OscillatorNode)
    OscillatorNode.name = "OscillatorNode";
  $desc = $collectedClasses.OscillatorNode;
  if ($desc instanceof Array)
    $desc = $desc[1];
  OscillatorNode.prototype = $desc;
  OscillatorNode.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  function PannerNode() {
  }
  PannerNode.builtin$cls = "PannerNode";
  if (!"name" in PannerNode)
    PannerNode.name = "PannerNode";
  $desc = $collectedClasses.PannerNode;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PannerNode.prototype = $desc;
  function PeriodicWave() {
  }
  PeriodicWave.builtin$cls = "PeriodicWave";
  if (!"name" in PeriodicWave)
    PeriodicWave.name = "PeriodicWave";
  $desc = $collectedClasses.PeriodicWave;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PeriodicWave.prototype = $desc;
  function ScriptProcessorNode() {
  }
  ScriptProcessorNode.builtin$cls = "ScriptProcessorNode";
  if (!"name" in ScriptProcessorNode)
    ScriptProcessorNode.name = "ScriptProcessorNode";
  $desc = $collectedClasses.ScriptProcessorNode;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ScriptProcessorNode.prototype = $desc;
  function WaveShaperNode() {
  }
  WaveShaperNode.builtin$cls = "WaveShaperNode";
  if (!"name" in WaveShaperNode)
    WaveShaperNode.name = "WaveShaperNode";
  $desc = $collectedClasses.WaveShaperNode;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WaveShaperNode.prototype = $desc;
  function ActiveInfo() {
  }
  ActiveInfo.builtin$cls = "ActiveInfo";
  if (!"name" in ActiveInfo)
    ActiveInfo.name = "ActiveInfo";
  $desc = $collectedClasses.ActiveInfo;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ActiveInfo.prototype = $desc;
  ActiveInfo.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  ActiveInfo.prototype.get$size = function(receiver) {
    return receiver.size;
  };
  ActiveInfo.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  function AngleInstancedArrays() {
  }
  AngleInstancedArrays.builtin$cls = "AngleInstancedArrays";
  if (!"name" in AngleInstancedArrays)
    AngleInstancedArrays.name = "AngleInstancedArrays";
  $desc = $collectedClasses.AngleInstancedArrays;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AngleInstancedArrays.prototype = $desc;
  function Buffer() {
  }
  Buffer.builtin$cls = "Buffer";
  if (!"name" in Buffer)
    Buffer.name = "Buffer";
  $desc = $collectedClasses.Buffer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Buffer.prototype = $desc;
  function CompressedTextureAtc() {
  }
  CompressedTextureAtc.builtin$cls = "CompressedTextureAtc";
  if (!"name" in CompressedTextureAtc)
    CompressedTextureAtc.name = "CompressedTextureAtc";
  $desc = $collectedClasses.CompressedTextureAtc;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CompressedTextureAtc.prototype = $desc;
  function CompressedTexturePvrtc() {
  }
  CompressedTexturePvrtc.builtin$cls = "CompressedTexturePvrtc";
  if (!"name" in CompressedTexturePvrtc)
    CompressedTexturePvrtc.name = "CompressedTexturePvrtc";
  $desc = $collectedClasses.CompressedTexturePvrtc;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CompressedTexturePvrtc.prototype = $desc;
  function CompressedTextureS3TC() {
  }
  CompressedTextureS3TC.builtin$cls = "CompressedTextureS3TC";
  if (!"name" in CompressedTextureS3TC)
    CompressedTextureS3TC.name = "CompressedTextureS3TC";
  $desc = $collectedClasses.CompressedTextureS3TC;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CompressedTextureS3TC.prototype = $desc;
  function ContextAttributes() {
  }
  ContextAttributes.builtin$cls = "ContextAttributes";
  if (!"name" in ContextAttributes)
    ContextAttributes.name = "ContextAttributes";
  $desc = $collectedClasses.ContextAttributes;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ContextAttributes.prototype = $desc;
  ContextAttributes.prototype.get$depth = function(receiver) {
    return receiver.depth;
  };
  ContextAttributes.prototype.get$stencil = function(receiver) {
    return receiver.stencil;
  };
  function ContextEvent() {
  }
  ContextEvent.builtin$cls = "ContextEvent";
  if (!"name" in ContextEvent)
    ContextEvent.name = "ContextEvent";
  $desc = $collectedClasses.ContextEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ContextEvent.prototype = $desc;
  function DebugRendererInfo() {
  }
  DebugRendererInfo.builtin$cls = "DebugRendererInfo";
  if (!"name" in DebugRendererInfo)
    DebugRendererInfo.name = "DebugRendererInfo";
  $desc = $collectedClasses.DebugRendererInfo;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DebugRendererInfo.prototype = $desc;
  function DebugShaders() {
  }
  DebugShaders.builtin$cls = "DebugShaders";
  if (!"name" in DebugShaders)
    DebugShaders.name = "DebugShaders";
  $desc = $collectedClasses.DebugShaders;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DebugShaders.prototype = $desc;
  function DepthTexture() {
  }
  DepthTexture.builtin$cls = "DepthTexture";
  if (!"name" in DepthTexture)
    DepthTexture.name = "DepthTexture";
  $desc = $collectedClasses.DepthTexture;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DepthTexture.prototype = $desc;
  function DrawBuffers() {
  }
  DrawBuffers.builtin$cls = "DrawBuffers";
  if (!"name" in DrawBuffers)
    DrawBuffers.name = "DrawBuffers";
  $desc = $collectedClasses.DrawBuffers;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DrawBuffers.prototype = $desc;
  function ExtFragDepth() {
  }
  ExtFragDepth.builtin$cls = "ExtFragDepth";
  if (!"name" in ExtFragDepth)
    ExtFragDepth.name = "ExtFragDepth";
  $desc = $collectedClasses.ExtFragDepth;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ExtFragDepth.prototype = $desc;
  function ExtTextureFilterAnisotropic() {
  }
  ExtTextureFilterAnisotropic.builtin$cls = "ExtTextureFilterAnisotropic";
  if (!"name" in ExtTextureFilterAnisotropic)
    ExtTextureFilterAnisotropic.name = "ExtTextureFilterAnisotropic";
  $desc = $collectedClasses.ExtTextureFilterAnisotropic;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ExtTextureFilterAnisotropic.prototype = $desc;
  function Framebuffer() {
  }
  Framebuffer.builtin$cls = "Framebuffer";
  if (!"name" in Framebuffer)
    Framebuffer.name = "Framebuffer";
  $desc = $collectedClasses.Framebuffer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Framebuffer.prototype = $desc;
  function LoseContext() {
  }
  LoseContext.builtin$cls = "LoseContext";
  if (!"name" in LoseContext)
    LoseContext.name = "LoseContext";
  $desc = $collectedClasses.LoseContext;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LoseContext.prototype = $desc;
  function OesElementIndexUint() {
  }
  OesElementIndexUint.builtin$cls = "OesElementIndexUint";
  if (!"name" in OesElementIndexUint)
    OesElementIndexUint.name = "OesElementIndexUint";
  $desc = $collectedClasses.OesElementIndexUint;
  if ($desc instanceof Array)
    $desc = $desc[1];
  OesElementIndexUint.prototype = $desc;
  function OesStandardDerivatives() {
  }
  OesStandardDerivatives.builtin$cls = "OesStandardDerivatives";
  if (!"name" in OesStandardDerivatives)
    OesStandardDerivatives.name = "OesStandardDerivatives";
  $desc = $collectedClasses.OesStandardDerivatives;
  if ($desc instanceof Array)
    $desc = $desc[1];
  OesStandardDerivatives.prototype = $desc;
  function OesTextureFloat() {
  }
  OesTextureFloat.builtin$cls = "OesTextureFloat";
  if (!"name" in OesTextureFloat)
    OesTextureFloat.name = "OesTextureFloat";
  $desc = $collectedClasses.OesTextureFloat;
  if ($desc instanceof Array)
    $desc = $desc[1];
  OesTextureFloat.prototype = $desc;
  function OesTextureFloatLinear() {
  }
  OesTextureFloatLinear.builtin$cls = "OesTextureFloatLinear";
  if (!"name" in OesTextureFloatLinear)
    OesTextureFloatLinear.name = "OesTextureFloatLinear";
  $desc = $collectedClasses.OesTextureFloatLinear;
  if ($desc instanceof Array)
    $desc = $desc[1];
  OesTextureFloatLinear.prototype = $desc;
  function OesTextureHalfFloat() {
  }
  OesTextureHalfFloat.builtin$cls = "OesTextureHalfFloat";
  if (!"name" in OesTextureHalfFloat)
    OesTextureHalfFloat.name = "OesTextureHalfFloat";
  $desc = $collectedClasses.OesTextureHalfFloat;
  if ($desc instanceof Array)
    $desc = $desc[1];
  OesTextureHalfFloat.prototype = $desc;
  function OesTextureHalfFloatLinear() {
  }
  OesTextureHalfFloatLinear.builtin$cls = "OesTextureHalfFloatLinear";
  if (!"name" in OesTextureHalfFloatLinear)
    OesTextureHalfFloatLinear.name = "OesTextureHalfFloatLinear";
  $desc = $collectedClasses.OesTextureHalfFloatLinear;
  if ($desc instanceof Array)
    $desc = $desc[1];
  OesTextureHalfFloatLinear.prototype = $desc;
  function OesVertexArrayObject() {
  }
  OesVertexArrayObject.builtin$cls = "OesVertexArrayObject";
  if (!"name" in OesVertexArrayObject)
    OesVertexArrayObject.name = "OesVertexArrayObject";
  $desc = $collectedClasses.OesVertexArrayObject;
  if ($desc instanceof Array)
    $desc = $desc[1];
  OesVertexArrayObject.prototype = $desc;
  function Program() {
  }
  Program.builtin$cls = "Program";
  if (!"name" in Program)
    Program.name = "Program";
  $desc = $collectedClasses.Program;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Program.prototype = $desc;
  function Renderbuffer() {
  }
  Renderbuffer.builtin$cls = "Renderbuffer";
  if (!"name" in Renderbuffer)
    Renderbuffer.name = "Renderbuffer";
  $desc = $collectedClasses.Renderbuffer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Renderbuffer.prototype = $desc;
  function RenderingContext() {
  }
  RenderingContext.builtin$cls = "RenderingContext";
  if (!"name" in RenderingContext)
    RenderingContext.name = "RenderingContext";
  $desc = $collectedClasses.RenderingContext;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RenderingContext.prototype = $desc;
  function Shader() {
  }
  Shader.builtin$cls = "Shader";
  if (!"name" in Shader)
    Shader.name = "Shader";
  $desc = $collectedClasses.Shader;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Shader.prototype = $desc;
  function ShaderPrecisionFormat() {
  }
  ShaderPrecisionFormat.builtin$cls = "ShaderPrecisionFormat";
  if (!"name" in ShaderPrecisionFormat)
    ShaderPrecisionFormat.name = "ShaderPrecisionFormat";
  $desc = $collectedClasses.ShaderPrecisionFormat;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ShaderPrecisionFormat.prototype = $desc;
  function Texture() {
  }
  Texture.builtin$cls = "Texture";
  if (!"name" in Texture)
    Texture.name = "Texture";
  $desc = $collectedClasses.Texture;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Texture.prototype = $desc;
  function UniformLocation() {
  }
  UniformLocation.builtin$cls = "UniformLocation";
  if (!"name" in UniformLocation)
    UniformLocation.name = "UniformLocation";
  $desc = $collectedClasses.UniformLocation;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UniformLocation.prototype = $desc;
  function VertexArrayObject() {
  }
  VertexArrayObject.builtin$cls = "VertexArrayObject";
  if (!"name" in VertexArrayObject)
    VertexArrayObject.name = "VertexArrayObject";
  $desc = $collectedClasses.VertexArrayObject;
  if ($desc instanceof Array)
    $desc = $desc[1];
  VertexArrayObject.prototype = $desc;
  function SqlDatabase() {
  }
  SqlDatabase.builtin$cls = "SqlDatabase";
  if (!"name" in SqlDatabase)
    SqlDatabase.name = "SqlDatabase";
  $desc = $collectedClasses.SqlDatabase;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SqlDatabase.prototype = $desc;
  function SqlError() {
  }
  SqlError.builtin$cls = "SqlError";
  if (!"name" in SqlError)
    SqlError.name = "SqlError";
  $desc = $collectedClasses.SqlError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SqlError.prototype = $desc;
  function SqlResultSet() {
  }
  SqlResultSet.builtin$cls = "SqlResultSet";
  if (!"name" in SqlResultSet)
    SqlResultSet.name = "SqlResultSet";
  $desc = $collectedClasses.SqlResultSet;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SqlResultSet.prototype = $desc;
  function SqlResultSetRowList() {
  }
  SqlResultSetRowList.builtin$cls = "SqlResultSetRowList";
  if (!"name" in SqlResultSetRowList)
    SqlResultSetRowList.name = "SqlResultSetRowList";
  $desc = $collectedClasses.SqlResultSetRowList;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SqlResultSetRowList.prototype = $desc;
  function SqlTransaction() {
  }
  SqlTransaction.builtin$cls = "SqlTransaction";
  if (!"name" in SqlTransaction)
    SqlTransaction.name = "SqlTransaction";
  $desc = $collectedClasses.SqlTransaction;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SqlTransaction.prototype = $desc;
  function _SQLTransactionSync() {
  }
  _SQLTransactionSync.builtin$cls = "_SQLTransactionSync";
  if (!"name" in _SQLTransactionSync)
    _SQLTransactionSync.name = "_SQLTransactionSync";
  $desc = $collectedClasses._SQLTransactionSync;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SQLTransactionSync.prototype = $desc;
  function ByteBuffer() {
  }
  ByteBuffer.builtin$cls = "ByteBuffer";
  if (!"name" in ByteBuffer)
    ByteBuffer.name = "ByteBuffer";
  $desc = $collectedClasses.ByteBuffer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ByteBuffer.prototype = $desc;
  function TypedData() {
  }
  TypedData.builtin$cls = "TypedData";
  if (!"name" in TypedData)
    TypedData.name = "TypedData";
  $desc = $collectedClasses.TypedData;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypedData.prototype = $desc;
  function ByteData() {
  }
  ByteData.builtin$cls = "ByteData";
  if (!"name" in ByteData)
    ByteData.name = "ByteData";
  $desc = $collectedClasses.ByteData;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ByteData.prototype = $desc;
  function Float32List() {
  }
  Float32List.builtin$cls = "Float32List";
  if (!"name" in Float32List)
    Float32List.name = "Float32List";
  $desc = $collectedClasses.Float32List;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Float32List.prototype = $desc;
  function Float64List() {
  }
  Float64List.builtin$cls = "Float64List";
  if (!"name" in Float64List)
    Float64List.name = "Float64List";
  $desc = $collectedClasses.Float64List;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Float64List.prototype = $desc;
  function Int16List() {
  }
  Int16List.builtin$cls = "Int16List";
  if (!"name" in Int16List)
    Int16List.name = "Int16List";
  $desc = $collectedClasses.Int16List;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Int16List.prototype = $desc;
  function Int32List() {
  }
  Int32List.builtin$cls = "Int32List";
  if (!"name" in Int32List)
    Int32List.name = "Int32List";
  $desc = $collectedClasses.Int32List;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Int32List.prototype = $desc;
  function Int8List() {
  }
  Int8List.builtin$cls = "Int8List";
  if (!"name" in Int8List)
    Int8List.name = "Int8List";
  $desc = $collectedClasses.Int8List;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Int8List.prototype = $desc;
  function Uint16List() {
  }
  Uint16List.builtin$cls = "Uint16List";
  if (!"name" in Uint16List)
    Uint16List.name = "Uint16List";
  $desc = $collectedClasses.Uint16List;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uint16List.prototype = $desc;
  function Uint32List() {
  }
  Uint32List.builtin$cls = "Uint32List";
  if (!"name" in Uint32List)
    Uint32List.name = "Uint32List";
  $desc = $collectedClasses.Uint32List;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uint32List.prototype = $desc;
  function Uint8ClampedList() {
  }
  Uint8ClampedList.builtin$cls = "Uint8ClampedList";
  if (!"name" in Uint8ClampedList)
    Uint8ClampedList.name = "Uint8ClampedList";
  $desc = $collectedClasses.Uint8ClampedList;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uint8ClampedList.prototype = $desc;
  function Uint8List() {
  }
  Uint8List.builtin$cls = "Uint8List";
  if (!"name" in Uint8List)
    Uint8List.name = "Uint8List";
  $desc = $collectedClasses.Uint8List;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uint8List.prototype = $desc;
  function JS_CONST(code) {
    this.code = code;
  }
  JS_CONST.builtin$cls = "JS_CONST";
  if (!"name" in JS_CONST)
    JS_CONST.name = "JS_CONST";
  $desc = $collectedClasses.JS_CONST;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JS_CONST.prototype = $desc;
  function Interceptor() {
  }
  Interceptor.builtin$cls = "Interceptor";
  if (!"name" in Interceptor)
    Interceptor.name = "Interceptor";
  $desc = $collectedClasses.Interceptor;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor.prototype = $desc;
  function JSBool() {
  }
  JSBool.builtin$cls = "bool";
  if (!"name" in JSBool)
    JSBool.name = "JSBool";
  $desc = $collectedClasses.JSBool;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSBool.prototype = $desc;
  function JSNull() {
  }
  JSNull.builtin$cls = "JSNull";
  if (!"name" in JSNull)
    JSNull.name = "JSNull";
  $desc = $collectedClasses.JSNull;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSNull.prototype = $desc;
  function JavaScriptObject() {
  }
  JavaScriptObject.builtin$cls = "JavaScriptObject";
  if (!"name" in JavaScriptObject)
    JavaScriptObject.name = "JavaScriptObject";
  $desc = $collectedClasses.JavaScriptObject;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JavaScriptObject.prototype = $desc;
  function PlainJavaScriptObject() {
  }
  PlainJavaScriptObject.builtin$cls = "PlainJavaScriptObject";
  if (!"name" in PlainJavaScriptObject)
    PlainJavaScriptObject.name = "PlainJavaScriptObject";
  $desc = $collectedClasses.PlainJavaScriptObject;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PlainJavaScriptObject.prototype = $desc;
  function UnknownJavaScriptObject() {
  }
  UnknownJavaScriptObject.builtin$cls = "UnknownJavaScriptObject";
  if (!"name" in UnknownJavaScriptObject)
    UnknownJavaScriptObject.name = "UnknownJavaScriptObject";
  $desc = $collectedClasses.UnknownJavaScriptObject;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UnknownJavaScriptObject.prototype = $desc;
  function JSArray() {
  }
  JSArray.builtin$cls = "List";
  if (!"name" in JSArray)
    JSArray.name = "JSArray";
  $desc = $collectedClasses.JSArray;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSArray.prototype = $desc;
  function JSMutableArray() {
  }
  JSMutableArray.builtin$cls = "JSMutableArray";
  if (!"name" in JSMutableArray)
    JSMutableArray.name = "JSMutableArray";
  $desc = $collectedClasses.JSMutableArray;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSMutableArray.prototype = $desc;
  function JSFixedArray() {
  }
  JSFixedArray.builtin$cls = "JSFixedArray";
  if (!"name" in JSFixedArray)
    JSFixedArray.name = "JSFixedArray";
  $desc = $collectedClasses.JSFixedArray;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSFixedArray.prototype = $desc;
  function JSExtendableArray() {
  }
  JSExtendableArray.builtin$cls = "JSExtendableArray";
  if (!"name" in JSExtendableArray)
    JSExtendableArray.name = "JSExtendableArray";
  $desc = $collectedClasses.JSExtendableArray;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSExtendableArray.prototype = $desc;
  function JSNumber() {
  }
  JSNumber.builtin$cls = "num";
  if (!"name" in JSNumber)
    JSNumber.name = "JSNumber";
  $desc = $collectedClasses.JSNumber;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSNumber.prototype = $desc;
  function JSInt() {
  }
  JSInt.builtin$cls = "int";
  if (!"name" in JSInt)
    JSInt.name = "JSInt";
  $desc = $collectedClasses.JSInt;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSInt.prototype = $desc;
  function JSDouble() {
  }
  JSDouble.builtin$cls = "double";
  if (!"name" in JSDouble)
    JSDouble.name = "JSDouble";
  $desc = $collectedClasses.JSDouble;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSDouble.prototype = $desc;
  function JSString() {
  }
  JSString.builtin$cls = "String";
  if (!"name" in JSString)
    JSString.name = "JSString";
  $desc = $collectedClasses.JSString;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSString.prototype = $desc;
  function startRootIsolate_closure(entry_0) {
    this.entry_0 = entry_0;
  }
  startRootIsolate_closure.builtin$cls = "startRootIsolate_closure";
  if (!"name" in startRootIsolate_closure)
    startRootIsolate_closure.name = "startRootIsolate_closure";
  $desc = $collectedClasses.startRootIsolate_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  startRootIsolate_closure.prototype = $desc;
  function startRootIsolate_closure0(entry_1) {
    this.entry_1 = entry_1;
  }
  startRootIsolate_closure0.builtin$cls = "startRootIsolate_closure0";
  if (!"name" in startRootIsolate_closure0)
    startRootIsolate_closure0.name = "startRootIsolate_closure0";
  $desc = $collectedClasses.startRootIsolate_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  startRootIsolate_closure0.prototype = $desc;
  function _Manager(nextIsolateId, currentManagerId, nextManagerId, currentContext, rootContext, topEventLoop, fromCommandLine, isWorker, supportsWorkers, isolates, mainManager, managers, entry) {
    this.nextIsolateId = nextIsolateId;
    this.currentManagerId = currentManagerId;
    this.nextManagerId = nextManagerId;
    this.currentContext = currentContext;
    this.rootContext = rootContext;
    this.topEventLoop = topEventLoop;
    this.fromCommandLine = fromCommandLine;
    this.isWorker = isWorker;
    this.supportsWorkers = supportsWorkers;
    this.isolates = isolates;
    this.mainManager = mainManager;
    this.managers = managers;
    this.entry = entry;
  }
  _Manager.builtin$cls = "_Manager";
  if (!"name" in _Manager)
    _Manager.name = "_Manager";
  $desc = $collectedClasses._Manager;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Manager.prototype = $desc;
  function _IsolateContext(id, ports, isolateStatics) {
    this.id = id;
    this.ports = ports;
    this.isolateStatics = isolateStatics;
  }
  _IsolateContext.builtin$cls = "_IsolateContext";
  if (!"name" in _IsolateContext)
    _IsolateContext.name = "_IsolateContext";
  $desc = $collectedClasses._IsolateContext;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _IsolateContext.prototype = $desc;
  _IsolateContext.prototype.get$isolateStatics = function() {
    return this.isolateStatics;
  };
  function _EventLoop(events, activeTimerCount) {
    this.events = events;
    this.activeTimerCount = activeTimerCount;
  }
  _EventLoop.builtin$cls = "_EventLoop";
  if (!"name" in _EventLoop)
    _EventLoop.name = "_EventLoop";
  $desc = $collectedClasses._EventLoop;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _EventLoop.prototype = $desc;
  function _EventLoop__runHelper_next(this_0) {
    this.this_0 = this_0;
  }
  _EventLoop__runHelper_next.builtin$cls = "_EventLoop__runHelper_next";
  if (!"name" in _EventLoop__runHelper_next)
    _EventLoop__runHelper_next.name = "_EventLoop__runHelper_next";
  $desc = $collectedClasses._EventLoop__runHelper_next;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _EventLoop__runHelper_next.prototype = $desc;
  function _IsolateEvent(isolate, fn, message) {
    this.isolate = isolate;
    this.fn = fn;
    this.message = message;
  }
  _IsolateEvent.builtin$cls = "_IsolateEvent";
  if (!"name" in _IsolateEvent)
    _IsolateEvent.name = "_IsolateEvent";
  $desc = $collectedClasses._IsolateEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _IsolateEvent.prototype = $desc;
  function _MainManagerStub() {
  }
  _MainManagerStub.builtin$cls = "_MainManagerStub";
  if (!"name" in _MainManagerStub)
    _MainManagerStub.name = "_MainManagerStub";
  $desc = $collectedClasses._MainManagerStub;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _MainManagerStub.prototype = $desc;
  function IsolateNatives__processWorkerMessage_closure(entryPoint_0, args_1, message_2, isSpawnUri_3, replyTo_4) {
    this.entryPoint_0 = entryPoint_0;
    this.args_1 = args_1;
    this.message_2 = message_2;
    this.isSpawnUri_3 = isSpawnUri_3;
    this.replyTo_4 = replyTo_4;
  }
  IsolateNatives__processWorkerMessage_closure.builtin$cls = "IsolateNatives__processWorkerMessage_closure";
  if (!"name" in IsolateNatives__processWorkerMessage_closure)
    IsolateNatives__processWorkerMessage_closure.name = "IsolateNatives__processWorkerMessage_closure";
  $desc = $collectedClasses.IsolateNatives__processWorkerMessage_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  IsolateNatives__processWorkerMessage_closure.prototype = $desc;
  function _BaseSendPort() {
  }
  _BaseSendPort.builtin$cls = "_BaseSendPort";
  if (!"name" in _BaseSendPort)
    _BaseSendPort.name = "_BaseSendPort";
  $desc = $collectedClasses._BaseSendPort;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BaseSendPort.prototype = $desc;
  function _NativeJsSendPort(_receivePort, _isolateId) {
    this._receivePort = _receivePort;
    this._isolateId = _isolateId;
  }
  _NativeJsSendPort.builtin$cls = "_NativeJsSendPort";
  if (!"name" in _NativeJsSendPort)
    _NativeJsSendPort.name = "_NativeJsSendPort";
  $desc = $collectedClasses._NativeJsSendPort;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _NativeJsSendPort.prototype = $desc;
  function _NativeJsSendPort_send_closure(this_1, message_2) {
    this.this_1 = this_1;
    this.message_2 = message_2;
  }
  _NativeJsSendPort_send_closure.builtin$cls = "_NativeJsSendPort_send_closure";
  if (!"name" in _NativeJsSendPort_send_closure)
    _NativeJsSendPort_send_closure.name = "_NativeJsSendPort_send_closure";
  $desc = $collectedClasses._NativeJsSendPort_send_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _NativeJsSendPort_send_closure.prototype = $desc;
  function _NativeJsSendPort_send__closure(box_0, this_3, shouldSerialize_4) {
    this.box_0 = box_0;
    this.this_3 = this_3;
    this.shouldSerialize_4 = shouldSerialize_4;
  }
  _NativeJsSendPort_send__closure.builtin$cls = "_NativeJsSendPort_send__closure";
  if (!"name" in _NativeJsSendPort_send__closure)
    _NativeJsSendPort_send__closure.name = "_NativeJsSendPort_send__closure";
  $desc = $collectedClasses._NativeJsSendPort_send__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _NativeJsSendPort_send__closure.prototype = $desc;
  function _WorkerSendPort(_workerId, _receivePortId, _isolateId) {
    this._workerId = _workerId;
    this._receivePortId = _receivePortId;
    this._isolateId = _isolateId;
  }
  _WorkerSendPort.builtin$cls = "_WorkerSendPort";
  if (!"name" in _WorkerSendPort)
    _WorkerSendPort.name = "_WorkerSendPort";
  $desc = $collectedClasses._WorkerSendPort;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _WorkerSendPort.prototype = $desc;
  function _WorkerSendPort_send_closure(this_0, message_1) {
    this.this_0 = this_0;
    this.message_1 = message_1;
  }
  _WorkerSendPort_send_closure.builtin$cls = "_WorkerSendPort_send_closure";
  if (!"name" in _WorkerSendPort_send_closure)
    _WorkerSendPort_send_closure.name = "_WorkerSendPort_send_closure";
  $desc = $collectedClasses._WorkerSendPort_send_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _WorkerSendPort_send_closure.prototype = $desc;
  function ReceivePortImpl(__isolate_helper$_id, __isolate_helper$_controller) {
    this.__isolate_helper$_id = __isolate_helper$_id;
    this.__isolate_helper$_controller = __isolate_helper$_controller;
  }
  ReceivePortImpl.builtin$cls = "ReceivePortImpl";
  if (!"name" in ReceivePortImpl)
    ReceivePortImpl.name = "ReceivePortImpl";
  $desc = $collectedClasses.ReceivePortImpl;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ReceivePortImpl.prototype = $desc;
  ReceivePortImpl.prototype.get$__isolate_helper$_id = function() {
    return this.__isolate_helper$_id;
  };
  ReceivePortImpl.prototype.get$__isolate_helper$_controller = function() {
    return this.__isolate_helper$_controller;
  };
  function BoundClosure$i0(_self, __js_helper$_target, _receiver, __js_helper$_name) {
    this._self = _self;
    this.__js_helper$_target = __js_helper$_target;
    this._receiver = _receiver;
    this.__js_helper$_name = __js_helper$_name;
  }
  BoundClosure$i0.builtin$cls = "BoundClosure$i0";
  $desc = $collectedClasses.BoundClosure$i0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BoundClosure$i0.prototype = $desc;
  function _waitForPendingPorts_closure(callback_0) {
    this.callback_0 = callback_0;
  }
  _waitForPendingPorts_closure.builtin$cls = "_waitForPendingPorts_closure";
  if (!"name" in _waitForPendingPorts_closure)
    _waitForPendingPorts_closure.name = "_waitForPendingPorts_closure";
  $desc = $collectedClasses._waitForPendingPorts_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _waitForPendingPorts_closure.prototype = $desc;
  function _PendingSendPortFinder(ports, _visited) {
    this.ports = ports;
    this._visited = _visited;
  }
  _PendingSendPortFinder.builtin$cls = "_PendingSendPortFinder";
  if (!"name" in _PendingSendPortFinder)
    _PendingSendPortFinder.name = "_PendingSendPortFinder";
  $desc = $collectedClasses._PendingSendPortFinder;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _PendingSendPortFinder.prototype = $desc;
  function _JsSerializer(_nextFreeRefId, _visited) {
    this._nextFreeRefId = _nextFreeRefId;
    this._visited = _visited;
  }
  _JsSerializer.builtin$cls = "_JsSerializer";
  if (!"name" in _JsSerializer)
    _JsSerializer.name = "_JsSerializer";
  $desc = $collectedClasses._JsSerializer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _JsSerializer.prototype = $desc;
  function _JsCopier(_visited) {
    this._visited = _visited;
  }
  _JsCopier.builtin$cls = "_JsCopier";
  if (!"name" in _JsCopier)
    _JsCopier.name = "_JsCopier";
  $desc = $collectedClasses._JsCopier;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _JsCopier.prototype = $desc;
  function _JsDeserializer(_deserialized) {
    this._deserialized = _deserialized;
  }
  _JsDeserializer.builtin$cls = "_JsDeserializer";
  if (!"name" in _JsDeserializer)
    _JsDeserializer.name = "_JsDeserializer";
  $desc = $collectedClasses._JsDeserializer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _JsDeserializer.prototype = $desc;
  function _JsVisitedMap(tagged) {
    this.tagged = tagged;
  }
  _JsVisitedMap.builtin$cls = "_JsVisitedMap";
  if (!"name" in _JsVisitedMap)
    _JsVisitedMap.name = "_JsVisitedMap";
  $desc = $collectedClasses._JsVisitedMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _JsVisitedMap.prototype = $desc;
  function _MessageTraverserVisitedMap() {
  }
  _MessageTraverserVisitedMap.builtin$cls = "_MessageTraverserVisitedMap";
  if (!"name" in _MessageTraverserVisitedMap)
    _MessageTraverserVisitedMap.name = "_MessageTraverserVisitedMap";
  $desc = $collectedClasses._MessageTraverserVisitedMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _MessageTraverserVisitedMap.prototype = $desc;
  function _MessageTraverser() {
  }
  _MessageTraverser.builtin$cls = "_MessageTraverser";
  if (!"name" in _MessageTraverser)
    _MessageTraverser.name = "_MessageTraverser";
  $desc = $collectedClasses._MessageTraverser;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _MessageTraverser.prototype = $desc;
  function BoundClosure$1(_self, __js_helper$_target, _receiver, __js_helper$_name) {
    this._self = _self;
    this.__js_helper$_target = __js_helper$_target;
    this._receiver = _receiver;
    this.__js_helper$_name = __js_helper$_name;
  }
  BoundClosure$1.builtin$cls = "BoundClosure$1";
  $desc = $collectedClasses.BoundClosure$1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BoundClosure$1.prototype = $desc;
  function _Copier() {
  }
  _Copier.builtin$cls = "_Copier";
  if (!"name" in _Copier)
    _Copier.name = "_Copier";
  $desc = $collectedClasses._Copier;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Copier.prototype = $desc;
  function _Copier_visitMap_closure(box_0, this_1) {
    this.box_0 = box_0;
    this.this_1 = this_1;
  }
  _Copier_visitMap_closure.builtin$cls = "_Copier_visitMap_closure";
  if (!"name" in _Copier_visitMap_closure)
    _Copier_visitMap_closure.name = "_Copier_visitMap_closure";
  $desc = $collectedClasses._Copier_visitMap_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Copier_visitMap_closure.prototype = $desc;
  function _Serializer() {
  }
  _Serializer.builtin$cls = "_Serializer";
  if (!"name" in _Serializer)
    _Serializer.name = "_Serializer";
  $desc = $collectedClasses._Serializer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Serializer.prototype = $desc;
  function _Deserializer() {
  }
  _Deserializer.builtin$cls = "_Deserializer";
  if (!"name" in _Deserializer)
    _Deserializer.name = "_Deserializer";
  $desc = $collectedClasses._Deserializer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Deserializer.prototype = $desc;
  function TimerImpl(_once, _inEventLoop, _handle) {
    this._once = _once;
    this._inEventLoop = _inEventLoop;
    this._handle = _handle;
  }
  TimerImpl.builtin$cls = "TimerImpl";
  if (!"name" in TimerImpl)
    TimerImpl.name = "TimerImpl";
  $desc = $collectedClasses.TimerImpl;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TimerImpl.prototype = $desc;
  function TimerImpl_internalCallback(this_0, callback_1) {
    this.this_0 = this_0;
    this.callback_1 = callback_1;
  }
  TimerImpl_internalCallback.builtin$cls = "TimerImpl_internalCallback";
  if (!"name" in TimerImpl_internalCallback)
    TimerImpl_internalCallback.name = "TimerImpl_internalCallback";
  $desc = $collectedClasses.TimerImpl_internalCallback;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TimerImpl_internalCallback.prototype = $desc;
  function TimerImpl_internalCallback0(this_2, callback_3) {
    this.this_2 = this_2;
    this.callback_3 = callback_3;
  }
  TimerImpl_internalCallback0.builtin$cls = "TimerImpl_internalCallback0";
  if (!"name" in TimerImpl_internalCallback0)
    TimerImpl_internalCallback0.name = "TimerImpl_internalCallback0";
  $desc = $collectedClasses.TimerImpl_internalCallback0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TimerImpl_internalCallback0.prototype = $desc;
  function TypeErrorDecoder(_pattern, _arguments, _argumentsExpr, _expr, _method, _receiver) {
    this._pattern = _pattern;
    this._arguments = _arguments;
    this._argumentsExpr = _argumentsExpr;
    this._expr = _expr;
    this._method = _method;
    this._receiver = _receiver;
  }
  TypeErrorDecoder.builtin$cls = "TypeErrorDecoder";
  if (!"name" in TypeErrorDecoder)
    TypeErrorDecoder.name = "TypeErrorDecoder";
  $desc = $collectedClasses.TypeErrorDecoder;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypeErrorDecoder.prototype = $desc;
  function NullError(_message, _method) {
    this._message = _message;
    this._method = _method;
  }
  NullError.builtin$cls = "NullError";
  if (!"name" in NullError)
    NullError.name = "NullError";
  $desc = $collectedClasses.NullError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NullError.prototype = $desc;
  function JsNoSuchMethodError(_message, _method, _receiver) {
    this._message = _message;
    this._method = _method;
    this._receiver = _receiver;
  }
  JsNoSuchMethodError.builtin$cls = "JsNoSuchMethodError";
  if (!"name" in JsNoSuchMethodError)
    JsNoSuchMethodError.name = "JsNoSuchMethodError";
  $desc = $collectedClasses.JsNoSuchMethodError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsNoSuchMethodError.prototype = $desc;
  function UnknownJsTypeError(_message) {
    this._message = _message;
  }
  UnknownJsTypeError.builtin$cls = "UnknownJsTypeError";
  if (!"name" in UnknownJsTypeError)
    UnknownJsTypeError.name = "UnknownJsTypeError";
  $desc = $collectedClasses.UnknownJsTypeError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UnknownJsTypeError.prototype = $desc;
  function unwrapException_saveStackTrace(ex_0) {
    this.ex_0 = ex_0;
  }
  unwrapException_saveStackTrace.builtin$cls = "unwrapException_saveStackTrace";
  if (!"name" in unwrapException_saveStackTrace)
    unwrapException_saveStackTrace.name = "unwrapException_saveStackTrace";
  $desc = $collectedClasses.unwrapException_saveStackTrace;
  if ($desc instanceof Array)
    $desc = $desc[1];
  unwrapException_saveStackTrace.prototype = $desc;
  function _StackTrace(_exception, _trace) {
    this._exception = _exception;
    this._trace = _trace;
  }
  _StackTrace.builtin$cls = "_StackTrace";
  if (!"name" in _StackTrace)
    _StackTrace.name = "_StackTrace";
  $desc = $collectedClasses._StackTrace;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StackTrace.prototype = $desc;
  function invokeClosure_closure(closure_0) {
    this.closure_0 = closure_0;
  }
  invokeClosure_closure.builtin$cls = "invokeClosure_closure";
  if (!"name" in invokeClosure_closure)
    invokeClosure_closure.name = "invokeClosure_closure";
  $desc = $collectedClasses.invokeClosure_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  invokeClosure_closure.prototype = $desc;
  function invokeClosure_closure0(closure_1, arg1_2) {
    this.closure_1 = closure_1;
    this.arg1_2 = arg1_2;
  }
  invokeClosure_closure0.builtin$cls = "invokeClosure_closure0";
  if (!"name" in invokeClosure_closure0)
    invokeClosure_closure0.name = "invokeClosure_closure0";
  $desc = $collectedClasses.invokeClosure_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  invokeClosure_closure0.prototype = $desc;
  function invokeClosure_closure1(closure_3, arg1_4, arg2_5) {
    this.closure_3 = closure_3;
    this.arg1_4 = arg1_4;
    this.arg2_5 = arg2_5;
  }
  invokeClosure_closure1.builtin$cls = "invokeClosure_closure1";
  if (!"name" in invokeClosure_closure1)
    invokeClosure_closure1.name = "invokeClosure_closure1";
  $desc = $collectedClasses.invokeClosure_closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  invokeClosure_closure1.prototype = $desc;
  function invokeClosure_closure2(closure_6, arg1_7, arg2_8, arg3_9) {
    this.closure_6 = closure_6;
    this.arg1_7 = arg1_7;
    this.arg2_8 = arg2_8;
    this.arg3_9 = arg3_9;
  }
  invokeClosure_closure2.builtin$cls = "invokeClosure_closure2";
  if (!"name" in invokeClosure_closure2)
    invokeClosure_closure2.name = "invokeClosure_closure2";
  $desc = $collectedClasses.invokeClosure_closure2;
  if ($desc instanceof Array)
    $desc = $desc[1];
  invokeClosure_closure2.prototype = $desc;
  function invokeClosure_closure3(closure_10, arg1_11, arg2_12, arg3_13, arg4_14) {
    this.closure_10 = closure_10;
    this.arg1_11 = arg1_11;
    this.arg2_12 = arg2_12;
    this.arg3_13 = arg3_13;
    this.arg4_14 = arg4_14;
  }
  invokeClosure_closure3.builtin$cls = "invokeClosure_closure3";
  if (!"name" in invokeClosure_closure3)
    invokeClosure_closure3.name = "invokeClosure_closure3";
  $desc = $collectedClasses.invokeClosure_closure3;
  if ($desc instanceof Array)
    $desc = $desc[1];
  invokeClosure_closure3.prototype = $desc;
  function Closure() {
  }
  Closure.builtin$cls = "Closure";
  if (!"name" in Closure)
    Closure.name = "Closure";
  $desc = $collectedClasses.Closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Closure.prototype = $desc;
  function BoundClosure(_self, __js_helper$_target, _receiver, __js_helper$_name) {
    this._self = _self;
    this.__js_helper$_target = __js_helper$_target;
    this._receiver = _receiver;
    this.__js_helper$_name = __js_helper$_name;
  }
  BoundClosure.builtin$cls = "BoundClosure";
  if (!"name" in BoundClosure)
    BoundClosure.name = "BoundClosure";
  $desc = $collectedClasses.BoundClosure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BoundClosure.prototype = $desc;
  function CastErrorImplementation(message) {
    this.message = message;
  }
  CastErrorImplementation.builtin$cls = "CastErrorImplementation";
  if (!"name" in CastErrorImplementation)
    CastErrorImplementation.name = "CastErrorImplementation";
  $desc = $collectedClasses.CastErrorImplementation;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CastErrorImplementation.prototype = $desc;
  function TypeImpl(_typeName, _unmangledName) {
    this._typeName = _typeName;
    this._unmangledName = _unmangledName;
  }
  TypeImpl.builtin$cls = "TypeImpl";
  if (!"name" in TypeImpl)
    TypeImpl.name = "TypeImpl";
  $desc = $collectedClasses.TypeImpl;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypeImpl.prototype = $desc;
  function initHooks_closure(getTag_0) {
    this.getTag_0 = getTag_0;
  }
  initHooks_closure.builtin$cls = "initHooks_closure";
  if (!"name" in initHooks_closure)
    initHooks_closure.name = "initHooks_closure";
  $desc = $collectedClasses.initHooks_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  initHooks_closure.prototype = $desc;
  function initHooks_closure0(getUnknownTag_1) {
    this.getUnknownTag_1 = getUnknownTag_1;
  }
  initHooks_closure0.builtin$cls = "initHooks_closure0";
  if (!"name" in initHooks_closure0)
    initHooks_closure0.name = "initHooks_closure0";
  $desc = $collectedClasses.initHooks_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  initHooks_closure0.prototype = $desc;
  function initHooks_closure1(prototypeForTag_2) {
    this.prototypeForTag_2 = prototypeForTag_2;
  }
  initHooks_closure1.builtin$cls = "initHooks_closure1";
  if (!"name" in initHooks_closure1)
    initHooks_closure1.name = "initHooks_closure1";
  $desc = $collectedClasses.initHooks_closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  initHooks_closure1.prototype = $desc;
  function initGraphics_closure() {
  }
  initGraphics_closure.builtin$cls = "initGraphics_closure";
  if (!"name" in initGraphics_closure)
    initGraphics_closure.name = "initGraphics_closure";
  $desc = $collectedClasses.initGraphics_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  initGraphics_closure.prototype = $desc;
  function initDbullet_closure() {
  }
  initDbullet_closure.builtin$cls = "initDbullet_closure";
  if (!"name" in initDbullet_closure)
    initDbullet_closure.name = "initDbullet_closure";
  $desc = $collectedClasses.initDbullet_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  initDbullet_closure.prototype = $desc;
  function ListIterator(_iterable, _length, _index, _current) {
    this._iterable = _iterable;
    this._length = _length;
    this._index = _index;
    this._current = _current;
  }
  ListIterator.builtin$cls = "ListIterator";
  if (!"name" in ListIterator)
    ListIterator.name = "ListIterator";
  $desc = $collectedClasses.ListIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ListIterator.prototype = $desc;
  function MappedIterable(_iterable, _f) {
    this._iterable = _iterable;
    this._f = _f;
  }
  MappedIterable.builtin$cls = "MappedIterable";
  if (!"name" in MappedIterable)
    MappedIterable.name = "MappedIterable";
  $desc = $collectedClasses.MappedIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MappedIterable.prototype = $desc;
  function EfficientLengthMappedIterable(_iterable, _f) {
    this._iterable = _iterable;
    this._f = _f;
  }
  EfficientLengthMappedIterable.builtin$cls = "EfficientLengthMappedIterable";
  if (!"name" in EfficientLengthMappedIterable)
    EfficientLengthMappedIterable.name = "EfficientLengthMappedIterable";
  $desc = $collectedClasses.EfficientLengthMappedIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  EfficientLengthMappedIterable.prototype = $desc;
  function MappedIterator(_current, _iterator, _f) {
    this._current = _current;
    this._iterator = _iterator;
    this._f = _f;
  }
  MappedIterator.builtin$cls = "MappedIterator";
  if (!"name" in MappedIterator)
    MappedIterator.name = "MappedIterator";
  $desc = $collectedClasses.MappedIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MappedIterator.prototype = $desc;
  function FixedLengthListMixin() {
  }
  FixedLengthListMixin.builtin$cls = "FixedLengthListMixin";
  if (!"name" in FixedLengthListMixin)
    FixedLengthListMixin.name = "FixedLengthListMixin";
  $desc = $collectedClasses.FixedLengthListMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FixedLengthListMixin.prototype = $desc;
  function _AsyncError(error, stackTrace) {
    this.error = error;
    this.stackTrace = stackTrace;
  }
  _AsyncError.builtin$cls = "_AsyncError";
  if (!"name" in _AsyncError)
    _AsyncError.name = "_AsyncError";
  $desc = $collectedClasses._AsyncError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _AsyncError.prototype = $desc;
  _AsyncError.prototype.get$error = function(receiver) {
    return this.error;
  };
  _AsyncError.prototype.get$stackTrace = function() {
    return this.stackTrace;
  };
  function _BroadcastStream(_async$_controller) {
    this._async$_controller = _async$_controller;
  }
  _BroadcastStream.builtin$cls = "_BroadcastStream";
  if (!"name" in _BroadcastStream)
    _BroadcastStream.name = "_BroadcastStream";
  $desc = $collectedClasses._BroadcastStream;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BroadcastStream.prototype = $desc;
  function _BroadcastSubscription(_eventState, _async$_next, _async$_previous, _async$_controller, _async$_onData, _onError, _onDone, _zone, _state, _cancelFuture, _pending) {
    this._eventState = _eventState;
    this._async$_next = _async$_next;
    this._async$_previous = _async$_previous;
    this._async$_controller = _async$_controller;
    this._async$_onData = _async$_onData;
    this._onError = _onError;
    this._onDone = _onDone;
    this._zone = _zone;
    this._state = _state;
    this._cancelFuture = _cancelFuture;
    this._pending = _pending;
  }
  _BroadcastSubscription.builtin$cls = "_BroadcastSubscription";
  if (!"name" in _BroadcastSubscription)
    _BroadcastSubscription.name = "_BroadcastSubscription";
  $desc = $collectedClasses._BroadcastSubscription;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BroadcastSubscription.prototype = $desc;
  _BroadcastSubscription.prototype.get$_async$_next = function() {
    return this._async$_next;
  };
  _BroadcastSubscription.prototype.set$_async$_next = function(v) {
    return this._async$_next = v;
  };
  _BroadcastSubscription.prototype.set$_async$_previous = function(v) {
    return this._async$_previous = v;
  };
  function BoundClosure$0(_self, __js_helper$_target, _receiver, __js_helper$_name) {
    this._self = _self;
    this.__js_helper$_target = __js_helper$_target;
    this._receiver = _receiver;
    this.__js_helper$_name = __js_helper$_name;
  }
  BoundClosure$0.builtin$cls = "BoundClosure$0";
  $desc = $collectedClasses.BoundClosure$0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BoundClosure$0.prototype = $desc;
  function _BroadcastStreamController(_async$_next, _async$_previous) {
    this._async$_next = _async$_next;
    this._async$_previous = _async$_previous;
  }
  _BroadcastStreamController.builtin$cls = "_BroadcastStreamController";
  if (!"name" in _BroadcastStreamController)
    _BroadcastStreamController.name = "_BroadcastStreamController";
  $desc = $collectedClasses._BroadcastStreamController;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BroadcastStreamController.prototype = $desc;
  _BroadcastStreamController.prototype.set$_async$_next = function(v) {
    return this._async$_next = v;
  };
  _BroadcastStreamController.prototype.set$_async$_previous = function(v) {
    return this._async$_previous = v;
  };
  function _SyncBroadcastStreamController(_onListen, _onCancel, _state, _async$_next, _async$_previous, _addStreamState, _doneFuture) {
    this._onListen = _onListen;
    this._onCancel = _onCancel;
    this._state = _state;
    this._async$_next = _async$_next;
    this._async$_previous = _async$_previous;
    this._addStreamState = _addStreamState;
    this._doneFuture = _doneFuture;
  }
  _SyncBroadcastStreamController.builtin$cls = "_SyncBroadcastStreamController";
  if (!"name" in _SyncBroadcastStreamController)
    _SyncBroadcastStreamController.name = "_SyncBroadcastStreamController";
  $desc = $collectedClasses._SyncBroadcastStreamController;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SyncBroadcastStreamController.prototype = $desc;
  function _SyncBroadcastStreamController__sendData_closure(this_0, data_1) {
    this.this_0 = this_0;
    this.data_1 = data_1;
  }
  _SyncBroadcastStreamController__sendData_closure.builtin$cls = "_SyncBroadcastStreamController__sendData_closure";
  if (!"name" in _SyncBroadcastStreamController__sendData_closure)
    _SyncBroadcastStreamController__sendData_closure.name = "_SyncBroadcastStreamController__sendData_closure";
  $desc = $collectedClasses._SyncBroadcastStreamController__sendData_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SyncBroadcastStreamController__sendData_closure.prototype = $desc;
  function _AsyncBroadcastStreamController(_onListen, _onCancel, _state, _async$_next, _async$_previous, _addStreamState, _doneFuture) {
    this._onListen = _onListen;
    this._onCancel = _onCancel;
    this._state = _state;
    this._async$_next = _async$_next;
    this._async$_previous = _async$_previous;
    this._addStreamState = _addStreamState;
    this._doneFuture = _doneFuture;
  }
  _AsyncBroadcastStreamController.builtin$cls = "_AsyncBroadcastStreamController";
  if (!"name" in _AsyncBroadcastStreamController)
    _AsyncBroadcastStreamController.name = "_AsyncBroadcastStreamController";
  $desc = $collectedClasses._AsyncBroadcastStreamController;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _AsyncBroadcastStreamController.prototype = $desc;
  function Future() {
  }
  Future.builtin$cls = "Future";
  if (!"name" in Future)
    Future.name = "Future";
  $desc = $collectedClasses.Future;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Future.prototype = $desc;
  function Future_wait_handleError(box_0) {
    this.box_0 = box_0;
  }
  Future_wait_handleError.builtin$cls = "Future_wait_handleError";
  if (!"name" in Future_wait_handleError)
    Future_wait_handleError.name = "Future_wait_handleError";
  $desc = $collectedClasses.Future_wait_handleError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Future_wait_handleError.prototype = $desc;
  function Future_wait_closure(box_0, pos_1) {
    this.box_0 = box_0;
    this.pos_1 = pos_1;
  }
  Future_wait_closure.builtin$cls = "Future_wait_closure";
  if (!"name" in Future_wait_closure)
    Future_wait_closure.name = "Future_wait_closure";
  $desc = $collectedClasses.Future_wait_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Future_wait_closure.prototype = $desc;
  function _Completer() {
  }
  _Completer.builtin$cls = "_Completer";
  if (!"name" in _Completer)
    _Completer.name = "_Completer";
  $desc = $collectedClasses._Completer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Completer.prototype = $desc;
  function _AsyncCompleter(future) {
    this.future = future;
  }
  _AsyncCompleter.builtin$cls = "_AsyncCompleter";
  if (!"name" in _AsyncCompleter)
    _AsyncCompleter.name = "_AsyncCompleter";
  $desc = $collectedClasses._AsyncCompleter;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _AsyncCompleter.prototype = $desc;
  function _SyncCompleter(future) {
    this.future = future;
  }
  _SyncCompleter.builtin$cls = "_SyncCompleter";
  if (!"name" in _SyncCompleter)
    _SyncCompleter.name = "_SyncCompleter";
  $desc = $collectedClasses._SyncCompleter;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SyncCompleter.prototype = $desc;
  function BoundClosure$2(_self, __js_helper$_target, _receiver, __js_helper$_name) {
    this._self = _self;
    this.__js_helper$_target = __js_helper$_target;
    this._receiver = _receiver;
    this.__js_helper$_name = __js_helper$_name;
  }
  BoundClosure$2.builtin$cls = "BoundClosure$2";
  $desc = $collectedClasses.BoundClosure$2;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BoundClosure$2.prototype = $desc;
  function _Future(_state, _zone, _resultOrListeners, _nextListener, _onValueCallback, _errorTestCallback, _onErrorCallback, _whenCompleteActionCallback) {
    this._state = _state;
    this._zone = _zone;
    this._resultOrListeners = _resultOrListeners;
    this._nextListener = _nextListener;
    this._onValueCallback = _onValueCallback;
    this._errorTestCallback = _errorTestCallback;
    this._onErrorCallback = _onErrorCallback;
    this._whenCompleteActionCallback = _whenCompleteActionCallback;
  }
  _Future.builtin$cls = "_Future";
  if (!"name" in _Future)
    _Future.name = "_Future";
  $desc = $collectedClasses._Future;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future.prototype = $desc;
  _Future.prototype.get$_zone = function() {
    return this._zone;
  };
  _Future.prototype.get$_nextListener = function() {
    return this._nextListener;
  };
  function _Future__addListener_closure(this_0, listener_1) {
    this.this_0 = this_0;
    this.listener_1 = listener_1;
  }
  _Future__addListener_closure.builtin$cls = "_Future__addListener_closure";
  if (!"name" in _Future__addListener_closure)
    _Future__addListener_closure.name = "_Future__addListener_closure";
  $desc = $collectedClasses._Future__addListener_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__addListener_closure.prototype = $desc;
  function _Future__chainFutures_closure(target_0) {
    this.target_0 = target_0;
  }
  _Future__chainFutures_closure.builtin$cls = "_Future__chainFutures_closure";
  if (!"name" in _Future__chainFutures_closure)
    _Future__chainFutures_closure.name = "_Future__chainFutures_closure";
  $desc = $collectedClasses._Future__chainFutures_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__chainFutures_closure.prototype = $desc;
  function _Future__chainFutures_closure0(target_1) {
    this.target_1 = target_1;
  }
  _Future__chainFutures_closure0.builtin$cls = "_Future__chainFutures_closure0";
  if (!"name" in _Future__chainFutures_closure0)
    _Future__chainFutures_closure0.name = "_Future__chainFutures_closure0";
  $desc = $collectedClasses._Future__chainFutures_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__chainFutures_closure0.prototype = $desc;
  function _Future__asyncComplete_closure(this_0, value_1) {
    this.this_0 = this_0;
    this.value_1 = value_1;
  }
  _Future__asyncComplete_closure.builtin$cls = "_Future__asyncComplete_closure";
  if (!"name" in _Future__asyncComplete_closure)
    _Future__asyncComplete_closure.name = "_Future__asyncComplete_closure";
  $desc = $collectedClasses._Future__asyncComplete_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__asyncComplete_closure.prototype = $desc;
  function _Future__asyncCompleteError_closure(this_0, error_1, stackTrace_2) {
    this.this_0 = this_0;
    this.error_1 = error_1;
    this.stackTrace_2 = stackTrace_2;
  }
  _Future__asyncCompleteError_closure.builtin$cls = "_Future__asyncCompleteError_closure";
  if (!"name" in _Future__asyncCompleteError_closure)
    _Future__asyncCompleteError_closure.name = "_Future__asyncCompleteError_closure";
  $desc = $collectedClasses._Future__asyncCompleteError_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__asyncCompleteError_closure.prototype = $desc;
  function _Future__propagateToListeners_closure(box_2, listener_3) {
    this.box_2 = box_2;
    this.listener_3 = listener_3;
  }
  _Future__propagateToListeners_closure.builtin$cls = "_Future__propagateToListeners_closure";
  if (!"name" in _Future__propagateToListeners_closure)
    _Future__propagateToListeners_closure.name = "_Future__propagateToListeners_closure";
  $desc = $collectedClasses._Future__propagateToListeners_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__propagateToListeners_closure.prototype = $desc;
  function _Future__propagateToListeners_closure0(box_2, box_1, hasError_4, listener_5) {
    this.box_2 = box_2;
    this.box_1 = box_1;
    this.hasError_4 = hasError_4;
    this.listener_5 = listener_5;
  }
  _Future__propagateToListeners_closure0.builtin$cls = "_Future__propagateToListeners_closure0";
  if (!"name" in _Future__propagateToListeners_closure0)
    _Future__propagateToListeners_closure0.name = "_Future__propagateToListeners_closure0";
  $desc = $collectedClasses._Future__propagateToListeners_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__propagateToListeners_closure0.prototype = $desc;
  function _Future__propagateToListeners__closure(box_2, listener_6) {
    this.box_2 = box_2;
    this.listener_6 = listener_6;
  }
  _Future__propagateToListeners__closure.builtin$cls = "_Future__propagateToListeners__closure";
  if (!"name" in _Future__propagateToListeners__closure)
    _Future__propagateToListeners__closure.name = "_Future__propagateToListeners__closure";
  $desc = $collectedClasses._Future__propagateToListeners__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__propagateToListeners__closure.prototype = $desc;
  function _Future__propagateToListeners__closure0(box_0, listener_7) {
    this.box_0 = box_0;
    this.listener_7 = listener_7;
  }
  _Future__propagateToListeners__closure0.builtin$cls = "_Future__propagateToListeners__closure0";
  if (!"name" in _Future__propagateToListeners__closure0)
    _Future__propagateToListeners__closure0.name = "_Future__propagateToListeners__closure0";
  $desc = $collectedClasses._Future__propagateToListeners__closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__propagateToListeners__closure0.prototype = $desc;
  function Stream() {
  }
  Stream.builtin$cls = "Stream";
  if (!"name" in Stream)
    Stream.name = "Stream";
  $desc = $collectedClasses.Stream;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream.prototype = $desc;
  function Stream_forEach_closure(box_0, this_1, action_2, future_3) {
    this.box_0 = box_0;
    this.this_1 = this_1;
    this.action_2 = action_2;
    this.future_3 = future_3;
  }
  Stream_forEach_closure.builtin$cls = "Stream_forEach_closure";
  if (!"name" in Stream_forEach_closure)
    Stream_forEach_closure.name = "Stream_forEach_closure";
  $desc = $collectedClasses.Stream_forEach_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_forEach_closure.prototype = $desc;
  function Stream_forEach__closure(action_4, element_5) {
    this.action_4 = action_4;
    this.element_5 = element_5;
  }
  Stream_forEach__closure.builtin$cls = "Stream_forEach__closure";
  if (!"name" in Stream_forEach__closure)
    Stream_forEach__closure.name = "Stream_forEach__closure";
  $desc = $collectedClasses.Stream_forEach__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_forEach__closure.prototype = $desc;
  function Stream_forEach__closure0() {
  }
  Stream_forEach__closure0.builtin$cls = "Stream_forEach__closure0";
  if (!"name" in Stream_forEach__closure0)
    Stream_forEach__closure0.name = "Stream_forEach__closure0";
  $desc = $collectedClasses.Stream_forEach__closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_forEach__closure0.prototype = $desc;
  function Stream_forEach_closure0(future_6) {
    this.future_6 = future_6;
  }
  Stream_forEach_closure0.builtin$cls = "Stream_forEach_closure0";
  if (!"name" in Stream_forEach_closure0)
    Stream_forEach_closure0.name = "Stream_forEach_closure0";
  $desc = $collectedClasses.Stream_forEach_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_forEach_closure0.prototype = $desc;
  function Stream_length_closure(box_0) {
    this.box_0 = box_0;
  }
  Stream_length_closure.builtin$cls = "Stream_length_closure";
  if (!"name" in Stream_length_closure)
    Stream_length_closure.name = "Stream_length_closure";
  $desc = $collectedClasses.Stream_length_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_length_closure.prototype = $desc;
  function Stream_length_closure0(box_0, future_1) {
    this.box_0 = box_0;
    this.future_1 = future_1;
  }
  Stream_length_closure0.builtin$cls = "Stream_length_closure0";
  if (!"name" in Stream_length_closure0)
    Stream_length_closure0.name = "Stream_length_closure0";
  $desc = $collectedClasses.Stream_length_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_length_closure0.prototype = $desc;
  function StreamSubscription() {
  }
  StreamSubscription.builtin$cls = "StreamSubscription";
  if (!"name" in StreamSubscription)
    StreamSubscription.name = "StreamSubscription";
  $desc = $collectedClasses.StreamSubscription;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StreamSubscription.prototype = $desc;
  function _StreamController() {
  }
  _StreamController.builtin$cls = "_StreamController";
  if (!"name" in _StreamController)
    _StreamController.name = "_StreamController";
  $desc = $collectedClasses._StreamController;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StreamController.prototype = $desc;
  function _StreamController__subscribe_closure(this_0) {
    this.this_0 = this_0;
  }
  _StreamController__subscribe_closure.builtin$cls = "_StreamController__subscribe_closure";
  if (!"name" in _StreamController__subscribe_closure)
    _StreamController__subscribe_closure.name = "_StreamController__subscribe_closure";
  $desc = $collectedClasses._StreamController__subscribe_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StreamController__subscribe_closure.prototype = $desc;
  function _StreamController__recordCancel_complete(this_0) {
    this.this_0 = this_0;
  }
  _StreamController__recordCancel_complete.builtin$cls = "_StreamController__recordCancel_complete";
  if (!"name" in _StreamController__recordCancel_complete)
    _StreamController__recordCancel_complete.name = "_StreamController__recordCancel_complete";
  $desc = $collectedClasses._StreamController__recordCancel_complete;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StreamController__recordCancel_complete.prototype = $desc;
  function _SyncStreamControllerDispatch() {
  }
  _SyncStreamControllerDispatch.builtin$cls = "_SyncStreamControllerDispatch";
  if (!"name" in _SyncStreamControllerDispatch)
    _SyncStreamControllerDispatch.name = "_SyncStreamControllerDispatch";
  $desc = $collectedClasses._SyncStreamControllerDispatch;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SyncStreamControllerDispatch.prototype = $desc;
  function _AsyncStreamControllerDispatch() {
  }
  _AsyncStreamControllerDispatch.builtin$cls = "_AsyncStreamControllerDispatch";
  if (!"name" in _AsyncStreamControllerDispatch)
    _AsyncStreamControllerDispatch.name = "_AsyncStreamControllerDispatch";
  $desc = $collectedClasses._AsyncStreamControllerDispatch;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _AsyncStreamControllerDispatch.prototype = $desc;
  function _AsyncStreamController(_onListen, _onPause, _onResume, _onCancel, _varData, _state, _doneFuture) {
    this._onListen = _onListen;
    this._onPause = _onPause;
    this._onResume = _onResume;
    this._onCancel = _onCancel;
    this._varData = _varData;
    this._state = _state;
    this._doneFuture = _doneFuture;
  }
  _AsyncStreamController.builtin$cls = "_AsyncStreamController";
  if (!"name" in _AsyncStreamController)
    _AsyncStreamController.name = "_AsyncStreamController";
  $desc = $collectedClasses._AsyncStreamController;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _AsyncStreamController.prototype = $desc;
  _AsyncStreamController.prototype.get$_onListen = function() {
    return this._onListen;
  };
  _AsyncStreamController.prototype.get$_onPause = function() {
    return this._onPause;
  };
  _AsyncStreamController.prototype.get$_onResume = function() {
    return this._onResume;
  };
  _AsyncStreamController.prototype.get$_onCancel = function() {
    return this._onCancel;
  };
  function _StreamController__AsyncStreamControllerDispatch() {
  }
  _StreamController__AsyncStreamControllerDispatch.builtin$cls = "_StreamController__AsyncStreamControllerDispatch";
  if (!"name" in _StreamController__AsyncStreamControllerDispatch)
    _StreamController__AsyncStreamControllerDispatch.name = "_StreamController__AsyncStreamControllerDispatch";
  $desc = $collectedClasses._StreamController__AsyncStreamControllerDispatch;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StreamController__AsyncStreamControllerDispatch.prototype = $desc;
  function _SyncStreamController(_onListen, _onPause, _onResume, _onCancel, _varData, _state, _doneFuture) {
    this._onListen = _onListen;
    this._onPause = _onPause;
    this._onResume = _onResume;
    this._onCancel = _onCancel;
    this._varData = _varData;
    this._state = _state;
    this._doneFuture = _doneFuture;
  }
  _SyncStreamController.builtin$cls = "_SyncStreamController";
  if (!"name" in _SyncStreamController)
    _SyncStreamController.name = "_SyncStreamController";
  $desc = $collectedClasses._SyncStreamController;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SyncStreamController.prototype = $desc;
  _SyncStreamController.prototype.get$_onListen = function() {
    return this._onListen;
  };
  _SyncStreamController.prototype.get$_onPause = function() {
    return this._onPause;
  };
  _SyncStreamController.prototype.get$_onResume = function() {
    return this._onResume;
  };
  _SyncStreamController.prototype.get$_onCancel = function() {
    return this._onCancel;
  };
  function _StreamController__SyncStreamControllerDispatch() {
  }
  _StreamController__SyncStreamControllerDispatch.builtin$cls = "_StreamController__SyncStreamControllerDispatch";
  if (!"name" in _StreamController__SyncStreamControllerDispatch)
    _StreamController__SyncStreamControllerDispatch.name = "_StreamController__SyncStreamControllerDispatch";
  $desc = $collectedClasses._StreamController__SyncStreamControllerDispatch;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StreamController__SyncStreamControllerDispatch.prototype = $desc;
  function _ControllerStream(_async$_controller) {
    this._async$_controller = _async$_controller;
  }
  _ControllerStream.builtin$cls = "_ControllerStream";
  if (!"name" in _ControllerStream)
    _ControllerStream.name = "_ControllerStream";
  $desc = $collectedClasses._ControllerStream;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ControllerStream.prototype = $desc;
  function _ControllerSubscription(_async$_controller, _async$_onData, _onError, _onDone, _zone, _state, _cancelFuture, _pending) {
    this._async$_controller = _async$_controller;
    this._async$_onData = _async$_onData;
    this._onError = _onError;
    this._onDone = _onDone;
    this._zone = _zone;
    this._state = _state;
    this._cancelFuture = _cancelFuture;
    this._pending = _pending;
  }
  _ControllerSubscription.builtin$cls = "_ControllerSubscription";
  if (!"name" in _ControllerSubscription)
    _ControllerSubscription.name = "_ControllerSubscription";
  $desc = $collectedClasses._ControllerSubscription;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ControllerSubscription.prototype = $desc;
  _ControllerSubscription.prototype.get$_async$_controller = function() {
    return this._async$_controller;
  };
  function _EventSink() {
  }
  _EventSink.builtin$cls = "_EventSink";
  if (!"name" in _EventSink)
    _EventSink.name = "_EventSink";
  $desc = $collectedClasses._EventSink;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _EventSink.prototype = $desc;
  function _BufferingStreamSubscription(_async$_onData, _onError, _onDone, _zone, _state, _cancelFuture, _pending) {
    this._async$_onData = _async$_onData;
    this._onError = _onError;
    this._onDone = _onDone;
    this._zone = _zone;
    this._state = _state;
    this._cancelFuture = _cancelFuture;
    this._pending = _pending;
  }
  _BufferingStreamSubscription.builtin$cls = "_BufferingStreamSubscription";
  if (!"name" in _BufferingStreamSubscription)
    _BufferingStreamSubscription.name = "_BufferingStreamSubscription";
  $desc = $collectedClasses._BufferingStreamSubscription;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BufferingStreamSubscription.prototype = $desc;
  _BufferingStreamSubscription.prototype.get$_zone = function() {
    return this._zone;
  };
  function _BufferingStreamSubscription__sendDone_sendDone(this_0) {
    this.this_0 = this_0;
  }
  _BufferingStreamSubscription__sendDone_sendDone.builtin$cls = "_BufferingStreamSubscription__sendDone_sendDone";
  if (!"name" in _BufferingStreamSubscription__sendDone_sendDone)
    _BufferingStreamSubscription__sendDone_sendDone.name = "_BufferingStreamSubscription__sendDone_sendDone";
  $desc = $collectedClasses._BufferingStreamSubscription__sendDone_sendDone;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BufferingStreamSubscription__sendDone_sendDone.prototype = $desc;
  function _StreamImpl() {
  }
  _StreamImpl.builtin$cls = "_StreamImpl";
  if (!"name" in _StreamImpl)
    _StreamImpl.name = "_StreamImpl";
  $desc = $collectedClasses._StreamImpl;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StreamImpl.prototype = $desc;
  function _DelayedEvent(next) {
    this.next = next;
  }
  _DelayedEvent.builtin$cls = "_DelayedEvent";
  if (!"name" in _DelayedEvent)
    _DelayedEvent.name = "_DelayedEvent";
  $desc = $collectedClasses._DelayedEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _DelayedEvent.prototype = $desc;
  _DelayedEvent.prototype.get$next = function(receiver) {
    return this.next;
  };
  _DelayedEvent.prototype.set$next = function(receiver, v) {
    return this.next = v;
  };
  function _DelayedData(value, next) {
    this.value = value;
    this.next = next;
  }
  _DelayedData.builtin$cls = "_DelayedData";
  if (!"name" in _DelayedData)
    _DelayedData.name = "_DelayedData";
  $desc = $collectedClasses._DelayedData;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _DelayedData.prototype = $desc;
  _DelayedData.prototype.get$value = function(receiver) {
    return this.value;
  };
  function _DelayedDone() {
  }
  _DelayedDone.builtin$cls = "_DelayedDone";
  if (!"name" in _DelayedDone)
    _DelayedDone.name = "_DelayedDone";
  $desc = $collectedClasses._DelayedDone;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _DelayedDone.prototype = $desc;
  function _PendingEvents() {
  }
  _PendingEvents.builtin$cls = "_PendingEvents";
  if (!"name" in _PendingEvents)
    _PendingEvents.name = "_PendingEvents";
  $desc = $collectedClasses._PendingEvents;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _PendingEvents.prototype = $desc;
  function _PendingEvents_schedule_closure(this_0, dispatch_1) {
    this.this_0 = this_0;
    this.dispatch_1 = dispatch_1;
  }
  _PendingEvents_schedule_closure.builtin$cls = "_PendingEvents_schedule_closure";
  if (!"name" in _PendingEvents_schedule_closure)
    _PendingEvents_schedule_closure.name = "_PendingEvents_schedule_closure";
  $desc = $collectedClasses._PendingEvents_schedule_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _PendingEvents_schedule_closure.prototype = $desc;
  function _StreamImplEvents(firstPendingEvent, lastPendingEvent, _state) {
    this.firstPendingEvent = firstPendingEvent;
    this.lastPendingEvent = lastPendingEvent;
    this._state = _state;
  }
  _StreamImplEvents.builtin$cls = "_StreamImplEvents";
  if (!"name" in _StreamImplEvents)
    _StreamImplEvents.name = "_StreamImplEvents";
  $desc = $collectedClasses._StreamImplEvents;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StreamImplEvents.prototype = $desc;
  function _cancelAndError_closure(future_0, error_1, stackTrace_2) {
    this.future_0 = future_0;
    this.error_1 = error_1;
    this.stackTrace_2 = stackTrace_2;
  }
  _cancelAndError_closure.builtin$cls = "_cancelAndError_closure";
  if (!"name" in _cancelAndError_closure)
    _cancelAndError_closure.name = "_cancelAndError_closure";
  $desc = $collectedClasses._cancelAndError_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _cancelAndError_closure.prototype = $desc;
  function _cancelAndErrorClosure_closure(subscription_0, future_1) {
    this.subscription_0 = subscription_0;
    this.future_1 = future_1;
  }
  _cancelAndErrorClosure_closure.builtin$cls = "_cancelAndErrorClosure_closure";
  if (!"name" in _cancelAndErrorClosure_closure)
    _cancelAndErrorClosure_closure.name = "_cancelAndErrorClosure_closure";
  $desc = $collectedClasses._cancelAndErrorClosure_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _cancelAndErrorClosure_closure.prototype = $desc;
  function _BaseZone() {
  }
  _BaseZone.builtin$cls = "_BaseZone";
  if (!"name" in _BaseZone)
    _BaseZone.name = "_BaseZone";
  $desc = $collectedClasses._BaseZone;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BaseZone.prototype = $desc;
  function _BaseZone_bindCallback_closure(this_0, registered_1) {
    this.this_0 = this_0;
    this.registered_1 = registered_1;
  }
  _BaseZone_bindCallback_closure.builtin$cls = "_BaseZone_bindCallback_closure";
  if (!"name" in _BaseZone_bindCallback_closure)
    _BaseZone_bindCallback_closure.name = "_BaseZone_bindCallback_closure";
  $desc = $collectedClasses._BaseZone_bindCallback_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BaseZone_bindCallback_closure.prototype = $desc;
  function _BaseZone_bindCallback_closure0(this_2, registered_3) {
    this.this_2 = this_2;
    this.registered_3 = registered_3;
  }
  _BaseZone_bindCallback_closure0.builtin$cls = "_BaseZone_bindCallback_closure0";
  if (!"name" in _BaseZone_bindCallback_closure0)
    _BaseZone_bindCallback_closure0.name = "_BaseZone_bindCallback_closure0";
  $desc = $collectedClasses._BaseZone_bindCallback_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BaseZone_bindCallback_closure0.prototype = $desc;
  function _BaseZone_bindUnaryCallback_closure(this_0, registered_1) {
    this.this_0 = this_0;
    this.registered_1 = registered_1;
  }
  _BaseZone_bindUnaryCallback_closure.builtin$cls = "_BaseZone_bindUnaryCallback_closure";
  if (!"name" in _BaseZone_bindUnaryCallback_closure)
    _BaseZone_bindUnaryCallback_closure.name = "_BaseZone_bindUnaryCallback_closure";
  $desc = $collectedClasses._BaseZone_bindUnaryCallback_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BaseZone_bindUnaryCallback_closure.prototype = $desc;
  function _BaseZone_bindUnaryCallback_closure0(this_2, registered_3) {
    this.this_2 = this_2;
    this.registered_3 = registered_3;
  }
  _BaseZone_bindUnaryCallback_closure0.builtin$cls = "_BaseZone_bindUnaryCallback_closure0";
  if (!"name" in _BaseZone_bindUnaryCallback_closure0)
    _BaseZone_bindUnaryCallback_closure0.name = "_BaseZone_bindUnaryCallback_closure0";
  $desc = $collectedClasses._BaseZone_bindUnaryCallback_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BaseZone_bindUnaryCallback_closure0.prototype = $desc;
  function _rootHandleUncaughtError_closure(error_0, stackTrace_1) {
    this.error_0 = error_0;
    this.stackTrace_1 = stackTrace_1;
  }
  _rootHandleUncaughtError_closure.builtin$cls = "_rootHandleUncaughtError_closure";
  if (!"name" in _rootHandleUncaughtError_closure)
    _rootHandleUncaughtError_closure.name = "_rootHandleUncaughtError_closure";
  $desc = $collectedClasses._rootHandleUncaughtError_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _rootHandleUncaughtError_closure.prototype = $desc;
  function _rootHandleUncaughtError__closure(error_2, stackTrace_3) {
    this.error_2 = error_2;
    this.stackTrace_3 = stackTrace_3;
  }
  _rootHandleUncaughtError__closure.builtin$cls = "_rootHandleUncaughtError__closure";
  if (!"name" in _rootHandleUncaughtError__closure)
    _rootHandleUncaughtError__closure.name = "_rootHandleUncaughtError__closure";
  $desc = $collectedClasses._rootHandleUncaughtError__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _rootHandleUncaughtError__closure.prototype = $desc;
  function _RootZone() {
  }
  _RootZone.builtin$cls = "_RootZone";
  if (!"name" in _RootZone)
    _RootZone.name = "_RootZone";
  $desc = $collectedClasses._RootZone;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _RootZone.prototype = $desc;
  function _HashMap(_collection$_length, _strings, _nums, _rest, _keys) {
    this._collection$_length = _collection$_length;
    this._strings = _strings;
    this._nums = _nums;
    this._rest = _rest;
    this._keys = _keys;
  }
  _HashMap.builtin$cls = "_HashMap";
  if (!"name" in _HashMap)
    _HashMap.name = "_HashMap";
  $desc = $collectedClasses._HashMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HashMap.prototype = $desc;
  function _HashMap_values_closure(this_0) {
    this.this_0 = this_0;
  }
  _HashMap_values_closure.builtin$cls = "_HashMap_values_closure";
  if (!"name" in _HashMap_values_closure)
    _HashMap_values_closure.name = "_HashMap_values_closure";
  $desc = $collectedClasses._HashMap_values_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HashMap_values_closure.prototype = $desc;
  function HashMapKeyIterable(_map) {
    this._map = _map;
  }
  HashMapKeyIterable.builtin$cls = "HashMapKeyIterable";
  if (!"name" in HashMapKeyIterable)
    HashMapKeyIterable.name = "HashMapKeyIterable";
  $desc = $collectedClasses.HashMapKeyIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HashMapKeyIterable.prototype = $desc;
  function HashMapKeyIterator(_map, _keys, _offset, _collection$_current) {
    this._map = _map;
    this._keys = _keys;
    this._offset = _offset;
    this._collection$_current = _collection$_current;
  }
  HashMapKeyIterator.builtin$cls = "HashMapKeyIterator";
  if (!"name" in HashMapKeyIterator)
    HashMapKeyIterator.name = "HashMapKeyIterator";
  $desc = $collectedClasses.HashMapKeyIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HashMapKeyIterator.prototype = $desc;
  function _LinkedHashMap(_collection$_length, _strings, _nums, _rest, _first, _last, _modifications) {
    this._collection$_length = _collection$_length;
    this._strings = _strings;
    this._nums = _nums;
    this._rest = _rest;
    this._first = _first;
    this._last = _last;
    this._modifications = _modifications;
  }
  _LinkedHashMap.builtin$cls = "_LinkedHashMap";
  if (!"name" in _LinkedHashMap)
    _LinkedHashMap.name = "_LinkedHashMap";
  $desc = $collectedClasses._LinkedHashMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _LinkedHashMap.prototype = $desc;
  function _LinkedHashMap_values_closure(this_0) {
    this.this_0 = this_0;
  }
  _LinkedHashMap_values_closure.builtin$cls = "_LinkedHashMap_values_closure";
  if (!"name" in _LinkedHashMap_values_closure)
    _LinkedHashMap_values_closure.name = "_LinkedHashMap_values_closure";
  $desc = $collectedClasses._LinkedHashMap_values_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _LinkedHashMap_values_closure.prototype = $desc;
  function LinkedHashMapCell(_key, _value, _next, _previous) {
    this._key = _key;
    this._value = _value;
    this._next = _next;
    this._previous = _previous;
  }
  LinkedHashMapCell.builtin$cls = "LinkedHashMapCell";
  if (!"name" in LinkedHashMapCell)
    LinkedHashMapCell.name = "LinkedHashMapCell";
  $desc = $collectedClasses.LinkedHashMapCell;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LinkedHashMapCell.prototype = $desc;
  LinkedHashMapCell.prototype.get$_key = function(receiver) {
    return this._key;
  };
  LinkedHashMapCell.prototype.get$_value = function() {
    return this._value;
  };
  LinkedHashMapCell.prototype.set$_value = function(v) {
    return this._value = v;
  };
  LinkedHashMapCell.prototype.get$_next = function() {
    return this._next;
  };
  LinkedHashMapCell.prototype.set$_next = function(v) {
    return this._next = v;
  };
  LinkedHashMapCell.prototype.get$_previous = function() {
    return this._previous;
  };
  LinkedHashMapCell.prototype.set$_previous = function(v) {
    return this._previous = v;
  };
  function LinkedHashMapKeyIterable(_map) {
    this._map = _map;
  }
  LinkedHashMapKeyIterable.builtin$cls = "LinkedHashMapKeyIterable";
  if (!"name" in LinkedHashMapKeyIterable)
    LinkedHashMapKeyIterable.name = "LinkedHashMapKeyIterable";
  $desc = $collectedClasses.LinkedHashMapKeyIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LinkedHashMapKeyIterable.prototype = $desc;
  function LinkedHashMapKeyIterator(_map, _modifications, _cell, _collection$_current) {
    this._map = _map;
    this._modifications = _modifications;
    this._cell = _cell;
    this._collection$_current = _collection$_current;
  }
  LinkedHashMapKeyIterator.builtin$cls = "LinkedHashMapKeyIterator";
  if (!"name" in LinkedHashMapKeyIterator)
    LinkedHashMapKeyIterator.name = "LinkedHashMapKeyIterator";
  $desc = $collectedClasses.LinkedHashMapKeyIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LinkedHashMapKeyIterator.prototype = $desc;
  function _HashSet() {
  }
  _HashSet.builtin$cls = "_HashSet";
  if (!"name" in _HashSet)
    _HashSet.name = "_HashSet";
  $desc = $collectedClasses._HashSet;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HashSet.prototype = $desc;
  function _IdentityHashSet(_collection$_length, _strings, _nums, _rest, _elements) {
    this._collection$_length = _collection$_length;
    this._strings = _strings;
    this._nums = _nums;
    this._rest = _rest;
    this._elements = _elements;
  }
  _IdentityHashSet.builtin$cls = "_IdentityHashSet";
  if (!"name" in _IdentityHashSet)
    _IdentityHashSet.name = "_IdentityHashSet";
  $desc = $collectedClasses._IdentityHashSet;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _IdentityHashSet.prototype = $desc;
  function HashSetIterator(_set, _elements, _offset, _collection$_current) {
    this._set = _set;
    this._elements = _elements;
    this._offset = _offset;
    this._collection$_current = _collection$_current;
  }
  HashSetIterator.builtin$cls = "HashSetIterator";
  if (!"name" in HashSetIterator)
    HashSetIterator.name = "HashSetIterator";
  $desc = $collectedClasses.HashSetIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HashSetIterator.prototype = $desc;
  function _LinkedHashSet(_collection$_length, _strings, _nums, _rest, _first, _last, _modifications) {
    this._collection$_length = _collection$_length;
    this._strings = _strings;
    this._nums = _nums;
    this._rest = _rest;
    this._first = _first;
    this._last = _last;
    this._modifications = _modifications;
  }
  _LinkedHashSet.builtin$cls = "_LinkedHashSet";
  if (!"name" in _LinkedHashSet)
    _LinkedHashSet.name = "_LinkedHashSet";
  $desc = $collectedClasses._LinkedHashSet;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _LinkedHashSet.prototype = $desc;
  function LinkedHashSetCell(_element, _next, _previous) {
    this._element = _element;
    this._next = _next;
    this._previous = _previous;
  }
  LinkedHashSetCell.builtin$cls = "LinkedHashSetCell";
  if (!"name" in LinkedHashSetCell)
    LinkedHashSetCell.name = "LinkedHashSetCell";
  $desc = $collectedClasses.LinkedHashSetCell;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LinkedHashSetCell.prototype = $desc;
  LinkedHashSetCell.prototype.get$_element = function() {
    return this._element;
  };
  LinkedHashSetCell.prototype.get$_next = function() {
    return this._next;
  };
  LinkedHashSetCell.prototype.set$_next = function(v) {
    return this._next = v;
  };
  LinkedHashSetCell.prototype.get$_previous = function() {
    return this._previous;
  };
  LinkedHashSetCell.prototype.set$_previous = function(v) {
    return this._previous = v;
  };
  function LinkedHashSetIterator(_set, _modifications, _cell, _collection$_current) {
    this._set = _set;
    this._modifications = _modifications;
    this._cell = _cell;
    this._collection$_current = _collection$_current;
  }
  LinkedHashSetIterator.builtin$cls = "LinkedHashSetIterator";
  if (!"name" in LinkedHashSetIterator)
    LinkedHashSetIterator.name = "LinkedHashSetIterator";
  $desc = $collectedClasses.LinkedHashSetIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LinkedHashSetIterator.prototype = $desc;
  function _HashSetBase() {
  }
  _HashSetBase.builtin$cls = "_HashSetBase";
  if (!"name" in _HashSetBase)
    _HashSetBase.name = "_HashSetBase";
  $desc = $collectedClasses._HashSetBase;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HashSetBase.prototype = $desc;
  function IterableBase() {
  }
  IterableBase.builtin$cls = "IterableBase";
  if (!"name" in IterableBase)
    IterableBase.name = "IterableBase";
  $desc = $collectedClasses.IterableBase;
  if ($desc instanceof Array)
    $desc = $desc[1];
  IterableBase.prototype = $desc;
  function ListMixin() {
  }
  ListMixin.builtin$cls = "ListMixin";
  if (!"name" in ListMixin)
    ListMixin.name = "ListMixin";
  $desc = $collectedClasses.ListMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ListMixin.prototype = $desc;
  function Maps_mapToString_closure(box_0, result_1) {
    this.box_0 = box_0;
    this.result_1 = result_1;
  }
  Maps_mapToString_closure.builtin$cls = "Maps_mapToString_closure";
  if (!"name" in Maps_mapToString_closure)
    Maps_mapToString_closure.name = "Maps_mapToString_closure";
  $desc = $collectedClasses.Maps_mapToString_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Maps_mapToString_closure.prototype = $desc;
  function ListQueue(_table, _head, _tail, _modificationCount) {
    this._table = _table;
    this._head = _head;
    this._tail = _tail;
    this._modificationCount = _modificationCount;
  }
  ListQueue.builtin$cls = "ListQueue";
  if (!"name" in ListQueue)
    ListQueue.name = "ListQueue";
  $desc = $collectedClasses.ListQueue;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ListQueue.prototype = $desc;
  function _ListQueueIterator(_queue, _end, _modificationCount, _collection$_position, _collection$_current) {
    this._queue = _queue;
    this._end = _end;
    this._modificationCount = _modificationCount;
    this._collection$_position = _collection$_position;
    this._collection$_current = _collection$_current;
  }
  _ListQueueIterator.builtin$cls = "_ListQueueIterator";
  if (!"name" in _ListQueueIterator)
    _ListQueueIterator.name = "_ListQueueIterator";
  $desc = $collectedClasses._ListQueueIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ListQueueIterator.prototype = $desc;
  function NoSuchMethodError_toString_closure(box_0) {
    this.box_0 = box_0;
  }
  NoSuchMethodError_toString_closure.builtin$cls = "NoSuchMethodError_toString_closure";
  if (!"name" in NoSuchMethodError_toString_closure)
    NoSuchMethodError_toString_closure.name = "NoSuchMethodError_toString_closure";
  $desc = $collectedClasses.NoSuchMethodError_toString_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NoSuchMethodError_toString_closure.prototype = $desc;
  function DateTime(millisecondsSinceEpoch, isUtc) {
    this.millisecondsSinceEpoch = millisecondsSinceEpoch;
    this.isUtc = isUtc;
  }
  DateTime.builtin$cls = "DateTime";
  if (!"name" in DateTime)
    DateTime.name = "DateTime";
  $desc = $collectedClasses.DateTime;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DateTime.prototype = $desc;
  function DateTime_toString_fourDigits() {
  }
  DateTime_toString_fourDigits.builtin$cls = "DateTime_toString_fourDigits";
  if (!"name" in DateTime_toString_fourDigits)
    DateTime_toString_fourDigits.name = "DateTime_toString_fourDigits";
  $desc = $collectedClasses.DateTime_toString_fourDigits;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DateTime_toString_fourDigits.prototype = $desc;
  function DateTime_toString_threeDigits() {
  }
  DateTime_toString_threeDigits.builtin$cls = "DateTime_toString_threeDigits";
  if (!"name" in DateTime_toString_threeDigits)
    DateTime_toString_threeDigits.name = "DateTime_toString_threeDigits";
  $desc = $collectedClasses.DateTime_toString_threeDigits;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DateTime_toString_threeDigits.prototype = $desc;
  function DateTime_toString_twoDigits() {
  }
  DateTime_toString_twoDigits.builtin$cls = "DateTime_toString_twoDigits";
  if (!"name" in DateTime_toString_twoDigits)
    DateTime_toString_twoDigits.name = "DateTime_toString_twoDigits";
  $desc = $collectedClasses.DateTime_toString_twoDigits;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DateTime_toString_twoDigits.prototype = $desc;
  function Duration(_duration) {
    this._duration = _duration;
  }
  Duration.builtin$cls = "Duration";
  if (!"name" in Duration)
    Duration.name = "Duration";
  $desc = $collectedClasses.Duration;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Duration.prototype = $desc;
  Duration.prototype.get$_duration = function() {
    return this._duration;
  };
  function Duration_toString_sixDigits() {
  }
  Duration_toString_sixDigits.builtin$cls = "Duration_toString_sixDigits";
  if (!"name" in Duration_toString_sixDigits)
    Duration_toString_sixDigits.name = "Duration_toString_sixDigits";
  $desc = $collectedClasses.Duration_toString_sixDigits;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Duration_toString_sixDigits.prototype = $desc;
  function Duration_toString_twoDigits() {
  }
  Duration_toString_twoDigits.builtin$cls = "Duration_toString_twoDigits";
  if (!"name" in Duration_toString_twoDigits)
    Duration_toString_twoDigits.name = "Duration_toString_twoDigits";
  $desc = $collectedClasses.Duration_toString_twoDigits;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Duration_toString_twoDigits.prototype = $desc;
  function Error() {
  }
  Error.builtin$cls = "Error";
  if (!"name" in Error)
    Error.name = "Error";
  $desc = $collectedClasses.Error;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Error.prototype = $desc;
  function NullThrownError() {
  }
  NullThrownError.builtin$cls = "NullThrownError";
  if (!"name" in NullThrownError)
    NullThrownError.name = "NullThrownError";
  $desc = $collectedClasses.NullThrownError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NullThrownError.prototype = $desc;
  function ArgumentError(message) {
    this.message = message;
  }
  ArgumentError.builtin$cls = "ArgumentError";
  if (!"name" in ArgumentError)
    ArgumentError.name = "ArgumentError";
  $desc = $collectedClasses.ArgumentError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ArgumentError.prototype = $desc;
  function RangeError(message) {
    this.message = message;
  }
  RangeError.builtin$cls = "RangeError";
  if (!"name" in RangeError)
    RangeError.name = "RangeError";
  $desc = $collectedClasses.RangeError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RangeError.prototype = $desc;
  function FallThroughError() {
  }
  FallThroughError.builtin$cls = "FallThroughError";
  if (!"name" in FallThroughError)
    FallThroughError.name = "FallThroughError";
  $desc = $collectedClasses.FallThroughError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FallThroughError.prototype = $desc;
  function UnsupportedError(message) {
    this.message = message;
  }
  UnsupportedError.builtin$cls = "UnsupportedError";
  if (!"name" in UnsupportedError)
    UnsupportedError.name = "UnsupportedError";
  $desc = $collectedClasses.UnsupportedError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UnsupportedError.prototype = $desc;
  function UnimplementedError(message) {
    this.message = message;
  }
  UnimplementedError.builtin$cls = "UnimplementedError";
  if (!"name" in UnimplementedError)
    UnimplementedError.name = "UnimplementedError";
  $desc = $collectedClasses.UnimplementedError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UnimplementedError.prototype = $desc;
  function StateError(message) {
    this.message = message;
  }
  StateError.builtin$cls = "StateError";
  if (!"name" in StateError)
    StateError.name = "StateError";
  $desc = $collectedClasses.StateError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StateError.prototype = $desc;
  function ConcurrentModificationError(modifiedObject) {
    this.modifiedObject = modifiedObject;
  }
  ConcurrentModificationError.builtin$cls = "ConcurrentModificationError";
  if (!"name" in ConcurrentModificationError)
    ConcurrentModificationError.name = "ConcurrentModificationError";
  $desc = $collectedClasses.ConcurrentModificationError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ConcurrentModificationError.prototype = $desc;
  function StackOverflowError() {
  }
  StackOverflowError.builtin$cls = "StackOverflowError";
  if (!"name" in StackOverflowError)
    StackOverflowError.name = "StackOverflowError";
  $desc = $collectedClasses.StackOverflowError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StackOverflowError.prototype = $desc;
  function CyclicInitializationError(variableName) {
    this.variableName = variableName;
  }
  CyclicInitializationError.builtin$cls = "CyclicInitializationError";
  if (!"name" in CyclicInitializationError)
    CyclicInitializationError.name = "CyclicInitializationError";
  $desc = $collectedClasses.CyclicInitializationError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CyclicInitializationError.prototype = $desc;
  function _ExceptionImplementation(message) {
    this.message = message;
  }
  _ExceptionImplementation.builtin$cls = "_ExceptionImplementation";
  if (!"name" in _ExceptionImplementation)
    _ExceptionImplementation.name = "_ExceptionImplementation";
  $desc = $collectedClasses._ExceptionImplementation;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ExceptionImplementation.prototype = $desc;
  function Expando(name) {
    this.name = name;
  }
  Expando.builtin$cls = "Expando";
  if (!"name" in Expando)
    Expando.name = "Expando";
  $desc = $collectedClasses.Expando;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Expando.prototype = $desc;
  Expando.prototype.get$name = function(receiver) {
    return this.name;
  };
  function Function() {
  }
  Function.builtin$cls = "Function";
  if (!"name" in Function)
    Function.name = "Function";
  $desc = $collectedClasses.Function;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Function.prototype = $desc;
  function Iterator() {
  }
  Iterator.builtin$cls = "Iterator";
  if (!"name" in Iterator)
    Iterator.name = "Iterator";
  $desc = $collectedClasses.Iterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Iterator.prototype = $desc;
  function Map() {
  }
  Map.builtin$cls = "Map";
  if (!"name" in Map)
    Map.name = "Map";
  $desc = $collectedClasses.Map;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Map.prototype = $desc;
  function Null() {
  }
  Null.builtin$cls = "Null";
  if (!"name" in Null)
    Null.name = "Null";
  $desc = $collectedClasses.Null;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Null.prototype = $desc;
  function Object() {
  }
  Object.builtin$cls = "Object";
  if (!"name" in Object)
    Object.name = "Object";
  $desc = $collectedClasses.Object;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Object.prototype = $desc;
  function StackTrace() {
  }
  StackTrace.builtin$cls = "StackTrace";
  if (!"name" in StackTrace)
    StackTrace.name = "StackTrace";
  $desc = $collectedClasses.StackTrace;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StackTrace.prototype = $desc;
  function StringBuffer(_contents) {
    this._contents = _contents;
  }
  StringBuffer.builtin$cls = "StringBuffer";
  if (!"name" in StringBuffer)
    StringBuffer.name = "StringBuffer";
  $desc = $collectedClasses.StringBuffer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StringBuffer.prototype = $desc;
  StringBuffer.prototype.get$_contents = function() {
    return this._contents;
  };
  function Symbol() {
  }
  Symbol.builtin$cls = "Symbol";
  if (!"name" in Symbol)
    Symbol.name = "Symbol";
  $desc = $collectedClasses.Symbol;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Symbol.prototype = $desc;
  function Interceptor_CssStyleDeclarationBase() {
  }
  Interceptor_CssStyleDeclarationBase.builtin$cls = "Interceptor_CssStyleDeclarationBase";
  if (!"name" in Interceptor_CssStyleDeclarationBase)
    Interceptor_CssStyleDeclarationBase.name = "Interceptor_CssStyleDeclarationBase";
  $desc = $collectedClasses.Interceptor_CssStyleDeclarationBase;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_CssStyleDeclarationBase.prototype = $desc;
  function CssStyleDeclarationBase() {
  }
  CssStyleDeclarationBase.builtin$cls = "CssStyleDeclarationBase";
  if (!"name" in CssStyleDeclarationBase)
    CssStyleDeclarationBase.name = "CssStyleDeclarationBase";
  $desc = $collectedClasses.CssStyleDeclarationBase;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CssStyleDeclarationBase.prototype = $desc;
  function Interceptor_ListMixin() {
  }
  Interceptor_ListMixin.builtin$cls = "Interceptor_ListMixin";
  if (!"name" in Interceptor_ListMixin)
    Interceptor_ListMixin.name = "Interceptor_ListMixin";
  $desc = $collectedClasses.Interceptor_ListMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_ListMixin.prototype = $desc;
  function Interceptor_ListMixin_ImmutableListMixin() {
  }
  Interceptor_ListMixin_ImmutableListMixin.builtin$cls = "Interceptor_ListMixin_ImmutableListMixin";
  if (!"name" in Interceptor_ListMixin_ImmutableListMixin)
    Interceptor_ListMixin_ImmutableListMixin.name = "Interceptor_ListMixin_ImmutableListMixin";
  $desc = $collectedClasses.Interceptor_ListMixin_ImmutableListMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_ListMixin_ImmutableListMixin.prototype = $desc;
  function Interceptor_ListMixin0() {
  }
  Interceptor_ListMixin0.builtin$cls = "Interceptor_ListMixin0";
  if (!"name" in Interceptor_ListMixin0)
    Interceptor_ListMixin0.name = "Interceptor_ListMixin0";
  $desc = $collectedClasses.Interceptor_ListMixin0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_ListMixin0.prototype = $desc;
  function Interceptor_ListMixin_ImmutableListMixin0() {
  }
  Interceptor_ListMixin_ImmutableListMixin0.builtin$cls = "Interceptor_ListMixin_ImmutableListMixin0";
  if (!"name" in Interceptor_ListMixin_ImmutableListMixin0)
    Interceptor_ListMixin_ImmutableListMixin0.name = "Interceptor_ListMixin_ImmutableListMixin0";
  $desc = $collectedClasses.Interceptor_ListMixin_ImmutableListMixin0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_ListMixin_ImmutableListMixin0.prototype = $desc;
  function Interceptor_ListMixin1() {
  }
  Interceptor_ListMixin1.builtin$cls = "Interceptor_ListMixin1";
  if (!"name" in Interceptor_ListMixin1)
    Interceptor_ListMixin1.name = "Interceptor_ListMixin1";
  $desc = $collectedClasses.Interceptor_ListMixin1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_ListMixin1.prototype = $desc;
  function Interceptor_ListMixin_ImmutableListMixin1() {
  }
  Interceptor_ListMixin_ImmutableListMixin1.builtin$cls = "Interceptor_ListMixin_ImmutableListMixin1";
  if (!"name" in Interceptor_ListMixin_ImmutableListMixin1)
    Interceptor_ListMixin_ImmutableListMixin1.name = "Interceptor_ListMixin_ImmutableListMixin1";
  $desc = $collectedClasses.Interceptor_ListMixin_ImmutableListMixin1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_ListMixin_ImmutableListMixin1.prototype = $desc;
  function Interceptor_ListMixin2() {
  }
  Interceptor_ListMixin2.builtin$cls = "Interceptor_ListMixin2";
  if (!"name" in Interceptor_ListMixin2)
    Interceptor_ListMixin2.name = "Interceptor_ListMixin2";
  $desc = $collectedClasses.Interceptor_ListMixin2;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_ListMixin2.prototype = $desc;
  function Interceptor_ListMixin_ImmutableListMixin2() {
  }
  Interceptor_ListMixin_ImmutableListMixin2.builtin$cls = "Interceptor_ListMixin_ImmutableListMixin2";
  if (!"name" in Interceptor_ListMixin_ImmutableListMixin2)
    Interceptor_ListMixin_ImmutableListMixin2.name = "Interceptor_ListMixin_ImmutableListMixin2";
  $desc = $collectedClasses.Interceptor_ListMixin_ImmutableListMixin2;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_ListMixin_ImmutableListMixin2.prototype = $desc;
  function Interceptor_ListMixin3() {
  }
  Interceptor_ListMixin3.builtin$cls = "Interceptor_ListMixin3";
  if (!"name" in Interceptor_ListMixin3)
    Interceptor_ListMixin3.name = "Interceptor_ListMixin3";
  $desc = $collectedClasses.Interceptor_ListMixin3;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_ListMixin3.prototype = $desc;
  function Interceptor_ListMixin_ImmutableListMixin3() {
  }
  Interceptor_ListMixin_ImmutableListMixin3.builtin$cls = "Interceptor_ListMixin_ImmutableListMixin3";
  if (!"name" in Interceptor_ListMixin_ImmutableListMixin3)
    Interceptor_ListMixin_ImmutableListMixin3.name = "Interceptor_ListMixin_ImmutableListMixin3";
  $desc = $collectedClasses.Interceptor_ListMixin_ImmutableListMixin3;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_ListMixin_ImmutableListMixin3.prototype = $desc;
  function Interceptor_ListMixin4() {
  }
  Interceptor_ListMixin4.builtin$cls = "Interceptor_ListMixin4";
  if (!"name" in Interceptor_ListMixin4)
    Interceptor_ListMixin4.name = "Interceptor_ListMixin4";
  $desc = $collectedClasses.Interceptor_ListMixin4;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_ListMixin4.prototype = $desc;
  function Interceptor_ListMixin_ImmutableListMixin4() {
  }
  Interceptor_ListMixin_ImmutableListMixin4.builtin$cls = "Interceptor_ListMixin_ImmutableListMixin4";
  if (!"name" in Interceptor_ListMixin_ImmutableListMixin4)
    Interceptor_ListMixin_ImmutableListMixin4.name = "Interceptor_ListMixin_ImmutableListMixin4";
  $desc = $collectedClasses.Interceptor_ListMixin_ImmutableListMixin4;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_ListMixin_ImmutableListMixin4.prototype = $desc;
  function EventTarget_ListMixin() {
  }
  EventTarget_ListMixin.builtin$cls = "EventTarget_ListMixin";
  if (!"name" in EventTarget_ListMixin)
    EventTarget_ListMixin.name = "EventTarget_ListMixin";
  $desc = $collectedClasses.EventTarget_ListMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  EventTarget_ListMixin.prototype = $desc;
  function EventTarget_ListMixin_ImmutableListMixin() {
  }
  EventTarget_ListMixin_ImmutableListMixin.builtin$cls = "EventTarget_ListMixin_ImmutableListMixin";
  if (!"name" in EventTarget_ListMixin_ImmutableListMixin)
    EventTarget_ListMixin_ImmutableListMixin.name = "EventTarget_ListMixin_ImmutableListMixin";
  $desc = $collectedClasses.EventTarget_ListMixin_ImmutableListMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  EventTarget_ListMixin_ImmutableListMixin.prototype = $desc;
  function Interceptor_ListMixin5() {
  }
  Interceptor_ListMixin5.builtin$cls = "Interceptor_ListMixin5";
  if (!"name" in Interceptor_ListMixin5)
    Interceptor_ListMixin5.name = "Interceptor_ListMixin5";
  $desc = $collectedClasses.Interceptor_ListMixin5;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_ListMixin5.prototype = $desc;
  function Interceptor_ListMixin_ImmutableListMixin5() {
  }
  Interceptor_ListMixin_ImmutableListMixin5.builtin$cls = "Interceptor_ListMixin_ImmutableListMixin5";
  if (!"name" in Interceptor_ListMixin_ImmutableListMixin5)
    Interceptor_ListMixin_ImmutableListMixin5.name = "Interceptor_ListMixin_ImmutableListMixin5";
  $desc = $collectedClasses.Interceptor_ListMixin_ImmutableListMixin5;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_ListMixin_ImmutableListMixin5.prototype = $desc;
  function Storage_keys_closure(keys_0) {
    this.keys_0 = keys_0;
  }
  Storage_keys_closure.builtin$cls = "Storage_keys_closure";
  if (!"name" in Storage_keys_closure)
    Storage_keys_closure.name = "Storage_keys_closure";
  $desc = $collectedClasses.Storage_keys_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Storage_keys_closure.prototype = $desc;
  function Storage_values_closure(values_0) {
    this.values_0 = values_0;
  }
  Storage_values_closure.builtin$cls = "Storage_values_closure";
  if (!"name" in Storage_values_closure)
    Storage_values_closure.name = "Storage_values_closure";
  $desc = $collectedClasses.Storage_values_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Storage_values_closure.prototype = $desc;
  function Interceptor_ListMixin6() {
  }
  Interceptor_ListMixin6.builtin$cls = "Interceptor_ListMixin6";
  if (!"name" in Interceptor_ListMixin6)
    Interceptor_ListMixin6.name = "Interceptor_ListMixin6";
  $desc = $collectedClasses.Interceptor_ListMixin6;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_ListMixin6.prototype = $desc;
  function Interceptor_ListMixin_ImmutableListMixin6() {
  }
  Interceptor_ListMixin_ImmutableListMixin6.builtin$cls = "Interceptor_ListMixin_ImmutableListMixin6";
  if (!"name" in Interceptor_ListMixin_ImmutableListMixin6)
    Interceptor_ListMixin_ImmutableListMixin6.name = "Interceptor_ListMixin_ImmutableListMixin6";
  $desc = $collectedClasses.Interceptor_ListMixin_ImmutableListMixin6;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_ListMixin_ImmutableListMixin6.prototype = $desc;
  function EventTarget_ListMixin0() {
  }
  EventTarget_ListMixin0.builtin$cls = "EventTarget_ListMixin0";
  if (!"name" in EventTarget_ListMixin0)
    EventTarget_ListMixin0.name = "EventTarget_ListMixin0";
  $desc = $collectedClasses.EventTarget_ListMixin0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  EventTarget_ListMixin0.prototype = $desc;
  function EventTarget_ListMixin_ImmutableListMixin0() {
  }
  EventTarget_ListMixin_ImmutableListMixin0.builtin$cls = "EventTarget_ListMixin_ImmutableListMixin0";
  if (!"name" in EventTarget_ListMixin_ImmutableListMixin0)
    EventTarget_ListMixin_ImmutableListMixin0.name = "EventTarget_ListMixin_ImmutableListMixin0";
  $desc = $collectedClasses.EventTarget_ListMixin_ImmutableListMixin0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  EventTarget_ListMixin_ImmutableListMixin0.prototype = $desc;
  function Interceptor_ListMixin7() {
  }
  Interceptor_ListMixin7.builtin$cls = "Interceptor_ListMixin7";
  if (!"name" in Interceptor_ListMixin7)
    Interceptor_ListMixin7.name = "Interceptor_ListMixin7";
  $desc = $collectedClasses.Interceptor_ListMixin7;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_ListMixin7.prototype = $desc;
  function Interceptor_ListMixin_ImmutableListMixin7() {
  }
  Interceptor_ListMixin_ImmutableListMixin7.builtin$cls = "Interceptor_ListMixin_ImmutableListMixin7";
  if (!"name" in Interceptor_ListMixin_ImmutableListMixin7)
    Interceptor_ListMixin_ImmutableListMixin7.name = "Interceptor_ListMixin_ImmutableListMixin7";
  $desc = $collectedClasses.Interceptor_ListMixin_ImmutableListMixin7;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_ListMixin_ImmutableListMixin7.prototype = $desc;
  function Interceptor_ListMixin8() {
  }
  Interceptor_ListMixin8.builtin$cls = "Interceptor_ListMixin8";
  if (!"name" in Interceptor_ListMixin8)
    Interceptor_ListMixin8.name = "Interceptor_ListMixin8";
  $desc = $collectedClasses.Interceptor_ListMixin8;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_ListMixin8.prototype = $desc;
  function Interceptor_ListMixin_ImmutableListMixin8() {
  }
  Interceptor_ListMixin_ImmutableListMixin8.builtin$cls = "Interceptor_ListMixin_ImmutableListMixin8";
  if (!"name" in Interceptor_ListMixin_ImmutableListMixin8)
    Interceptor_ListMixin_ImmutableListMixin8.name = "Interceptor_ListMixin_ImmutableListMixin8";
  $desc = $collectedClasses.Interceptor_ListMixin_ImmutableListMixin8;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_ListMixin_ImmutableListMixin8.prototype = $desc;
  function Interceptor_ListMixin9() {
  }
  Interceptor_ListMixin9.builtin$cls = "Interceptor_ListMixin9";
  if (!"name" in Interceptor_ListMixin9)
    Interceptor_ListMixin9.name = "Interceptor_ListMixin9";
  $desc = $collectedClasses.Interceptor_ListMixin9;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_ListMixin9.prototype = $desc;
  function Interceptor_ListMixin_ImmutableListMixin9() {
  }
  Interceptor_ListMixin_ImmutableListMixin9.builtin$cls = "Interceptor_ListMixin_ImmutableListMixin9";
  if (!"name" in Interceptor_ListMixin_ImmutableListMixin9)
    Interceptor_ListMixin_ImmutableListMixin9.name = "Interceptor_ListMixin_ImmutableListMixin9";
  $desc = $collectedClasses.Interceptor_ListMixin_ImmutableListMixin9;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_ListMixin_ImmutableListMixin9.prototype = $desc;
  function _CSSValue_ListMixin() {
  }
  _CSSValue_ListMixin.builtin$cls = "_CSSValue_ListMixin";
  if (!"name" in _CSSValue_ListMixin)
    _CSSValue_ListMixin.name = "_CSSValue_ListMixin";
  $desc = $collectedClasses._CSSValue_ListMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _CSSValue_ListMixin.prototype = $desc;
  function _CSSValue_ListMixin_ImmutableListMixin() {
  }
  _CSSValue_ListMixin_ImmutableListMixin.builtin$cls = "_CSSValue_ListMixin_ImmutableListMixin";
  if (!"name" in _CSSValue_ListMixin_ImmutableListMixin)
    _CSSValue_ListMixin_ImmutableListMixin.name = "_CSSValue_ListMixin_ImmutableListMixin";
  $desc = $collectedClasses._CSSValue_ListMixin_ImmutableListMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _CSSValue_ListMixin_ImmutableListMixin.prototype = $desc;
  function Interceptor_ListMixin10() {
  }
  Interceptor_ListMixin10.builtin$cls = "Interceptor_ListMixin10";
  if (!"name" in Interceptor_ListMixin10)
    Interceptor_ListMixin10.name = "Interceptor_ListMixin10";
  $desc = $collectedClasses.Interceptor_ListMixin10;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_ListMixin10.prototype = $desc;
  function Interceptor_ListMixin_ImmutableListMixin10() {
  }
  Interceptor_ListMixin_ImmutableListMixin10.builtin$cls = "Interceptor_ListMixin_ImmutableListMixin10";
  if (!"name" in Interceptor_ListMixin_ImmutableListMixin10)
    Interceptor_ListMixin_ImmutableListMixin10.name = "Interceptor_ListMixin_ImmutableListMixin10";
  $desc = $collectedClasses.Interceptor_ListMixin_ImmutableListMixin10;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_ListMixin_ImmutableListMixin10.prototype = $desc;
  function Interceptor_ListMixin11() {
  }
  Interceptor_ListMixin11.builtin$cls = "Interceptor_ListMixin11";
  if (!"name" in Interceptor_ListMixin11)
    Interceptor_ListMixin11.name = "Interceptor_ListMixin11";
  $desc = $collectedClasses.Interceptor_ListMixin11;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_ListMixin11.prototype = $desc;
  function Interceptor_ListMixin_ImmutableListMixin11() {
  }
  Interceptor_ListMixin_ImmutableListMixin11.builtin$cls = "Interceptor_ListMixin_ImmutableListMixin11";
  if (!"name" in Interceptor_ListMixin_ImmutableListMixin11)
    Interceptor_ListMixin_ImmutableListMixin11.name = "Interceptor_ListMixin_ImmutableListMixin11";
  $desc = $collectedClasses.Interceptor_ListMixin_ImmutableListMixin11;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_ListMixin_ImmutableListMixin11.prototype = $desc;
  function Interceptor_ListMixin12() {
  }
  Interceptor_ListMixin12.builtin$cls = "Interceptor_ListMixin12";
  if (!"name" in Interceptor_ListMixin12)
    Interceptor_ListMixin12.name = "Interceptor_ListMixin12";
  $desc = $collectedClasses.Interceptor_ListMixin12;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_ListMixin12.prototype = $desc;
  function Interceptor_ListMixin_ImmutableListMixin12() {
  }
  Interceptor_ListMixin_ImmutableListMixin12.builtin$cls = "Interceptor_ListMixin_ImmutableListMixin12";
  if (!"name" in Interceptor_ListMixin_ImmutableListMixin12)
    Interceptor_ListMixin_ImmutableListMixin12.name = "Interceptor_ListMixin_ImmutableListMixin12";
  $desc = $collectedClasses.Interceptor_ListMixin_ImmutableListMixin12;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_ListMixin_ImmutableListMixin12.prototype = $desc;
  function Interceptor_ListMixin13() {
  }
  Interceptor_ListMixin13.builtin$cls = "Interceptor_ListMixin13";
  if (!"name" in Interceptor_ListMixin13)
    Interceptor_ListMixin13.name = "Interceptor_ListMixin13";
  $desc = $collectedClasses.Interceptor_ListMixin13;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_ListMixin13.prototype = $desc;
  function Interceptor_ListMixin_ImmutableListMixin13() {
  }
  Interceptor_ListMixin_ImmutableListMixin13.builtin$cls = "Interceptor_ListMixin_ImmutableListMixin13";
  if (!"name" in Interceptor_ListMixin_ImmutableListMixin13)
    Interceptor_ListMixin_ImmutableListMixin13.name = "Interceptor_ListMixin_ImmutableListMixin13";
  $desc = $collectedClasses.Interceptor_ListMixin_ImmutableListMixin13;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_ListMixin_ImmutableListMixin13.prototype = $desc;
  function Interceptor_ListMixin14() {
  }
  Interceptor_ListMixin14.builtin$cls = "Interceptor_ListMixin14";
  if (!"name" in Interceptor_ListMixin14)
    Interceptor_ListMixin14.name = "Interceptor_ListMixin14";
  $desc = $collectedClasses.Interceptor_ListMixin14;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_ListMixin14.prototype = $desc;
  function Interceptor_ListMixin_ImmutableListMixin14() {
  }
  Interceptor_ListMixin_ImmutableListMixin14.builtin$cls = "Interceptor_ListMixin_ImmutableListMixin14";
  if (!"name" in Interceptor_ListMixin_ImmutableListMixin14)
    Interceptor_ListMixin_ImmutableListMixin14.name = "Interceptor_ListMixin_ImmutableListMixin14";
  $desc = $collectedClasses.Interceptor_ListMixin_ImmutableListMixin14;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_ListMixin_ImmutableListMixin14.prototype = $desc;
  function EventStreamProvider(_eventType) {
    this._eventType = _eventType;
  }
  EventStreamProvider.builtin$cls = "EventStreamProvider";
  if (!"name" in EventStreamProvider)
    EventStreamProvider.name = "EventStreamProvider";
  $desc = $collectedClasses.EventStreamProvider;
  if ($desc instanceof Array)
    $desc = $desc[1];
  EventStreamProvider.prototype = $desc;
  function _EventStream(_target, _eventType, _useCapture) {
    this._target = _target;
    this._eventType = _eventType;
    this._useCapture = _useCapture;
  }
  _EventStream.builtin$cls = "_EventStream";
  if (!"name" in _EventStream)
    _EventStream.name = "_EventStream";
  $desc = $collectedClasses._EventStream;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _EventStream.prototype = $desc;
  function _ElementEventStreamImpl(_target, _eventType, _useCapture) {
    this._target = _target;
    this._eventType = _eventType;
    this._useCapture = _useCapture;
  }
  _ElementEventStreamImpl.builtin$cls = "_ElementEventStreamImpl";
  if (!"name" in _ElementEventStreamImpl)
    _ElementEventStreamImpl.name = "_ElementEventStreamImpl";
  $desc = $collectedClasses._ElementEventStreamImpl;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ElementEventStreamImpl.prototype = $desc;
  function _EventStreamSubscription(_pauseCount, _target, _eventType, _onData, _useCapture) {
    this._pauseCount = _pauseCount;
    this._target = _target;
    this._eventType = _eventType;
    this._onData = _onData;
    this._useCapture = _useCapture;
  }
  _EventStreamSubscription.builtin$cls = "_EventStreamSubscription";
  if (!"name" in _EventStreamSubscription)
    _EventStreamSubscription.name = "_EventStreamSubscription";
  $desc = $collectedClasses._EventStreamSubscription;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _EventStreamSubscription.prototype = $desc;
  function _CustomEventStreamProvider(_eventTypeGetter) {
    this._eventTypeGetter = _eventTypeGetter;
  }
  _CustomEventStreamProvider.builtin$cls = "_CustomEventStreamProvider";
  if (!"name" in _CustomEventStreamProvider)
    _CustomEventStreamProvider.name = "_CustomEventStreamProvider";
  $desc = $collectedClasses._CustomEventStreamProvider;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _CustomEventStreamProvider.prototype = $desc;
  function ImmutableListMixin() {
  }
  ImmutableListMixin.builtin$cls = "ImmutableListMixin";
  if (!"name" in ImmutableListMixin)
    ImmutableListMixin.name = "ImmutableListMixin";
  $desc = $collectedClasses.ImmutableListMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ImmutableListMixin.prototype = $desc;
  function FixedSizeListIterator(_array, _html$_length, _position, _html$_current) {
    this._array = _array;
    this._html$_length = _html$_length;
    this._position = _position;
    this._html$_current = _html$_current;
  }
  FixedSizeListIterator.builtin$cls = "FixedSizeListIterator";
  if (!"name" in FixedSizeListIterator)
    FixedSizeListIterator.name = "FixedSizeListIterator";
  $desc = $collectedClasses.FixedSizeListIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FixedSizeListIterator.prototype = $desc;
  function _LocationWrapper(_ptr) {
    this._ptr = _ptr;
  }
  _LocationWrapper.builtin$cls = "_LocationWrapper";
  if (!"name" in _LocationWrapper)
    _LocationWrapper.name = "_LocationWrapper";
  $desc = $collectedClasses._LocationWrapper;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _LocationWrapper.prototype = $desc;
  function _completeRequest_closure(request_0, completer_1) {
    this.request_0 = request_0;
    this.completer_1 = completer_1;
  }
  _completeRequest_closure.builtin$cls = "_completeRequest_closure";
  if (!"name" in _completeRequest_closure)
    _completeRequest_closure.name = "_completeRequest_closure";
  $desc = $collectedClasses._completeRequest_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _completeRequest_closure.prototype = $desc;
  function Interceptor_ListMixin15() {
  }
  Interceptor_ListMixin15.builtin$cls = "Interceptor_ListMixin15";
  if (!"name" in Interceptor_ListMixin15)
    Interceptor_ListMixin15.name = "Interceptor_ListMixin15";
  $desc = $collectedClasses.Interceptor_ListMixin15;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_ListMixin15.prototype = $desc;
  function Interceptor_ListMixin_ImmutableListMixin15() {
  }
  Interceptor_ListMixin_ImmutableListMixin15.builtin$cls = "Interceptor_ListMixin_ImmutableListMixin15";
  if (!"name" in Interceptor_ListMixin_ImmutableListMixin15)
    Interceptor_ListMixin_ImmutableListMixin15.name = "Interceptor_ListMixin_ImmutableListMixin15";
  $desc = $collectedClasses.Interceptor_ListMixin_ImmutableListMixin15;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_ListMixin_ImmutableListMixin15.prototype = $desc;
  function Interceptor_ListMixin16() {
  }
  Interceptor_ListMixin16.builtin$cls = "Interceptor_ListMixin16";
  if (!"name" in Interceptor_ListMixin16)
    Interceptor_ListMixin16.name = "Interceptor_ListMixin16";
  $desc = $collectedClasses.Interceptor_ListMixin16;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_ListMixin16.prototype = $desc;
  function Interceptor_ListMixin_ImmutableListMixin16() {
  }
  Interceptor_ListMixin_ImmutableListMixin16.builtin$cls = "Interceptor_ListMixin_ImmutableListMixin16";
  if (!"name" in Interceptor_ListMixin_ImmutableListMixin16)
    Interceptor_ListMixin_ImmutableListMixin16.name = "Interceptor_ListMixin_ImmutableListMixin16";
  $desc = $collectedClasses.Interceptor_ListMixin_ImmutableListMixin16;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_ListMixin_ImmutableListMixin16.prototype = $desc;
  function Interceptor_ListMixin17() {
  }
  Interceptor_ListMixin17.builtin$cls = "Interceptor_ListMixin17";
  if (!"name" in Interceptor_ListMixin17)
    Interceptor_ListMixin17.name = "Interceptor_ListMixin17";
  $desc = $collectedClasses.Interceptor_ListMixin17;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_ListMixin17.prototype = $desc;
  function Interceptor_ListMixin_ImmutableListMixin17() {
  }
  Interceptor_ListMixin_ImmutableListMixin17.builtin$cls = "Interceptor_ListMixin_ImmutableListMixin17";
  if (!"name" in Interceptor_ListMixin_ImmutableListMixin17)
    Interceptor_ListMixin_ImmutableListMixin17.name = "Interceptor_ListMixin_ImmutableListMixin17";
  $desc = $collectedClasses.Interceptor_ListMixin_ImmutableListMixin17;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_ListMixin_ImmutableListMixin17.prototype = $desc;
  function Interceptor_ListMixin18() {
  }
  Interceptor_ListMixin18.builtin$cls = "Interceptor_ListMixin18";
  if (!"name" in Interceptor_ListMixin18)
    Interceptor_ListMixin18.name = "Interceptor_ListMixin18";
  $desc = $collectedClasses.Interceptor_ListMixin18;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_ListMixin18.prototype = $desc;
  function Interceptor_ListMixin_ImmutableListMixin18() {
  }
  Interceptor_ListMixin_ImmutableListMixin18.builtin$cls = "Interceptor_ListMixin_ImmutableListMixin18";
  if (!"name" in Interceptor_ListMixin_ImmutableListMixin18)
    Interceptor_ListMixin_ImmutableListMixin18.name = "Interceptor_ListMixin_ImmutableListMixin18";
  $desc = $collectedClasses.Interceptor_ListMixin_ImmutableListMixin18;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_ListMixin_ImmutableListMixin18.prototype = $desc;
  function Interceptor_ListMixin19() {
  }
  Interceptor_ListMixin19.builtin$cls = "Interceptor_ListMixin19";
  if (!"name" in Interceptor_ListMixin19)
    Interceptor_ListMixin19.name = "Interceptor_ListMixin19";
  $desc = $collectedClasses.Interceptor_ListMixin19;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_ListMixin19.prototype = $desc;
  function Interceptor_ListMixin_ImmutableListMixin19() {
  }
  Interceptor_ListMixin_ImmutableListMixin19.builtin$cls = "Interceptor_ListMixin_ImmutableListMixin19";
  if (!"name" in Interceptor_ListMixin_ImmutableListMixin19)
    Interceptor_ListMixin_ImmutableListMixin19.name = "Interceptor_ListMixin_ImmutableListMixin19";
  $desc = $collectedClasses.Interceptor_ListMixin_ImmutableListMixin19;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_ListMixin_ImmutableListMixin19.prototype = $desc;
  function Interceptor_ListMixin20() {
  }
  Interceptor_ListMixin20.builtin$cls = "Interceptor_ListMixin20";
  if (!"name" in Interceptor_ListMixin20)
    Interceptor_ListMixin20.name = "Interceptor_ListMixin20";
  $desc = $collectedClasses.Interceptor_ListMixin20;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_ListMixin20.prototype = $desc;
  function Interceptor_ListMixin_ImmutableListMixin20() {
  }
  Interceptor_ListMixin_ImmutableListMixin20.builtin$cls = "Interceptor_ListMixin_ImmutableListMixin20";
  if (!"name" in Interceptor_ListMixin_ImmutableListMixin20)
    Interceptor_ListMixin_ImmutableListMixin20.name = "Interceptor_ListMixin_ImmutableListMixin20";
  $desc = $collectedClasses.Interceptor_ListMixin_ImmutableListMixin20;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_ListMixin_ImmutableListMixin20.prototype = $desc;
  function Interceptor_ListMixin21() {
  }
  Interceptor_ListMixin21.builtin$cls = "Interceptor_ListMixin21";
  if (!"name" in Interceptor_ListMixin21)
    Interceptor_ListMixin21.name = "Interceptor_ListMixin21";
  $desc = $collectedClasses.Interceptor_ListMixin21;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_ListMixin21.prototype = $desc;
  function Interceptor_ListMixin_ImmutableListMixin21() {
  }
  Interceptor_ListMixin_ImmutableListMixin21.builtin$cls = "Interceptor_ListMixin_ImmutableListMixin21";
  if (!"name" in Interceptor_ListMixin_ImmutableListMixin21)
    Interceptor_ListMixin_ImmutableListMixin21.name = "Interceptor_ListMixin_ImmutableListMixin21";
  $desc = $collectedClasses.Interceptor_ListMixin_ImmutableListMixin21;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_ListMixin_ImmutableListMixin21.prototype = $desc;
  function ReceivePort() {
  }
  ReceivePort.builtin$cls = "ReceivePort";
  if (!"name" in ReceivePort)
    ReceivePort.name = "ReceivePort";
  $desc = $collectedClasses.ReceivePort;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ReceivePort.prototype = $desc;
  function Point(x, y) {
    this.x = x;
    this.y = y;
  }
  Point.builtin$cls = "Point";
  if (!"name" in Point)
    Point.name = "Point";
  $desc = $collectedClasses.Point;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Point.prototype = $desc;
  Point.prototype.get$x = function(receiver) {
    return this.x;
  };
  Point.prototype.get$y = function(receiver) {
    return this.y;
  };
  function _RectangleBase() {
  }
  _RectangleBase.builtin$cls = "_RectangleBase";
  if (!"name" in _RectangleBase)
    _RectangleBase.name = "_RectangleBase";
  $desc = $collectedClasses._RectangleBase;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _RectangleBase.prototype = $desc;
  function Rectangle(left, top, width, height) {
    this.left = left;
    this.top = top;
    this.width = width;
    this.height = height;
  }
  Rectangle.builtin$cls = "Rectangle";
  if (!"name" in Rectangle)
    Rectangle.name = "Rectangle";
  $desc = $collectedClasses.Rectangle;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Rectangle.prototype = $desc;
  Rectangle.prototype.get$left = function(receiver) {
    return this.left;
  };
  Rectangle.prototype.get$top = function(receiver) {
    return this.top;
  };
  Rectangle.prototype.get$width = function(receiver) {
    return this.width;
  };
  Rectangle.prototype.get$height = function(receiver) {
    return this.height;
  };
  function TypedData_ListMixin() {
  }
  TypedData_ListMixin.builtin$cls = "TypedData_ListMixin";
  if (!"name" in TypedData_ListMixin)
    TypedData_ListMixin.name = "TypedData_ListMixin";
  $desc = $collectedClasses.TypedData_ListMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypedData_ListMixin.prototype = $desc;
  function TypedData_ListMixin_FixedLengthListMixin() {
  }
  TypedData_ListMixin_FixedLengthListMixin.builtin$cls = "TypedData_ListMixin_FixedLengthListMixin";
  if (!"name" in TypedData_ListMixin_FixedLengthListMixin)
    TypedData_ListMixin_FixedLengthListMixin.name = "TypedData_ListMixin_FixedLengthListMixin";
  $desc = $collectedClasses.TypedData_ListMixin_FixedLengthListMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypedData_ListMixin_FixedLengthListMixin.prototype = $desc;
  function TypedData_ListMixin0() {
  }
  TypedData_ListMixin0.builtin$cls = "TypedData_ListMixin0";
  if (!"name" in TypedData_ListMixin0)
    TypedData_ListMixin0.name = "TypedData_ListMixin0";
  $desc = $collectedClasses.TypedData_ListMixin0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypedData_ListMixin0.prototype = $desc;
  function TypedData_ListMixin_FixedLengthListMixin0() {
  }
  TypedData_ListMixin_FixedLengthListMixin0.builtin$cls = "TypedData_ListMixin_FixedLengthListMixin0";
  if (!"name" in TypedData_ListMixin_FixedLengthListMixin0)
    TypedData_ListMixin_FixedLengthListMixin0.name = "TypedData_ListMixin_FixedLengthListMixin0";
  $desc = $collectedClasses.TypedData_ListMixin_FixedLengthListMixin0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypedData_ListMixin_FixedLengthListMixin0.prototype = $desc;
  function TypedData_ListMixin1() {
  }
  TypedData_ListMixin1.builtin$cls = "TypedData_ListMixin1";
  if (!"name" in TypedData_ListMixin1)
    TypedData_ListMixin1.name = "TypedData_ListMixin1";
  $desc = $collectedClasses.TypedData_ListMixin1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypedData_ListMixin1.prototype = $desc;
  function TypedData_ListMixin_FixedLengthListMixin1() {
  }
  TypedData_ListMixin_FixedLengthListMixin1.builtin$cls = "TypedData_ListMixin_FixedLengthListMixin1";
  if (!"name" in TypedData_ListMixin_FixedLengthListMixin1)
    TypedData_ListMixin_FixedLengthListMixin1.name = "TypedData_ListMixin_FixedLengthListMixin1";
  $desc = $collectedClasses.TypedData_ListMixin_FixedLengthListMixin1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypedData_ListMixin_FixedLengthListMixin1.prototype = $desc;
  function TypedData_ListMixin2() {
  }
  TypedData_ListMixin2.builtin$cls = "TypedData_ListMixin2";
  if (!"name" in TypedData_ListMixin2)
    TypedData_ListMixin2.name = "TypedData_ListMixin2";
  $desc = $collectedClasses.TypedData_ListMixin2;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypedData_ListMixin2.prototype = $desc;
  function TypedData_ListMixin_FixedLengthListMixin2() {
  }
  TypedData_ListMixin_FixedLengthListMixin2.builtin$cls = "TypedData_ListMixin_FixedLengthListMixin2";
  if (!"name" in TypedData_ListMixin_FixedLengthListMixin2)
    TypedData_ListMixin_FixedLengthListMixin2.name = "TypedData_ListMixin_FixedLengthListMixin2";
  $desc = $collectedClasses.TypedData_ListMixin_FixedLengthListMixin2;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypedData_ListMixin_FixedLengthListMixin2.prototype = $desc;
  function TypedData_ListMixin3() {
  }
  TypedData_ListMixin3.builtin$cls = "TypedData_ListMixin3";
  if (!"name" in TypedData_ListMixin3)
    TypedData_ListMixin3.name = "TypedData_ListMixin3";
  $desc = $collectedClasses.TypedData_ListMixin3;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypedData_ListMixin3.prototype = $desc;
  function TypedData_ListMixin_FixedLengthListMixin3() {
  }
  TypedData_ListMixin_FixedLengthListMixin3.builtin$cls = "TypedData_ListMixin_FixedLengthListMixin3";
  if (!"name" in TypedData_ListMixin_FixedLengthListMixin3)
    TypedData_ListMixin_FixedLengthListMixin3.name = "TypedData_ListMixin_FixedLengthListMixin3";
  $desc = $collectedClasses.TypedData_ListMixin_FixedLengthListMixin3;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypedData_ListMixin_FixedLengthListMixin3.prototype = $desc;
  function TypedData_ListMixin4() {
  }
  TypedData_ListMixin4.builtin$cls = "TypedData_ListMixin4";
  if (!"name" in TypedData_ListMixin4)
    TypedData_ListMixin4.name = "TypedData_ListMixin4";
  $desc = $collectedClasses.TypedData_ListMixin4;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypedData_ListMixin4.prototype = $desc;
  function TypedData_ListMixin_FixedLengthListMixin4() {
  }
  TypedData_ListMixin_FixedLengthListMixin4.builtin$cls = "TypedData_ListMixin_FixedLengthListMixin4";
  if (!"name" in TypedData_ListMixin_FixedLengthListMixin4)
    TypedData_ListMixin_FixedLengthListMixin4.name = "TypedData_ListMixin_FixedLengthListMixin4";
  $desc = $collectedClasses.TypedData_ListMixin_FixedLengthListMixin4;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypedData_ListMixin_FixedLengthListMixin4.prototype = $desc;
  function TypedData_ListMixin5() {
  }
  TypedData_ListMixin5.builtin$cls = "TypedData_ListMixin5";
  if (!"name" in TypedData_ListMixin5)
    TypedData_ListMixin5.name = "TypedData_ListMixin5";
  $desc = $collectedClasses.TypedData_ListMixin5;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypedData_ListMixin5.prototype = $desc;
  function TypedData_ListMixin_FixedLengthListMixin5() {
  }
  TypedData_ListMixin_FixedLengthListMixin5.builtin$cls = "TypedData_ListMixin_FixedLengthListMixin5";
  if (!"name" in TypedData_ListMixin_FixedLengthListMixin5)
    TypedData_ListMixin_FixedLengthListMixin5.name = "TypedData_ListMixin_FixedLengthListMixin5";
  $desc = $collectedClasses.TypedData_ListMixin_FixedLengthListMixin5;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypedData_ListMixin_FixedLengthListMixin5.prototype = $desc;
  function TypedData_ListMixin6() {
  }
  TypedData_ListMixin6.builtin$cls = "TypedData_ListMixin6";
  if (!"name" in TypedData_ListMixin6)
    TypedData_ListMixin6.name = "TypedData_ListMixin6";
  $desc = $collectedClasses.TypedData_ListMixin6;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypedData_ListMixin6.prototype = $desc;
  function TypedData_ListMixin_FixedLengthListMixin6() {
  }
  TypedData_ListMixin_FixedLengthListMixin6.builtin$cls = "TypedData_ListMixin_FixedLengthListMixin6";
  if (!"name" in TypedData_ListMixin_FixedLengthListMixin6)
    TypedData_ListMixin_FixedLengthListMixin6.name = "TypedData_ListMixin_FixedLengthListMixin6";
  $desc = $collectedClasses.TypedData_ListMixin_FixedLengthListMixin6;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypedData_ListMixin_FixedLengthListMixin6.prototype = $desc;
  function TypedData_ListMixin7() {
  }
  TypedData_ListMixin7.builtin$cls = "TypedData_ListMixin7";
  if (!"name" in TypedData_ListMixin7)
    TypedData_ListMixin7.name = "TypedData_ListMixin7";
  $desc = $collectedClasses.TypedData_ListMixin7;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypedData_ListMixin7.prototype = $desc;
  function TypedData_ListMixin_FixedLengthListMixin7() {
  }
  TypedData_ListMixin_FixedLengthListMixin7.builtin$cls = "TypedData_ListMixin_FixedLengthListMixin7";
  if (!"name" in TypedData_ListMixin_FixedLengthListMixin7)
    TypedData_ListMixin_FixedLengthListMixin7.name = "TypedData_ListMixin_FixedLengthListMixin7";
  $desc = $collectedClasses.TypedData_ListMixin_FixedLengthListMixin7;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypedData_ListMixin_FixedLengthListMixin7.prototype = $desc;
  function Int64List() {
  }
  Int64List.builtin$cls = "Int64List";
  if (!"name" in Int64List)
    Int64List.name = "Int64List";
  $desc = $collectedClasses.Int64List;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Int64List.prototype = $desc;
  function Uint64List() {
  }
  Uint64List.builtin$cls = "Uint64List";
  if (!"name" in Uint64List)
    Uint64List.name = "Uint64List";
  $desc = $collectedClasses.Uint64List;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uint64List.prototype = $desc;
  function Disposable() {
  }
  Disposable.builtin$cls = "Disposable";
  if (!"name" in Disposable)
    Disposable.name = "Disposable";
  $desc = $collectedClasses.Disposable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Disposable.prototype = $desc;
  function WebGLPhysicsPerformance(discrete, sleepComputation, prestepContacts, prestepConstraints, integrateVelocities, warmstartContacts, warmstartConstraints, physicsIterations, integratePositions, continuous) {
    this.discrete = discrete;
    this.sleepComputation = sleepComputation;
    this.prestepContacts = prestepContacts;
    this.prestepConstraints = prestepConstraints;
    this.integrateVelocities = integrateVelocities;
    this.warmstartContacts = warmstartContacts;
    this.warmstartConstraints = warmstartConstraints;
    this.physicsIterations = physicsIterations;
    this.integratePositions = integratePositions;
    this.continuous = continuous;
  }
  WebGLPhysicsPerformance.builtin$cls = "WebGLPhysicsPerformance";
  if (!"name" in WebGLPhysicsPerformance)
    WebGLPhysicsPerformance.name = "WebGLPhysicsPerformance";
  $desc = $collectedClasses.WebGLPhysicsPerformance;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WebGLPhysicsPerformance.prototype = $desc;
  function WebGLPhysicsNarrowCache(objectA, objectB, shapeA, shapeB, closestA, closestB, axis, distance, toi, frozenA, frozenB, concave) {
    this.objectA = objectA;
    this.objectB = objectB;
    this.shapeA = shapeA;
    this.shapeB = shapeB;
    this.closestA = closestA;
    this.closestB = closestB;
    this.axis = axis;
    this.distance = distance;
    this.toi = toi;
    this.frozenA = frozenA;
    this.frozenB = frozenB;
    this.concave = concave;
  }
  WebGLPhysicsNarrowCache.builtin$cls = "WebGLPhysicsNarrowCache";
  if (!"name" in WebGLPhysicsNarrowCache)
    WebGLPhysicsNarrowCache.name = "WebGLPhysicsNarrowCache";
  $desc = $collectedClasses.WebGLPhysicsNarrowCache;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WebGLPhysicsNarrowCache.prototype = $desc;
  function FakeBody(_shape, _transform, _startTransform) {
    this._shape = _shape;
    this._transform = _transform;
    this._startTransform = _startTransform;
  }
  FakeBody.builtin$cls = "FakeBody";
  if (!"name" in FakeBody)
    FakeBody.name = "FakeBody";
  $desc = $collectedClasses.FakeBody;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FakeBody.prototype = $desc;
  function Matrix43(storage) {
    this.storage = storage;
  }
  Matrix43.builtin$cls = "Matrix43";
  if (!"name" in Matrix43)
    Matrix43.name = "Matrix43";
  $desc = $collectedClasses.Matrix43;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Matrix43.prototype = $desc;
  Matrix43.prototype.get$storage = function() {
    return this.storage;
  };
  function WebGLPhysicsArbiter(objectA, objectB, shapeA, shapeB, friction, restitution, contacts, activeContacts, _active, skipDiscreteCollisions, contactFlags, trigger) {
    this.objectA = objectA;
    this.objectB = objectB;
    this.shapeA = shapeA;
    this.shapeB = shapeB;
    this.friction = friction;
    this.restitution = restitution;
    this.contacts = contacts;
    this.activeContacts = activeContacts;
    this._active = _active;
    this.skipDiscreteCollisions = skipDiscreteCollisions;
    this.contactFlags = contactFlags;
    this.trigger = trigger;
  }
  WebGLPhysicsArbiter.builtin$cls = "WebGLPhysicsArbiter";
  if (!"name" in WebGLPhysicsArbiter)
    WebGLPhysicsArbiter.name = "WebGLPhysicsArbiter";
  $desc = $collectedClasses.WebGLPhysicsArbiter;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WebGLPhysicsArbiter.prototype = $desc;
  function WebGLPhysicsCollisionObject(userData, _fixedRotationtype, aabbTreeIndex, _id, _previouslyActive, _bullet, _world, _shape, _friction, _restitution, _transform, _arbiters, _constraints, _velocity, _linearDamping, _angularDamping, _extents, _startTransform, _endTransform, _prevTransform, _newTransform, _island, _islandRoot, _islandRank, _delaySleep, _wakeTimeStamp, _group, _mask, _kinematic, _fixedRotation, _mass, _inverseMass, _inverseInertiaLocal, _inverseInertia, _collisionObject, _permitSleep, _sweepFrozen, _active, _contactCallbacks) {
    this.userData = userData;
    this._fixedRotationtype = _fixedRotationtype;
    this.aabbTreeIndex = aabbTreeIndex;
    this._id = _id;
    this._previouslyActive = _previouslyActive;
    this._bullet = _bullet;
    this._world = _world;
    this._shape = _shape;
    this._friction = _friction;
    this._restitution = _restitution;
    this._transform = _transform;
    this._arbiters = _arbiters;
    this._constraints = _constraints;
    this._velocity = _velocity;
    this._linearDamping = _linearDamping;
    this._angularDamping = _angularDamping;
    this._extents = _extents;
    this._startTransform = _startTransform;
    this._endTransform = _endTransform;
    this._prevTransform = _prevTransform;
    this._newTransform = _newTransform;
    this._island = _island;
    this._islandRoot = _islandRoot;
    this._islandRank = _islandRank;
    this._delaySleep = _delaySleep;
    this._wakeTimeStamp = _wakeTimeStamp;
    this._group = _group;
    this._mask = _mask;
    this._kinematic = _kinematic;
    this._fixedRotation = _fixedRotation;
    this._mass = _mass;
    this._inverseMass = _inverseMass;
    this._inverseInertiaLocal = _inverseInertiaLocal;
    this._inverseInertia = _inverseInertia;
    this._collisionObject = _collisionObject;
    this._permitSleep = _permitSleep;
    this._sweepFrozen = _sweepFrozen;
    this._active = _active;
    this._contactCallbacks = _contactCallbacks;
  }
  WebGLPhysicsCollisionObject.builtin$cls = "WebGLPhysicsCollisionObject";
  if (!"name" in WebGLPhysicsCollisionObject)
    WebGLPhysicsCollisionObject.name = "WebGLPhysicsCollisionObject";
  $desc = $collectedClasses.WebGLPhysicsCollisionObject;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WebGLPhysicsCollisionObject.prototype = $desc;
  function WebGLPhysicsContact(_storage) {
    this._storage = _storage;
  }
  WebGLPhysicsContact.builtin$cls = "WebGLPhysicsContact";
  if (!"name" in WebGLPhysicsContact)
    WebGLPhysicsContact.name = "WebGLPhysicsContact";
  $desc = $collectedClasses.WebGLPhysicsContact;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WebGLPhysicsContact.prototype = $desc;
  function WebGLContactEPA(vertex_store, hull, stock, horizon) {
    this.vertex_store = vertex_store;
    this.hull = hull;
    this.stock = stock;
    this.horizon = horizon;
  }
  WebGLContactEPA.builtin$cls = "WebGLContactEPA";
  if (!"name" in WebGLContactEPA)
    WebGLContactEPA.name = "WebGLContactEPA";
  $desc = $collectedClasses.WebGLContactEPA;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WebGLContactEPA.prototype = $desc;
  function Hs(root, count) {
    this.root = root;
    this.count = count;
  }
  Hs.builtin$cls = "Hs";
  if (!"name" in Hs)
    Hs.name = "Hs";
  $desc = $collectedClasses.Hs;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Hs.prototype = $desc;
  function Horizon(cf, ff, numFaces) {
    this.cf = cf;
    this.ff = ff;
    this.numFaces = numFaces;
  }
  Horizon.builtin$cls = "Horizon";
  if (!"name" in Horizon)
    Horizon.name = "Horizon";
  $desc = $collectedClasses.Horizon;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Horizon.prototype = $desc;
  function ContactFace(normal, distance, vertex, adjFace, edge, leaf0, leaf1, pass) {
    this.normal = normal;
    this.distance = distance;
    this.vertex = vertex;
    this.adjFace = adjFace;
    this.edge = edge;
    this.leaf0 = leaf0;
    this.leaf1 = leaf1;
    this.pass = pass;
  }
  ContactFace.builtin$cls = "ContactFace";
  if (!"name" in ContactFace)
    ContactFace.name = "ContactFace";
  $desc = $collectedClasses.ContactFace;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ContactFace.prototype = $desc;
  function WebGLPhysicsRigidBody(userData, _inertia, _fixedRotationtype, aabbTreeIndex, _id, _previouslyActive, _bullet, _world, _shape, _friction, _restitution, _transform, _arbiters, _constraints, _velocity, _linearDamping, _angularDamping, _extents, _startTransform, _endTransform, _prevTransform, _newTransform, _island, _islandRoot, _islandRank, _delaySleep, _wakeTimeStamp, _group, _mask, _kinematic, _fixedRotation, _mass, _inverseMass, _inverseInertiaLocal, _inverseInertia, _collisionObject, _permitSleep, _sweepFrozen, _active, _contactCallbacks) {
    this.userData = userData;
    this._inertia = _inertia;
    this._fixedRotationtype = _fixedRotationtype;
    this.aabbTreeIndex = aabbTreeIndex;
    this._id = _id;
    this._previouslyActive = _previouslyActive;
    this._bullet = _bullet;
    this._world = _world;
    this._shape = _shape;
    this._friction = _friction;
    this._restitution = _restitution;
    this._transform = _transform;
    this._arbiters = _arbiters;
    this._constraints = _constraints;
    this._velocity = _velocity;
    this._linearDamping = _linearDamping;
    this._angularDamping = _angularDamping;
    this._extents = _extents;
    this._startTransform = _startTransform;
    this._endTransform = _endTransform;
    this._prevTransform = _prevTransform;
    this._newTransform = _newTransform;
    this._island = _island;
    this._islandRoot = _islandRoot;
    this._islandRank = _islandRank;
    this._delaySleep = _delaySleep;
    this._wakeTimeStamp = _wakeTimeStamp;
    this._group = _group;
    this._mask = _mask;
    this._kinematic = _kinematic;
    this._fixedRotation = _fixedRotation;
    this._mass = _mass;
    this._inverseMass = _inverseMass;
    this._inverseInertiaLocal = _inverseInertiaLocal;
    this._inverseInertia = _inverseInertia;
    this._collisionObject = _collisionObject;
    this._permitSleep = _permitSleep;
    this._sweepFrozen = _sweepFrozen;
    this._active = _active;
    this._contactCallbacks = _contactCallbacks;
  }
  WebGLPhysicsRigidBody.builtin$cls = "WebGLPhysicsRigidBody";
  if (!"name" in WebGLPhysicsRigidBody)
    WebGLPhysicsRigidBody.name = "WebGLPhysicsRigidBody";
  $desc = $collectedClasses.WebGLPhysicsRigidBody;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WebGLPhysicsRigidBody.prototype = $desc;
  function AabbTreeNode(escapeNodeOffset, externalNode, extents) {
    this.escapeNodeOffset = escapeNodeOffset;
    this.externalNode = externalNode;
    this.extents = extents;
  }
  AabbTreeNode.builtin$cls = "AabbTreeNode";
  if (!"name" in AabbTreeNode)
    AabbTreeNode.name = "AabbTreeNode";
  $desc = $collectedClasses.AabbTreeNode;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AabbTreeNode.prototype = $desc;
  AabbTreeNode.prototype.get$escapeNodeOffset = function() {
    return this.escapeNodeOffset;
  };
  AabbTreeNode.prototype.get$externalNode = function() {
    return this.externalNode;
  };
  AabbTreeNode.prototype.get$extents = function() {
    return this.extents;
  };
  function AabbTree(numNodesLeaf, nodes, endNode, needsRebuild, needsRebound, numAdds, numUpdates, numExternalNodes, startUpdate, endUpdate, highQuality, ignoreY, nodesStack) {
    this.numNodesLeaf = numNodesLeaf;
    this.nodes = nodes;
    this.endNode = endNode;
    this.needsRebuild = needsRebuild;
    this.needsRebound = needsRebound;
    this.numAdds = numAdds;
    this.numUpdates = numUpdates;
    this.numExternalNodes = numExternalNodes;
    this.startUpdate = startUpdate;
    this.endUpdate = endUpdate;
    this.highQuality = highQuality;
    this.ignoreY = ignoreY;
    this.nodesStack = nodesStack;
  }
  AabbTree.builtin$cls = "AabbTree";
  if (!"name" in AabbTree)
    AabbTree.name = "AabbTree";
  $desc = $collectedClasses.AabbTree;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AabbTree.prototype = $desc;
  function BoundClosure$3(_self, __js_helper$_target, _receiver, __js_helper$_name) {
    this._self = _self;
    this.__js_helper$_target = __js_helper$_target;
    this._receiver = _receiver;
    this.__js_helper$_name = __js_helper$_name;
  }
  BoundClosure$3.builtin$cls = "BoundClosure$3";
  $desc = $collectedClasses.BoundClosure$3;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BoundClosure$3.prototype = $desc;
  function AabbTree_sortNodes_sortNodesRecursive(box_0, this_1, numNodesLeaf_2) {
    this.box_0 = box_0;
    this.this_1 = this_1;
    this.numNodesLeaf_2 = numNodesLeaf_2;
  }
  AabbTree_sortNodes_sortNodesRecursive.builtin$cls = "AabbTree_sortNodes_sortNodesRecursive";
  if (!"name" in AabbTree_sortNodes_sortNodesRecursive)
    AabbTree_sortNodes_sortNodesRecursive.name = "AabbTree_sortNodes_sortNodesRecursive";
  $desc = $collectedClasses.AabbTree_sortNodes_sortNodesRecursive;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AabbTree_sortNodes_sortNodesRecursive.prototype = $desc;
  function AabbTree_sortNodesNoY_sortNodesNoYRecursive(box_0, this_1, numNodesLeaf_2) {
    this.box_0 = box_0;
    this.this_1 = this_1;
    this.numNodesLeaf_2 = numNodesLeaf_2;
  }
  AabbTree_sortNodesNoY_sortNodesNoYRecursive.builtin$cls = "AabbTree_sortNodesNoY_sortNodesNoYRecursive";
  if (!"name" in AabbTree_sortNodesNoY_sortNodesNoYRecursive)
    AabbTree_sortNodesNoY_sortNodesNoYRecursive.name = "AabbTree_sortNodesNoY_sortNodesNoYRecursive";
  $desc = $collectedClasses.AabbTree_sortNodesNoY_sortNodesNoYRecursive;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AabbTree_sortNodesNoY_sortNodesNoYRecursive.prototype = $desc;
  function AabbTree_sortNodesHighQuality_sortNodesHighQualityRecursive(box_0, this_1, numNodesLeaf_2, calculateSAH_3) {
    this.box_0 = box_0;
    this.this_1 = this_1;
    this.numNodesLeaf_2 = numNodesLeaf_2;
    this.calculateSAH_3 = calculateSAH_3;
  }
  AabbTree_sortNodesHighQuality_sortNodesHighQualityRecursive.builtin$cls = "AabbTree_sortNodesHighQuality_sortNodesHighQualityRecursive";
  if (!"name" in AabbTree_sortNodesHighQuality_sortNodesHighQualityRecursive)
    AabbTree_sortNodesHighQuality_sortNodesHighQualityRecursive.name = "AabbTree_sortNodesHighQuality_sortNodesHighQualityRecursive";
  $desc = $collectedClasses.AabbTree_sortNodesHighQuality_sortNodesHighQualityRecursive;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AabbTree_sortNodesHighQuality_sortNodesHighQualityRecursive.prototype = $desc;
  function AabbTree_nthElement_medianFn() {
  }
  AabbTree_nthElement_medianFn.builtin$cls = "AabbTree_nthElement_medianFn";
  if (!"name" in AabbTree_nthElement_medianFn)
    AabbTree_nthElement_medianFn.name = "AabbTree_nthElement_medianFn";
  $desc = $collectedClasses.AabbTree_nthElement_medianFn;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AabbTree_nthElement_medianFn.prototype = $desc;
  function AabbTree_nthElement_insertionSortFn() {
  }
  AabbTree_nthElement_insertionSortFn.builtin$cls = "AabbTree_nthElement_insertionSortFn";
  if (!"name" in AabbTree_nthElement_insertionSortFn)
    AabbTree_nthElement_insertionSortFn.name = "AabbTree_nthElement_insertionSortFn";
  $desc = $collectedClasses.AabbTree_nthElement_insertionSortFn;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AabbTree_nthElement_insertionSortFn.prototype = $desc;
  function WebGLPhysicsIsland(_bodies, _constraints, _wakeTimeStamp, _active) {
    this._bodies = _bodies;
    this._constraints = _constraints;
    this._wakeTimeStamp = _wakeTimeStamp;
    this._active = _active;
  }
  WebGLPhysicsIsland.builtin$cls = "WebGLPhysicsIsland";
  if (!"name" in WebGLPhysicsIsland)
    WebGLPhysicsIsland.name = "WebGLPhysicsIsland";
  $desc = $collectedClasses.WebGLPhysicsIsland;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WebGLPhysicsIsland.prototype = $desc;
  function WebGLPhysicsTOIEvent(objectA, objectB, shapeA, shapeB, closestA, closestB, axis, distance, toi, frozenA, frozenB, concave) {
    this.objectA = objectA;
    this.objectB = objectB;
    this.shapeA = shapeA;
    this.shapeB = shapeB;
    this.closestA = closestA;
    this.closestB = closestB;
    this.axis = axis;
    this.distance = distance;
    this.toi = toi;
    this.frozenA = frozenA;
    this.frozenB = frozenB;
    this.concave = concave;
  }
  WebGLPhysicsTOIEvent.builtin$cls = "WebGLPhysicsTOIEvent";
  if (!"name" in WebGLPhysicsTOIEvent)
    WebGLPhysicsTOIEvent.name = "WebGLPhysicsTOIEvent";
  $desc = $collectedClasses.WebGLPhysicsTOIEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WebGLPhysicsTOIEvent.prototype = $desc;
  function WebGLPhysicsPrivateBody(_arbiters, _island, _islandRoot, _islandRank) {
    this._arbiters = _arbiters;
    this._island = _island;
    this._islandRoot = _islandRoot;
    this._islandRank = _islandRank;
  }
  WebGLPhysicsPrivateBody.builtin$cls = "WebGLPhysicsPrivateBody";
  if (!"name" in WebGLPhysicsPrivateBody)
    WebGLPhysicsPrivateBody.name = "WebGLPhysicsPrivateBody";
  $desc = $collectedClasses.WebGLPhysicsPrivateBody;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WebGLPhysicsPrivateBody.prototype = $desc;
  WebGLPhysicsPrivateBody.prototype.get$_arbiters = function() {
    return this._arbiters;
  };
  WebGLPhysicsPrivateBody.prototype.get$_island = function() {
    return this._island;
  };
  WebGLPhysicsPrivateBody.prototype.get$_islandRoot = function() {
    return this._islandRoot;
  };
  WebGLPhysicsPrivateBody.prototype.get$_islandRank = function() {
    return this._islandRank;
  };
  function WebGLPhysicsBoxShape(_margin, _radius, _collisionRadius, _halfExtents, _inertia, _center) {
    this._margin = _margin;
    this._radius = _radius;
    this._collisionRadius = _collisionRadius;
    this._halfExtents = _halfExtents;
    this._inertia = _inertia;
    this._center = _center;
  }
  WebGLPhysicsBoxShape.builtin$cls = "WebGLPhysicsBoxShape";
  if (!"name" in WebGLPhysicsBoxShape)
    WebGLPhysicsBoxShape.name = "WebGLPhysicsBoxShape";
  $desc = $collectedClasses.WebGLPhysicsBoxShape;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WebGLPhysicsBoxShape.prototype = $desc;
  function WebGLPhysicsPlaneShape(distance, normal, _margin, _radius, _collisionRadius, _halfExtents, _inertia, _center) {
    this.distance = distance;
    this.normal = normal;
    this._margin = _margin;
    this._radius = _radius;
    this._collisionRadius = _collisionRadius;
    this._halfExtents = _halfExtents;
    this._inertia = _inertia;
    this._center = _center;
  }
  WebGLPhysicsPlaneShape.builtin$cls = "WebGLPhysicsPlaneShape";
  if (!"name" in WebGLPhysicsPlaneShape)
    WebGLPhysicsPlaneShape.name = "WebGLPhysicsPlaneShape";
  $desc = $collectedClasses.WebGLPhysicsPlaneShape;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WebGLPhysicsPlaneShape.prototype = $desc;
  WebGLPhysicsPlaneShape.prototype.get$normal = function() {
    return this.normal;
  };
  function WebGLPhysicsShape(_collisionRadius) {
    this._collisionRadius = _collisionRadius;
  }
  WebGLPhysicsShape.builtin$cls = "WebGLPhysicsShape";
  if (!"name" in WebGLPhysicsShape)
    WebGLPhysicsShape.name = "WebGLPhysicsShape";
  $desc = $collectedClasses.WebGLPhysicsShape;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WebGLPhysicsShape.prototype = $desc;
  WebGLPhysicsShape.prototype.get$_collisionRadius = function() {
    return this._collisionRadius;
  };
  function WebGLPhysicsTriangleShape(index, collisionRadius, triangleArray) {
    this.index = index;
    this.collisionRadius = collisionRadius;
    this.triangleArray = triangleArray;
  }
  WebGLPhysicsTriangleShape.builtin$cls = "WebGLPhysicsTriangleShape";
  if (!"name" in WebGLPhysicsTriangleShape)
    WebGLPhysicsTriangleShape.name = "WebGLPhysicsTriangleShape";
  $desc = $collectedClasses.WebGLPhysicsTriangleShape;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WebGLPhysicsTriangleShape.prototype = $desc;
  WebGLPhysicsTriangleShape.prototype.get$index = function(receiver) {
    return this.index;
  };
  function WebGLGJKContactSolver(simplex, numVertices, closest, cachedCoords, tempCoords) {
    this.simplex = simplex;
    this.numVertices = numVertices;
    this.closest = closest;
    this.cachedCoords = cachedCoords;
    this.tempCoords = tempCoords;
  }
  WebGLGJKContactSolver.builtin$cls = "WebGLGJKContactSolver";
  if (!"name" in WebGLGJKContactSolver)
    WebGLGJKContactSolver.name = "WebGLGJKContactSolver";
  $desc = $collectedClasses.WebGLGJKContactSolver;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WebGLGJKContactSolver.prototype = $desc;
  function WebGLPhysicsWorld(timeStamp, contactCallbackObjects, _getTime, _gravity, _maxSubSteps, _fixedTimeStep, _variableMinStep, _variableMaxStep, _variableStep, _maxGiveUpTimeStep, _staticSpatialMap, _dynamicSpatialMap, _collisionObjects, _rigidBodies, _constraints, _kinematicBodies, _planeAxis, _planeSA, _planeSB, _midStep, _narrowTriangle, _narrowCache, _narrowCache2, _narrowFakeBody, _narrowTransform, _narrowExtents, _continuousFakeBody, _continuousInvTransform, _continuousExtents, _activeArbiters, _activeBodies, _activeKinematics, _activeConstraints, _persistantObjectsList, _persistantObjectsList2, _persistantTrianglesList, _persistantTOIEventList, _prevTimeStep, _prevTimeStamp, _timeStamp, _contactGJK, _contactEPA, _sweepTriangle, _sweepDelta, _sweepFromExtents, _sweepToExtents, _sweepExtents, _sweepCache, _sweepFakeBody, _sweepTransform, _sweepTransform2, _performanceData, _syncExtents, _contactCallbackObjects, _contactCallbackRemovedArbiters) {
    this.timeStamp = timeStamp;
    this.contactCallbackObjects = contactCallbackObjects;
    this._getTime = _getTime;
    this._gravity = _gravity;
    this._maxSubSteps = _maxSubSteps;
    this._fixedTimeStep = _fixedTimeStep;
    this._variableMinStep = _variableMinStep;
    this._variableMaxStep = _variableMaxStep;
    this._variableStep = _variableStep;
    this._maxGiveUpTimeStep = _maxGiveUpTimeStep;
    this._staticSpatialMap = _staticSpatialMap;
    this._dynamicSpatialMap = _dynamicSpatialMap;
    this._collisionObjects = _collisionObjects;
    this._rigidBodies = _rigidBodies;
    this._constraints = _constraints;
    this._kinematicBodies = _kinematicBodies;
    this._planeAxis = _planeAxis;
    this._planeSA = _planeSA;
    this._planeSB = _planeSB;
    this._midStep = _midStep;
    this._narrowTriangle = _narrowTriangle;
    this._narrowCache = _narrowCache;
    this._narrowCache2 = _narrowCache2;
    this._narrowFakeBody = _narrowFakeBody;
    this._narrowTransform = _narrowTransform;
    this._narrowExtents = _narrowExtents;
    this._continuousFakeBody = _continuousFakeBody;
    this._continuousInvTransform = _continuousInvTransform;
    this._continuousExtents = _continuousExtents;
    this._activeArbiters = _activeArbiters;
    this._activeBodies = _activeBodies;
    this._activeKinematics = _activeKinematics;
    this._activeConstraints = _activeConstraints;
    this._persistantObjectsList = _persistantObjectsList;
    this._persistantObjectsList2 = _persistantObjectsList2;
    this._persistantTrianglesList = _persistantTrianglesList;
    this._persistantTOIEventList = _persistantTOIEventList;
    this._prevTimeStep = _prevTimeStep;
    this._prevTimeStamp = _prevTimeStamp;
    this._timeStamp = _timeStamp;
    this._contactGJK = _contactGJK;
    this._contactEPA = _contactEPA;
    this._sweepTriangle = _sweepTriangle;
    this._sweepDelta = _sweepDelta;
    this._sweepFromExtents = _sweepFromExtents;
    this._sweepToExtents = _sweepToExtents;
    this._sweepExtents = _sweepExtents;
    this._sweepCache = _sweepCache;
    this._sweepFakeBody = _sweepFakeBody;
    this._sweepTransform = _sweepTransform;
    this._sweepTransform2 = _sweepTransform2;
    this._performanceData = _performanceData;
    this._syncExtents = _syncExtents;
    this._contactCallbackObjects = _contactCallbackObjects;
    this._contactCallbackRemovedArbiters = _contactCallbackRemovedArbiters;
  }
  WebGLPhysicsWorld.builtin$cls = "WebGLPhysicsWorld";
  if (!"name" in WebGLPhysicsWorld)
    WebGLPhysicsWorld.name = "WebGLPhysicsWorld";
  $desc = $collectedClasses.WebGLPhysicsWorld;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WebGLPhysicsWorld.prototype = $desc;
  WebGLPhysicsWorld.prototype.get$timeStamp = function(receiver) {
    return this.timeStamp;
  };
  function WebGLPhysicsWorld__computeSleeping__find() {
  }
  WebGLPhysicsWorld__computeSleeping__find.builtin$cls = "WebGLPhysicsWorld__computeSleeping__find";
  if (!"name" in WebGLPhysicsWorld__computeSleeping__find)
    WebGLPhysicsWorld__computeSleeping__find.name = "WebGLPhysicsWorld__computeSleeping__find";
  $desc = $collectedClasses.WebGLPhysicsWorld__computeSleeping__find;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WebGLPhysicsWorld__computeSleeping__find.prototype = $desc;
  function WebGLPhysicsWorld__computeSleeping__unify(_find_0) {
    this._find_0 = _find_0;
  }
  WebGLPhysicsWorld__computeSleeping__unify.builtin$cls = "WebGLPhysicsWorld__computeSleeping__unify";
  if (!"name" in WebGLPhysicsWorld__computeSleeping__unify)
    WebGLPhysicsWorld__computeSleeping__unify.name = "WebGLPhysicsWorld__computeSleeping__unify";
  $desc = $collectedClasses.WebGLPhysicsWorld__computeSleeping__unify;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WebGLPhysicsWorld__computeSleeping__unify.prototype = $desc;
  function GameLoop() {
  }
  GameLoop.builtin$cls = "GameLoop";
  if (!"name" in GameLoop)
    GameLoop.name = "GameLoop";
  $desc = $collectedClasses.GameLoop;
  if ($desc instanceof Array)
    $desc = $desc[1];
  GameLoop.prototype = $desc;
  function DigitalButton(buttonId, framePressed, frameReleased, timePressed, timeReleased) {
    this.buttonId = buttonId;
    this.framePressed = framePressed;
    this.frameReleased = frameReleased;
    this.timePressed = timePressed;
    this.timeReleased = timeReleased;
  }
  DigitalButton.builtin$cls = "DigitalButton";
  if (!"name" in DigitalButton)
    DigitalButton.name = "DigitalButton";
  $desc = $collectedClasses.DigitalButton;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DigitalButton.prototype = $desc;
  DigitalButton.prototype.set$framePressed = function(v) {
    return this.framePressed = v;
  };
  DigitalButton.prototype.set$frameReleased = function(v) {
    return this.frameReleased = v;
  };
  function DigitalButtonEvent(down, frame, buttonId, time) {
    this.down = down;
    this.frame = frame;
    this.buttonId = buttonId;
    this.time = time;
  }
  DigitalButtonEvent.builtin$cls = "DigitalButtonEvent";
  if (!"name" in DigitalButtonEvent)
    DigitalButtonEvent.name = "DigitalButtonEvent";
  $desc = $collectedClasses.DigitalButtonEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DigitalButtonEvent.prototype = $desc;
  DigitalButtonEvent.prototype.get$down = function() {
    return this.down;
  };
  function DigitalInput() {
  }
  DigitalInput.builtin$cls = "DigitalInput";
  if (!"name" in DigitalInput)
    DigitalInput.name = "DigitalInput";
  $desc = $collectedClasses.DigitalInput;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DigitalInput.prototype = $desc;
  function GameLoopTimer() {
  }
  GameLoopTimer.builtin$cls = "GameLoopTimer";
  if (!"name" in GameLoopTimer)
    GameLoopTimer.name = "GameLoopTimer";
  $desc = $collectedClasses.GameLoopTimer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  GameLoopTimer.prototype = $desc;
  function GameLoopGamepad(gameLoop, buttons, sticks) {
    this.gameLoop = gameLoop;
    this.buttons = buttons;
    this.sticks = sticks;
  }
  GameLoopGamepad.builtin$cls = "GameLoopGamepad";
  if (!"name" in GameLoopGamepad)
    GameLoopGamepad.name = "GameLoopGamepad";
  $desc = $collectedClasses.GameLoopGamepad;
  if ($desc instanceof Array)
    $desc = $desc[1];
  GameLoopGamepad.prototype = $desc;
  function GameLoopHtml(element, _frameCounter, _initialized, _interrupt, _previousFrameTime, _frameTime, _resizePending, _nextResize, maxAccumulatedTime, _accumulatedTime, _gameTime, _renderInterpolationFactor, resizeLimit, _pointerLock, _keyboard, _mouse, _gamepad0, _lastMousePos, _touchSet, _rafId, _touchEvents, _keyboardEvents, _mouseEvents, onRender, onResize, onFullscreenChange, onPointerLockChange, onTouchStart, onTouchEnd, updateTimeStep, game_loop_common$GameLoop$maxAccumulatedTime, _timers, onUpdate) {
    this.element = element;
    this._frameCounter = _frameCounter;
    this._initialized = _initialized;
    this._interrupt = _interrupt;
    this._previousFrameTime = _previousFrameTime;
    this._frameTime = _frameTime;
    this._resizePending = _resizePending;
    this._nextResize = _nextResize;
    this.maxAccumulatedTime = maxAccumulatedTime;
    this._accumulatedTime = _accumulatedTime;
    this._gameTime = _gameTime;
    this._renderInterpolationFactor = _renderInterpolationFactor;
    this.resizeLimit = resizeLimit;
    this._pointerLock = _pointerLock;
    this._keyboard = _keyboard;
    this._mouse = _mouse;
    this._gamepad0 = _gamepad0;
    this._lastMousePos = _lastMousePos;
    this._touchSet = _touchSet;
    this._rafId = _rafId;
    this._touchEvents = _touchEvents;
    this._keyboardEvents = _keyboardEvents;
    this._mouseEvents = _mouseEvents;
    this.onRender = onRender;
    this.onResize = onResize;
    this.onFullscreenChange = onFullscreenChange;
    this.onPointerLockChange = onPointerLockChange;
    this.onTouchStart = onTouchStart;
    this.onTouchEnd = onTouchEnd;
    this.updateTimeStep = updateTimeStep;
    this.game_loop_common$GameLoop$maxAccumulatedTime = game_loop_common$GameLoop$maxAccumulatedTime;
    this._timers = _timers;
    this.onUpdate = onUpdate;
  }
  GameLoopHtml.builtin$cls = "GameLoopHtml";
  if (!"name" in GameLoopHtml)
    GameLoopHtml.name = "GameLoopHtml";
  $desc = $collectedClasses.GameLoopHtml;
  if ($desc instanceof Array)
    $desc = $desc[1];
  GameLoopHtml.prototype = $desc;
  function Keyboard(gameLoop, buttons, interceptor) {
    this.gameLoop = gameLoop;
    this.buttons = buttons;
    this.interceptor = interceptor;
  }
  Keyboard.builtin$cls = "Keyboard";
  if (!"name" in Keyboard)
    Keyboard.name = "Keyboard";
  $desc = $collectedClasses.Keyboard;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Keyboard.prototype = $desc;
  function GameLoopMouseEvent(x, y, dx, dy, clampX, clampY, time, withinCanvas, frame) {
    this.x = x;
    this.y = y;
    this.dx = dx;
    this.dy = dy;
    this.clampX = clampX;
    this.clampY = clampY;
    this.time = time;
    this.withinCanvas = withinCanvas;
    this.frame = frame;
  }
  GameLoopMouseEvent.builtin$cls = "GameLoopMouseEvent";
  if (!"name" in GameLoopMouseEvent)
    GameLoopMouseEvent.name = "GameLoopMouseEvent";
  $desc = $collectedClasses.GameLoopMouseEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  GameLoopMouseEvent.prototype = $desc;
  GameLoopMouseEvent.prototype.get$x = function(receiver) {
    return this.x;
  };
  GameLoopMouseEvent.prototype.get$y = function(receiver) {
    return this.y;
  };
  function Mouse(_dx, _dy, _game_loop_html$_x, _game_loop_html$_y, _clampX, _clampY, _wheelDx, _wheelDy, _withinCanvas, _time, _frame, gameLoop, buttons, interceptor) {
    this._dx = _dx;
    this._dy = _dy;
    this._game_loop_html$_x = _game_loop_html$_x;
    this._game_loop_html$_y = _game_loop_html$_y;
    this._clampX = _clampX;
    this._clampY = _clampY;
    this._wheelDx = _wheelDx;
    this._wheelDy = _wheelDy;
    this._withinCanvas = _withinCanvas;
    this._time = _time;
    this._frame = _frame;
    this.gameLoop = gameLoop;
    this.buttons = buttons;
    this.interceptor = interceptor;
  }
  Mouse.builtin$cls = "Mouse";
  if (!"name" in Mouse)
    Mouse.name = "Mouse";
  $desc = $collectedClasses.Mouse;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Mouse.prototype = $desc;
  function PointerLock(gameLoop, lockOnClick) {
    this.gameLoop = gameLoop;
    this.lockOnClick = lockOnClick;
  }
  PointerLock.builtin$cls = "PointerLock";
  if (!"name" in PointerLock)
    PointerLock.name = "PointerLock";
  $desc = $collectedClasses.PointerLock;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PointerLock.prototype = $desc;
  function _GameLoopTouchEvent(event, type) {
    this.event = event;
    this.type = type;
  }
  _GameLoopTouchEvent.builtin$cls = "_GameLoopTouchEvent";
  if (!"name" in _GameLoopTouchEvent)
    _GameLoopTouchEvent.name = "_GameLoopTouchEvent";
  $desc = $collectedClasses._GameLoopTouchEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _GameLoopTouchEvent.prototype = $desc;
  _GameLoopTouchEvent.prototype.get$event = function() {
    return this.event;
  };
  _GameLoopTouchEvent.prototype.get$type = function(receiver) {
    return this.type;
  };
  function GameLoopTouchPosition(x, y, dx, dy, time, frame) {
    this.x = x;
    this.y = y;
    this.dx = dx;
    this.dy = dy;
    this.time = time;
    this.frame = frame;
  }
  GameLoopTouchPosition.builtin$cls = "GameLoopTouchPosition";
  if (!"name" in GameLoopTouchPosition)
    GameLoopTouchPosition.name = "GameLoopTouchPosition";
  $desc = $collectedClasses.GameLoopTouchPosition;
  if ($desc instanceof Array)
    $desc = $desc[1];
  GameLoopTouchPosition.prototype = $desc;
  GameLoopTouchPosition.prototype.get$x = function(receiver) {
    return this.x;
  };
  GameLoopTouchPosition.prototype.get$y = function(receiver) {
    return this.y;
  };
  function GameLoopTouch(id, positions) {
    this.id = id;
    this.positions = positions;
  }
  GameLoopTouch.builtin$cls = "GameLoopTouch";
  if (!"name" in GameLoopTouch)
    GameLoopTouch.name = "GameLoopTouch";
  $desc = $collectedClasses.GameLoopTouch;
  if ($desc instanceof Array)
    $desc = $desc[1];
  GameLoopTouch.prototype = $desc;
  GameLoopTouch.prototype.get$positions = function() {
    return this.positions;
  };
  function GameLoopTouchSet(activeTouches, gameLoop) {
    this.activeTouches = activeTouches;
    this.gameLoop = gameLoop;
  }
  GameLoopTouchSet.builtin$cls = "GameLoopTouchSet";
  if (!"name" in GameLoopTouchSet)
    GameLoopTouchSet.name = "GameLoopTouchSet";
  $desc = $collectedClasses.GameLoopTouchSet;
  if ($desc instanceof Array)
    $desc = $desc[1];
  GameLoopTouchSet.prototype = $desc;
  function GameLoopTouchSet__start_closure(this_0) {
    this.this_0 = this_0;
  }
  GameLoopTouchSet__start_closure.builtin$cls = "GameLoopTouchSet__start_closure";
  if (!"name" in GameLoopTouchSet__start_closure)
    GameLoopTouchSet__start_closure.name = "GameLoopTouchSet__start_closure";
  $desc = $collectedClasses.GameLoopTouchSet__start_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  GameLoopTouchSet__start_closure.prototype = $desc;
  function GameLoopTouchSet__end_closure(this_0) {
    this.this_0 = this_0;
  }
  GameLoopTouchSet__end_closure.builtin$cls = "GameLoopTouchSet__end_closure";
  if (!"name" in GameLoopTouchSet__end_closure)
    GameLoopTouchSet__end_closure.name = "GameLoopTouchSet__end_closure";
  $desc = $collectedClasses.GameLoopTouchSet__end_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  GameLoopTouchSet__end_closure.prototype = $desc;
  function GameLoopTouchSet__move_closure(this_0) {
    this.this_0 = this_0;
  }
  GameLoopTouchSet__move_closure.builtin$cls = "GameLoopTouchSet__move_closure";
  if (!"name" in GameLoopTouchSet__move_closure)
    GameLoopTouchSet__move_closure.name = "GameLoopTouchSet__move_closure";
  $desc = $collectedClasses.GameLoopTouchSet__move_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  GameLoopTouchSet__move_closure.prototype = $desc;
  function GameLoopTouchSet__verifyTouchList_closure(this_0, touches_1) {
    this.this_0 = this_0;
    this.touches_1 = touches_1;
  }
  GameLoopTouchSet__verifyTouchList_closure.builtin$cls = "GameLoopTouchSet__verifyTouchList_closure";
  if (!"name" in GameLoopTouchSet__verifyTouchList_closure)
    GameLoopTouchSet__verifyTouchList_closure.name = "GameLoopTouchSet__verifyTouchList_closure";
  $desc = $collectedClasses.GameLoopTouchSet__verifyTouchList_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  GameLoopTouchSet__verifyTouchList_closure.prototype = $desc;
  function convertDartToNative_Dictionary_closure(object_0) {
    this.object_0 = object_0;
  }
  convertDartToNative_Dictionary_closure.builtin$cls = "convertDartToNative_Dictionary_closure";
  if (!"name" in convertDartToNative_Dictionary_closure)
    convertDartToNative_Dictionary_closure.name = "convertDartToNative_Dictionary_closure";
  $desc = $collectedClasses.convertDartToNative_Dictionary_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  convertDartToNative_Dictionary_closure.prototype = $desc;
  function convertNativeToDart_AcceptStructuredClone_findSlot(values_0, copies_1) {
    this.values_0 = values_0;
    this.copies_1 = copies_1;
  }
  convertNativeToDart_AcceptStructuredClone_findSlot.builtin$cls = "convertNativeToDart_AcceptStructuredClone_findSlot";
  if (!"name" in convertNativeToDart_AcceptStructuredClone_findSlot)
    convertNativeToDart_AcceptStructuredClone_findSlot.name = "convertNativeToDart_AcceptStructuredClone_findSlot";
  $desc = $collectedClasses.convertNativeToDart_AcceptStructuredClone_findSlot;
  if ($desc instanceof Array)
    $desc = $desc[1];
  convertNativeToDart_AcceptStructuredClone_findSlot.prototype = $desc;
  function convertNativeToDart_AcceptStructuredClone_readSlot(copies_2) {
    this.copies_2 = copies_2;
  }
  convertNativeToDart_AcceptStructuredClone_readSlot.builtin$cls = "convertNativeToDart_AcceptStructuredClone_readSlot";
  if (!"name" in convertNativeToDart_AcceptStructuredClone_readSlot)
    convertNativeToDart_AcceptStructuredClone_readSlot.name = "convertNativeToDart_AcceptStructuredClone_readSlot";
  $desc = $collectedClasses.convertNativeToDart_AcceptStructuredClone_readSlot;
  if ($desc instanceof Array)
    $desc = $desc[1];
  convertNativeToDart_AcceptStructuredClone_readSlot.prototype = $desc;
  function convertNativeToDart_AcceptStructuredClone_writeSlot(copies_3) {
    this.copies_3 = copies_3;
  }
  convertNativeToDart_AcceptStructuredClone_writeSlot.builtin$cls = "convertNativeToDart_AcceptStructuredClone_writeSlot";
  if (!"name" in convertNativeToDart_AcceptStructuredClone_writeSlot)
    convertNativeToDart_AcceptStructuredClone_writeSlot.name = "convertNativeToDart_AcceptStructuredClone_writeSlot";
  $desc = $collectedClasses.convertNativeToDart_AcceptStructuredClone_writeSlot;
  if ($desc instanceof Array)
    $desc = $desc[1];
  convertNativeToDart_AcceptStructuredClone_writeSlot.prototype = $desc;
  function convertNativeToDart_AcceptStructuredClone_walk(mustCopy_4, findSlot_5, readSlot_6, writeSlot_7) {
    this.mustCopy_4 = mustCopy_4;
    this.findSlot_5 = findSlot_5;
    this.readSlot_6 = readSlot_6;
    this.writeSlot_7 = writeSlot_7;
  }
  convertNativeToDart_AcceptStructuredClone_walk.builtin$cls = "convertNativeToDart_AcceptStructuredClone_walk";
  if (!"name" in convertNativeToDart_AcceptStructuredClone_walk)
    convertNativeToDart_AcceptStructuredClone_walk.name = "convertNativeToDart_AcceptStructuredClone_walk";
  $desc = $collectedClasses.convertNativeToDart_AcceptStructuredClone_walk;
  if ($desc instanceof Array)
    $desc = $desc[1];
  convertNativeToDart_AcceptStructuredClone_walk.prototype = $desc;
  function _TypedContextAttributes(alpha, antialias, depth, premultipliedAlpha, preserveDrawingBuffer, stencil) {
    this.alpha = alpha;
    this.antialias = antialias;
    this.depth = depth;
    this.premultipliedAlpha = premultipliedAlpha;
    this.preserveDrawingBuffer = preserveDrawingBuffer;
    this.stencil = stencil;
  }
  _TypedContextAttributes.builtin$cls = "_TypedContextAttributes";
  if (!"name" in _TypedContextAttributes)
    _TypedContextAttributes.name = "_TypedContextAttributes";
  $desc = $collectedClasses._TypedContextAttributes;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _TypedContextAttributes.prototype = $desc;
  _TypedContextAttributes.prototype.get$depth = function(receiver) {
    return this.depth;
  };
  _TypedContextAttributes.prototype.get$stencil = function(receiver) {
    return this.stencil;
  };
  function Logger(name, parent, _level, _children, children, _controller) {
    this.name = name;
    this.parent = parent;
    this._level = _level;
    this._children = _children;
    this.children = children;
    this._controller = _controller;
  }
  Logger.builtin$cls = "Logger";
  if (!"name" in Logger)
    Logger.name = "Logger";
  $desc = $collectedClasses.Logger;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Logger.prototype = $desc;
  Logger.prototype.get$name = function(receiver) {
    return this.name;
  };
  Logger.prototype.get$_children = function(receiver) {
    return this._children;
  };
  function Logger_Logger_closure(name_0) {
    this.name_0 = name_0;
  }
  Logger_Logger_closure.builtin$cls = "Logger_Logger_closure";
  if (!"name" in Logger_Logger_closure)
    Logger_Logger_closure.name = "Logger_Logger_closure";
  $desc = $collectedClasses.Logger_Logger_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Logger_Logger_closure.prototype = $desc;
  function Level(name, value) {
    this.name = name;
    this.value = value;
  }
  Level.builtin$cls = "Level";
  if (!"name" in Level)
    Level.name = "Level";
  $desc = $collectedClasses.Level;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Level.prototype = $desc;
  Level.prototype.get$name = function(receiver) {
    return this.name;
  };
  Level.prototype.get$value = function(receiver) {
    return this.value;
  };
  function LogRecord(level, message, loggerName, time, sequenceNumber, error, stackTrace) {
    this.level = level;
    this.message = message;
    this.loggerName = loggerName;
    this.time = time;
    this.sequenceNumber = sequenceNumber;
    this.error = error;
    this.stackTrace = stackTrace;
  }
  LogRecord.builtin$cls = "LogRecord";
  if (!"name" in LogRecord)
    LogRecord.name = "LogRecord";
  $desc = $collectedClasses.LogRecord;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LogRecord.prototype = $desc;
  LogRecord.prototype.get$level = function() {
    return this.level;
  };
  LogRecord.prototype.get$message = function(receiver) {
    return this.message;
  };
  LogRecord.prototype.get$error = function(receiver) {
    return this.error;
  };
  LogRecord.prototype.get$stackTrace = function() {
    return this.stackTrace;
  };
  function BlendState(_enabled, _blendFactorRed, _blendFactorGreen, _blendFactorBlue, _blendFactorAlpha, _alphaBlendOperation, _alphaDestinationBlend, _alphaSourceBlend, _colorBlendOperation, _colorDestinationBlend, _colorSourceBlend, _writeRenderTargetRed, _writeRenderTargetGreen, _writeRenderTargetBlue, _writeRenderTargetAlpha) {
    this._enabled = _enabled;
    this._blendFactorRed = _blendFactorRed;
    this._blendFactorGreen = _blendFactorGreen;
    this._blendFactorBlue = _blendFactorBlue;
    this._blendFactorAlpha = _blendFactorAlpha;
    this._alphaBlendOperation = _alphaBlendOperation;
    this._alphaDestinationBlend = _alphaDestinationBlend;
    this._alphaSourceBlend = _alphaSourceBlend;
    this._colorBlendOperation = _colorBlendOperation;
    this._colorDestinationBlend = _colorDestinationBlend;
    this._colorSourceBlend = _colorSourceBlend;
    this._writeRenderTargetRed = _writeRenderTargetRed;
    this._writeRenderTargetGreen = _writeRenderTargetGreen;
    this._writeRenderTargetBlue = _writeRenderTargetBlue;
    this._writeRenderTargetAlpha = _writeRenderTargetAlpha;
  }
  BlendState.builtin$cls = "BlendState";
  if (!"name" in BlendState)
    BlendState.name = "BlendState";
  $desc = $collectedClasses.BlendState;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BlendState.prototype = $desc;
  function SpectreBuffer() {
  }
  SpectreBuffer.builtin$cls = "SpectreBuffer";
  if (!"name" in SpectreBuffer)
    SpectreBuffer.name = "SpectreBuffer";
  $desc = $collectedClasses.SpectreBuffer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SpectreBuffer.prototype = $desc;
  function Camera(position, upDirection, focusPosition, zNear, zFar, aspectRatio, FOV) {
    this.position = position;
    this.upDirection = upDirection;
    this.focusPosition = focusPosition;
    this.zNear = zNear;
    this.zFar = zFar;
    this.aspectRatio = aspectRatio;
    this.FOV = FOV;
  }
  Camera.builtin$cls = "Camera";
  if (!"name" in Camera)
    Camera.name = "Camera";
  $desc = $collectedClasses.Camera;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Camera.prototype = $desc;
  function _DebugLineVertex(x, y, z, next) {
    this.x = x;
    this.y = y;
    this.z = z;
    this.next = next;
  }
  _DebugLineVertex.builtin$cls = "_DebugLineVertex";
  if (!"name" in _DebugLineVertex)
    _DebugLineVertex.name = "_DebugLineVertex";
  $desc = $collectedClasses._DebugLineVertex;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _DebugLineVertex.prototype = $desc;
  _DebugLineVertex.prototype.get$x = function(receiver) {
    return this.x;
  };
  _DebugLineVertex.prototype.get$y = function(receiver) {
    return this.y;
  };
  function _DebugLineObject(r, g, b, a, duration, vertexStream) {
    this.r = r;
    this.g = g;
    this.b = b;
    this.a = a;
    this.duration = duration;
    this.vertexStream = vertexStream;
  }
  _DebugLineObject.builtin$cls = "_DebugLineObject";
  if (!"name" in _DebugLineObject)
    _DebugLineObject.name = "_DebugLineObject";
  $desc = $collectedClasses._DebugLineObject;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _DebugLineObject.prototype = $desc;
  _DebugLineObject.prototype.get$vertexStream = function() {
    return this.vertexStream;
  };
  function _DebugLineCollection(_freeLineVertices, _freeLineObjects, _lineObjects, _lineObject) {
    this._freeLineVertices = _freeLineVertices;
    this._freeLineObjects = _freeLineObjects;
    this._lineObjects = _lineObjects;
    this._lineObject = _lineObject;
  }
  _DebugLineCollection.builtin$cls = "_DebugLineCollection";
  if (!"name" in _DebugLineCollection)
    _DebugLineCollection.name = "_DebugLineCollection";
  $desc = $collectedClasses._DebugLineCollection;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _DebugLineCollection.prototype = $desc;
  function _DebugDrawLineManager(device, lines, _lineMesh, _lineMeshInputLayout, _vboStorage) {
    this.device = device;
    this.lines = lines;
    this._lineMesh = _lineMesh;
    this._lineMeshInputLayout = _lineMeshInputLayout;
    this._vboStorage = _vboStorage;
  }
  _DebugDrawLineManager.builtin$cls = "_DebugDrawLineManager";
  if (!"name" in _DebugDrawLineManager)
    _DebugDrawLineManager.name = "_DebugDrawLineManager";
  $desc = $collectedClasses._DebugDrawLineManager;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _DebugDrawLineManager.prototype = $desc;
  function DebugDrawManager(_depthState, _blendState, _rasterizerState, _lineVertexShader, _lineFragmentShader, _lineShaderProgram, _depthEnabledLines, _depthDisabledLines, _cameraMatrix, device, _circle_u, _circle_v) {
    this._depthState = _depthState;
    this._blendState = _blendState;
    this._rasterizerState = _rasterizerState;
    this._lineVertexShader = _lineVertexShader;
    this._lineFragmentShader = _lineFragmentShader;
    this._lineShaderProgram = _lineShaderProgram;
    this._depthEnabledLines = _depthEnabledLines;
    this._depthDisabledLines = _depthDisabledLines;
    this._cameraMatrix = _cameraMatrix;
    this.device = device;
    this._circle_u = _circle_u;
    this._circle_v = _circle_v;
  }
  DebugDrawManager.builtin$cls = "DebugDrawManager";
  if (!"name" in DebugDrawManager)
    DebugDrawManager.name = "DebugDrawManager";
  $desc = $collectedClasses.DebugDrawManager;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DebugDrawManager.prototype = $desc;
  function DepthState(_depthBufferEnabled, _depthBufferWriteEnabled, _depthBufferFunction) {
    this._depthBufferEnabled = _depthBufferEnabled;
    this._depthBufferWriteEnabled = _depthBufferWriteEnabled;
    this._depthBufferFunction = _depthBufferFunction;
  }
  DepthState.builtin$cls = "DepthState";
  if (!"name" in DepthState)
    DepthState.name = "DepthState";
  $desc = $collectedClasses.DepthState;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DepthState.prototype = $desc;
  function DeviceChild(name) {
    this.name = name;
  }
  DeviceChild.builtin$cls = "DeviceChild";
  if (!"name" in DeviceChild)
    DeviceChild.name = "DeviceChild";
  $desc = $collectedClasses.DeviceChild;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DeviceChild.prototype = $desc;
  DeviceChild.prototype.get$name = function(receiver) {
    return this.name;
  };
  function Enum__stringify_closure(box_0, value_1) {
    this.box_0 = box_0;
    this.value_1 = value_1;
  }
  Enum__stringify_closure.builtin$cls = "Enum__stringify_closure";
  if (!"name" in Enum__stringify_closure)
    Enum__stringify_closure.name = "Enum__stringify_closure";
  $desc = $collectedClasses.Enum__stringify_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Enum__stringify_closure.prototype = $desc;
  function Enum__isValid_closure(box_0, value_1) {
    this.box_0 = box_0;
    this.value_1 = value_1;
  }
  Enum__isValid_closure.builtin$cls = "Enum__isValid_closure";
  if (!"name" in Enum__isValid_closure)
    Enum__isValid_closure.name = "Enum__isValid_closure";
  $desc = $collectedClasses.Enum__isValid_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Enum__isValid_closure.prototype = $desc;
  function FragmentShader(_type, _spectre$_source, _shader, autoCompile, device, name, _referenceCount, _disposed) {
    this._type = _type;
    this._spectre$_source = _spectre$_source;
    this._shader = _shader;
    this.autoCompile = autoCompile;
    this.device = device;
    this.name = name;
    this._referenceCount = _referenceCount;
    this._disposed = _disposed;
  }
  FragmentShader.builtin$cls = "FragmentShader";
  if (!"name" in FragmentShader)
    FragmentShader.name = "FragmentShader";
  $desc = $collectedClasses.FragmentShader;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FragmentShader.prototype = $desc;
  function GraphicsContext(device, _clearR, _clearG, _clearB, _clearA, _clearD, _tempTextureUnit, _activeTextureUnit, _samplers, _textures, _primitiveTopology, _indexBuffer, _shaderProgram, _renderTarget, _vertexBuffers, _enabledVertexAttributeArrays, _inputLayoutHandle, _preparedInputLayoutHandle, _blendStateDefault, _depthStateDefault, _rasterizerStateDefault, _viewport, _blendState, _depthState, _rasterizerState) {
    this.device = device;
    this._clearR = _clearR;
    this._clearG = _clearG;
    this._clearB = _clearB;
    this._clearA = _clearA;
    this._clearD = _clearD;
    this._tempTextureUnit = _tempTextureUnit;
    this._activeTextureUnit = _activeTextureUnit;
    this._samplers = _samplers;
    this._textures = _textures;
    this._primitiveTopology = _primitiveTopology;
    this._indexBuffer = _indexBuffer;
    this._shaderProgram = _shaderProgram;
    this._renderTarget = _renderTarget;
    this._vertexBuffers = _vertexBuffers;
    this._enabledVertexAttributeArrays = _enabledVertexAttributeArrays;
    this._inputLayoutHandle = _inputLayoutHandle;
    this._preparedInputLayoutHandle = _preparedInputLayoutHandle;
    this._blendStateDefault = _blendStateDefault;
    this._depthStateDefault = _depthStateDefault;
    this._rasterizerStateDefault = _rasterizerStateDefault;
    this._viewport = _viewport;
    this._blendState = _blendState;
    this._depthState = _depthState;
    this._rasterizerState = _rasterizerState;
  }
  GraphicsContext.builtin$cls = "GraphicsContext";
  if (!"name" in GraphicsContext)
    GraphicsContext.name = "GraphicsContext";
  $desc = $collectedClasses.GraphicsContext;
  if ($desc instanceof Array)
    $desc = $desc[1];
  GraphicsContext.prototype = $desc;
  function GraphicsContext__prepareInputs_closure(this_0) {
    this.this_0 = this_0;
  }
  GraphicsContext__prepareInputs_closure.builtin$cls = "GraphicsContext__prepareInputs_closure";
  if (!"name" in GraphicsContext__prepareInputs_closure)
    GraphicsContext__prepareInputs_closure.name = "GraphicsContext__prepareInputs_closure";
  $desc = $collectedClasses.GraphicsContext__prepareInputs_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  GraphicsContext__prepareInputs_closure.prototype = $desc;
  function GraphicsDevice(_surface, _context, _capabilities, _gl, children) {
    this._surface = _surface;
    this._context = _context;
    this._capabilities = _capabilities;
    this._gl = _gl;
    this.children = children;
  }
  GraphicsDevice.builtin$cls = "GraphicsDevice";
  if (!"name" in GraphicsDevice)
    GraphicsDevice.name = "GraphicsDevice";
  $desc = $collectedClasses.GraphicsDevice;
  if ($desc instanceof Array)
    $desc = $desc[1];
  GraphicsDevice.prototype = $desc;
  function GraphicsDevice_closure() {
  }
  GraphicsDevice_closure.builtin$cls = "GraphicsDevice_closure";
  if (!"name" in GraphicsDevice_closure)
    GraphicsDevice_closure.name = "GraphicsDevice_closure";
  $desc = $collectedClasses.GraphicsDevice_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  GraphicsDevice_closure.prototype = $desc;
  function GraphicsDeviceCapabilities(_vendor, _renderer, _textureUnits, _vertexShaderTextureUnits, _maxTextureSize, _maxCubeMapTextureSize, _maxAnisotropyLevel, _maxVertexAttribs, _maxVaryingVectors, _maxVertexShaderUniforms, _maxFragmentShaderUniforms, _depthBuffer, _stencilBuffer, _depthBufferSize, _stencilBufferSize, _floatTextures, _halfFloatTextures, _standardDerivatives, _vertexArrayObjects, _debugRendererInfo, _debugShaders, _unsignedIntIndices, _anisotropicFiltering, _loseContext, _compressedTextureS3TC, _depthTextures, _compressedTextureATC, _compressedTexturePVRTC, _multipleRenderTargets, _maxRenderTargets, _instancedArrays) {
    this._vendor = _vendor;
    this._renderer = _renderer;
    this._textureUnits = _textureUnits;
    this._vertexShaderTextureUnits = _vertexShaderTextureUnits;
    this._maxTextureSize = _maxTextureSize;
    this._maxCubeMapTextureSize = _maxCubeMapTextureSize;
    this._maxAnisotropyLevel = _maxAnisotropyLevel;
    this._maxVertexAttribs = _maxVertexAttribs;
    this._maxVaryingVectors = _maxVaryingVectors;
    this._maxVertexShaderUniforms = _maxVertexShaderUniforms;
    this._maxFragmentShaderUniforms = _maxFragmentShaderUniforms;
    this._depthBuffer = _depthBuffer;
    this._stencilBuffer = _stencilBuffer;
    this._depthBufferSize = _depthBufferSize;
    this._stencilBufferSize = _stencilBufferSize;
    this._floatTextures = _floatTextures;
    this._halfFloatTextures = _halfFloatTextures;
    this._standardDerivatives = _standardDerivatives;
    this._vertexArrayObjects = _vertexArrayObjects;
    this._debugRendererInfo = _debugRendererInfo;
    this._debugShaders = _debugShaders;
    this._unsignedIntIndices = _unsignedIntIndices;
    this._anisotropicFiltering = _anisotropicFiltering;
    this._loseContext = _loseContext;
    this._compressedTextureS3TC = _compressedTextureS3TC;
    this._depthTextures = _depthTextures;
    this._compressedTextureATC = _compressedTextureATC;
    this._compressedTexturePVRTC = _compressedTexturePVRTC;
    this._multipleRenderTargets = _multipleRenderTargets;
    this._maxRenderTargets = _maxRenderTargets;
    this._instancedArrays = _instancedArrays;
  }
  GraphicsDeviceCapabilities.builtin$cls = "GraphicsDeviceCapabilities";
  if (!"name" in GraphicsDeviceCapabilities)
    GraphicsDeviceCapabilities.name = "GraphicsDeviceCapabilities";
  $desc = $collectedClasses.GraphicsDeviceCapabilities;
  if ($desc instanceof Array)
    $desc = $desc[1];
  GraphicsDeviceCapabilities.prototype = $desc;
  function GraphicsDeviceConfig(_stencilBuffer) {
    this._stencilBuffer = _stencilBuffer;
  }
  GraphicsDeviceConfig.builtin$cls = "GraphicsDeviceConfig";
  if (!"name" in GraphicsDeviceConfig)
    GraphicsDeviceConfig.name = "GraphicsDeviceConfig";
  $desc = $collectedClasses.GraphicsDeviceConfig;
  if ($desc instanceof Array)
    $desc = $desc[1];
  GraphicsDeviceConfig.prototype = $desc;
  function IndexBuffer(_deviceBuffer, _bindTarget, _bindingParam, _usage, _size, device, name, _referenceCount, _disposed) {
    this._deviceBuffer = _deviceBuffer;
    this._bindTarget = _bindTarget;
    this._bindingParam = _bindingParam;
    this._usage = _usage;
    this._size = _size;
    this.device = device;
    this.name = name;
    this._referenceCount = _referenceCount;
    this._disposed = _disposed;
  }
  IndexBuffer.builtin$cls = "IndexBuffer";
  if (!"name" in IndexBuffer)
    IndexBuffer.name = "IndexBuffer";
  $desc = $collectedClasses.IndexBuffer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  IndexBuffer.prototype = $desc;
  function InputLayout(attributes, missingAttributes, _shaderProgram, _mesh, device, name, _referenceCount, _disposed) {
    this.attributes = attributes;
    this.missingAttributes = missingAttributes;
    this._shaderProgram = _shaderProgram;
    this._mesh = _mesh;
    this.device = device;
    this.name = name;
    this._referenceCount = _referenceCount;
    this._disposed = _disposed;
  }
  InputLayout.builtin$cls = "InputLayout";
  if (!"name" in InputLayout)
    InputLayout.name = "InputLayout";
  $desc = $collectedClasses.InputLayout;
  if ($desc instanceof Array)
    $desc = $desc[1];
  InputLayout.prototype = $desc;
  function InputLayout__refresh_closure(this_0) {
    this.this_0 = this_0;
  }
  InputLayout__refresh_closure.builtin$cls = "InputLayout__refresh_closure";
  if (!"name" in InputLayout__refresh_closure)
    InputLayout__refresh_closure.name = "InputLayout__refresh_closure";
  $desc = $collectedClasses.InputLayout__refresh_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  InputLayout__refresh_closure.prototype = $desc;
  function SpectreMeshAttribute(name, attribute) {
    this.name = name;
    this.attribute = attribute;
  }
  SpectreMeshAttribute.builtin$cls = "SpectreMeshAttribute";
  if (!"name" in SpectreMeshAttribute)
    SpectreMeshAttribute.name = "SpectreMeshAttribute";
  $desc = $collectedClasses.SpectreMeshAttribute;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SpectreMeshAttribute.prototype = $desc;
  SpectreMeshAttribute.prototype.get$name = function(receiver) {
    return this.name;
  };
  SpectreMeshAttribute.prototype.get$attribute = function() {
    return this.attribute;
  };
  function SpectreMesh() {
  }
  SpectreMesh.builtin$cls = "SpectreMesh";
  if (!"name" in SpectreMesh)
    SpectreMesh.name = "SpectreMesh";
  $desc = $collectedClasses.SpectreMesh;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SpectreMesh.prototype = $desc;
  function SingleArrayMesh(_deviceVertexBuffer, attributes, count, primitiveTopology, device, name, _referenceCount, _disposed) {
    this._deviceVertexBuffer = _deviceVertexBuffer;
    this.attributes = attributes;
    this.count = count;
    this.primitiveTopology = primitiveTopology;
    this.device = device;
    this.name = name;
    this._referenceCount = _referenceCount;
    this._disposed = _disposed;
  }
  SingleArrayMesh.builtin$cls = "SingleArrayMesh";
  if (!"name" in SingleArrayMesh)
    SingleArrayMesh.name = "SingleArrayMesh";
  $desc = $collectedClasses.SingleArrayMesh;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SingleArrayMesh.prototype = $desc;
  function SingleArrayIndexedMesh(_deviceVertexBuffer, _deviceIndexBuffer, attributes, count, primitiveTopology, device, name, _referenceCount, _disposed) {
    this._deviceVertexBuffer = _deviceVertexBuffer;
    this._deviceIndexBuffer = _deviceIndexBuffer;
    this.attributes = attributes;
    this.count = count;
    this.primitiveTopology = primitiveTopology;
    this.device = device;
    this.name = name;
    this._referenceCount = _referenceCount;
    this._disposed = _disposed;
  }
  SingleArrayIndexedMesh.builtin$cls = "SingleArrayIndexedMesh";
  if (!"name" in SingleArrayIndexedMesh)
    SingleArrayIndexedMesh.name = "SingleArrayIndexedMesh";
  $desc = $collectedClasses.SingleArrayIndexedMesh;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SingleArrayIndexedMesh.prototype = $desc;
  function RasterizerState(_cullMode, _frontFace, _depthBias, _slopeScaleDepthBias, _scissorTestEnabled) {
    this._cullMode = _cullMode;
    this._frontFace = _frontFace;
    this._depthBias = _depthBias;
    this._slopeScaleDepthBias = _slopeScaleDepthBias;
    this._scissorTestEnabled = _scissorTestEnabled;
  }
  RasterizerState.builtin$cls = "RasterizerState";
  if (!"name" in RasterizerState)
    RasterizerState.name = "RasterizerState";
  $desc = $collectedClasses.RasterizerState;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RasterizerState.prototype = $desc;
  function RenderTarget(_bindTarget, _bindingParam, _colorTargets, _drawBuffers, _deviceFramebuffer, _depthTarget, _renderable, _status, device, name, _referenceCount, _disposed) {
    this._bindTarget = _bindTarget;
    this._bindingParam = _bindingParam;
    this._colorTargets = _colorTargets;
    this._drawBuffers = _drawBuffers;
    this._deviceFramebuffer = _deviceFramebuffer;
    this._depthTarget = _depthTarget;
    this._renderable = _renderable;
    this._status = _status;
    this.device = device;
    this.name = name;
    this._referenceCount = _referenceCount;
    this._disposed = _disposed;
  }
  RenderTarget.builtin$cls = "RenderTarget";
  if (!"name" in RenderTarget)
    RenderTarget.name = "RenderTarget";
  $desc = $collectedClasses.RenderTarget;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RenderTarget.prototype = $desc;
  function SamplerState(_addressU, _addressV, _minFilter, _magFilter, _maxAnisotropy, device, name, _referenceCount, _disposed) {
    this._addressU = _addressU;
    this._addressV = _addressV;
    this._minFilter = _minFilter;
    this._magFilter = _magFilter;
    this._maxAnisotropy = _maxAnisotropy;
    this.device = device;
    this.name = name;
    this._referenceCount = _referenceCount;
    this._disposed = _disposed;
  }
  SamplerState.builtin$cls = "SamplerState";
  if (!"name" in SamplerState)
    SamplerState.name = "SamplerState";
  $desc = $collectedClasses.SamplerState;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SamplerState.prototype = $desc;
  function SpectreShader() {
  }
  SpectreShader.builtin$cls = "SpectreShader";
  if (!"name" in SpectreShader)
    SpectreShader.name = "SpectreShader";
  $desc = $collectedClasses.SpectreShader;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SpectreShader.prototype = $desc;
  function ShaderProgramUniform(name, index, type, size, location, _apply) {
    this.name = name;
    this.index = index;
    this.type = type;
    this.size = size;
    this.location = location;
    this._apply = _apply;
  }
  ShaderProgramUniform.builtin$cls = "ShaderProgramUniform";
  if (!"name" in ShaderProgramUniform)
    ShaderProgramUniform.name = "ShaderProgramUniform";
  $desc = $collectedClasses.ShaderProgramUniform;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ShaderProgramUniform.prototype = $desc;
  ShaderProgramUniform.prototype.get$name = function(receiver) {
    return this.name;
  };
  ShaderProgramUniform.prototype.get$index = function(receiver) {
    return this.index;
  };
  ShaderProgramUniform.prototype.get$type = function(receiver) {
    return this.type;
  };
  ShaderProgramUniform.prototype.get$size = function(receiver) {
    return this.size;
  };
  ShaderProgramUniform.prototype.get$location = function(receiver) {
    return this.location;
  };
  function ShaderProgramSampler(name, index, type, size, location, _textureUnit) {
    this.name = name;
    this.index = index;
    this.type = type;
    this.size = size;
    this.location = location;
    this._textureUnit = _textureUnit;
  }
  ShaderProgramSampler.builtin$cls = "ShaderProgramSampler";
  if (!"name" in ShaderProgramSampler)
    ShaderProgramSampler.name = "ShaderProgramSampler";
  $desc = $collectedClasses.ShaderProgramSampler;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ShaderProgramSampler.prototype = $desc;
  ShaderProgramSampler.prototype.get$name = function(receiver) {
    return this.name;
  };
  ShaderProgramSampler.prototype.get$index = function(receiver) {
    return this.index;
  };
  ShaderProgramSampler.prototype.get$type = function(receiver) {
    return this.type;
  };
  ShaderProgramSampler.prototype.get$size = function(receiver) {
    return this.size;
  };
  ShaderProgramSampler.prototype.get$location = function(receiver) {
    return this.location;
  };
  function ShaderProgramAttribute(name, index, type, size, _location) {
    this.name = name;
    this.index = index;
    this.type = type;
    this.size = size;
    this._location = _location;
  }
  ShaderProgramAttribute.builtin$cls = "ShaderProgramAttribute";
  if (!"name" in ShaderProgramAttribute)
    ShaderProgramAttribute.name = "ShaderProgramAttribute";
  $desc = $collectedClasses.ShaderProgramAttribute;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ShaderProgramAttribute.prototype = $desc;
  ShaderProgramAttribute.prototype.get$name = function(receiver) {
    return this.name;
  };
  ShaderProgramAttribute.prototype.get$index = function(receiver) {
    return this.index;
  };
  ShaderProgramAttribute.prototype.get$type = function(receiver) {
    return this.type;
  };
  ShaderProgramAttribute.prototype.get$size = function(receiver) {
    return this.size;
  };
  function ShaderProgram(uniforms, attributes, samplers, _isLinked, _linkLog, _vertexShader, _fragmentShader, _program, device, name, _referenceCount, _disposed) {
    this.uniforms = uniforms;
    this.attributes = attributes;
    this.samplers = samplers;
    this._isLinked = _isLinked;
    this._linkLog = _linkLog;
    this._vertexShader = _vertexShader;
    this._fragmentShader = _fragmentShader;
    this._program = _program;
    this.device = device;
    this.name = name;
    this._referenceCount = _referenceCount;
    this._disposed = _disposed;
  }
  ShaderProgram.builtin$cls = "ShaderProgram";
  if (!"name" in ShaderProgram)
    ShaderProgram.name = "ShaderProgram";
  $desc = $collectedClasses.ShaderProgram;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ShaderProgram.prototype = $desc;
  function ShaderProgram_logUniforms_closure() {
  }
  ShaderProgram_logUniforms_closure.builtin$cls = "ShaderProgram_logUniforms_closure";
  if (!"name" in ShaderProgram_logUniforms_closure)
    ShaderProgram_logUniforms_closure.name = "ShaderProgram_logUniforms_closure";
  $desc = $collectedClasses.ShaderProgram_logUniforms_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ShaderProgram_logUniforms_closure.prototype = $desc;
  function ShaderProgram_logSamplers_closure() {
  }
  ShaderProgram_logSamplers_closure.builtin$cls = "ShaderProgram_logSamplers_closure";
  if (!"name" in ShaderProgram_logSamplers_closure)
    ShaderProgram_logSamplers_closure.name = "ShaderProgram_logSamplers_closure";
  $desc = $collectedClasses.ShaderProgram_logSamplers_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ShaderProgram_logSamplers_closure.prototype = $desc;
  function ShaderProgram_logAttributes_closure() {
  }
  ShaderProgram_logAttributes_closure.builtin$cls = "ShaderProgram_logAttributes_closure";
  if (!"name" in ShaderProgram_logAttributes_closure)
    ShaderProgram_logAttributes_closure.name = "ShaderProgram_logAttributes_closure";
  $desc = $collectedClasses.ShaderProgram_logAttributes_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ShaderProgram_logAttributes_closure.prototype = $desc;
  function ShaderProgram_forEachUniform_closure(callback_0) {
    this.callback_0 = callback_0;
  }
  ShaderProgram_forEachUniform_closure.builtin$cls = "ShaderProgram_forEachUniform_closure";
  if (!"name" in ShaderProgram_forEachUniform_closure)
    ShaderProgram_forEachUniform_closure.name = "ShaderProgram_forEachUniform_closure";
  $desc = $collectedClasses.ShaderProgram_forEachUniform_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ShaderProgram_forEachUniform_closure.prototype = $desc;
  function ShaderProgram_forEachSampler_closure(callback_0) {
    this.callback_0 = callback_0;
  }
  ShaderProgram_forEachSampler_closure.builtin$cls = "ShaderProgram_forEachSampler_closure";
  if (!"name" in ShaderProgram_forEachSampler_closure)
    ShaderProgram_forEachSampler_closure.name = "ShaderProgram_forEachSampler_closure";
  $desc = $collectedClasses.ShaderProgram_forEachSampler_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ShaderProgram_forEachSampler_closure.prototype = $desc;
  function ShaderProgram_forEachAttribute_closure(callback_0) {
    this.callback_0 = callback_0;
  }
  ShaderProgram_forEachAttribute_closure.builtin$cls = "ShaderProgram_forEachAttribute_closure";
  if (!"name" in ShaderProgram_forEachAttribute_closure)
    ShaderProgram_forEachAttribute_closure.name = "ShaderProgram_forEachAttribute_closure";
  $desc = $collectedClasses.ShaderProgram_forEachAttribute_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ShaderProgram_forEachAttribute_closure.prototype = $desc;
  function SpectreTexture() {
  }
  SpectreTexture.builtin$cls = "SpectreTexture";
  if (!"name" in SpectreTexture)
    SpectreTexture.name = "SpectreTexture";
  $desc = $collectedClasses.SpectreTexture;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SpectreTexture.prototype = $desc;
  function Texture2D(_loadError, _bindTarget, _bindingParam, _textureTarget, _textureWrapS, _textureWrapT, _textureMinFilter, _textureMagFilter, pixelFormat, pixelDataType, _width, _height, _deviceTexture, device, name, _referenceCount, _disposed) {
    this._loadError = _loadError;
    this._bindTarget = _bindTarget;
    this._bindingParam = _bindingParam;
    this._textureTarget = _textureTarget;
    this._textureWrapS = _textureWrapS;
    this._textureWrapT = _textureWrapT;
    this._textureMinFilter = _textureMinFilter;
    this._textureMagFilter = _textureMagFilter;
    this.pixelFormat = pixelFormat;
    this.pixelDataType = pixelDataType;
    this._width = _width;
    this._height = _height;
    this._deviceTexture = _deviceTexture;
    this.device = device;
    this.name = name;
    this._referenceCount = _referenceCount;
    this._disposed = _disposed;
  }
  Texture2D.builtin$cls = "Texture2D";
  if (!"name" in Texture2D)
    Texture2D.name = "Texture2D";
  $desc = $collectedClasses.Texture2D;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Texture2D.prototype = $desc;
  function Texture2D_uploadFromURL_closure(this_0, completer_1) {
    this.this_0 = this_0;
    this.completer_1 = completer_1;
  }
  Texture2D_uploadFromURL_closure.builtin$cls = "Texture2D_uploadFromURL_closure";
  if (!"name" in Texture2D_uploadFromURL_closure)
    Texture2D_uploadFromURL_closure.name = "Texture2D_uploadFromURL_closure";
  $desc = $collectedClasses.Texture2D_uploadFromURL_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Texture2D_uploadFromURL_closure.prototype = $desc;
  function Texture2D_uploadFromURL_closure0(this_2, element_3, completer_4) {
    this.this_2 = this_2;
    this.element_3 = element_3;
    this.completer_4 = completer_4;
  }
  Texture2D_uploadFromURL_closure0.builtin$cls = "Texture2D_uploadFromURL_closure0";
  if (!"name" in Texture2D_uploadFromURL_closure0)
    Texture2D_uploadFromURL_closure0.name = "Texture2D_uploadFromURL_closure0";
  $desc = $collectedClasses.Texture2D_uploadFromURL_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Texture2D_uploadFromURL_closure0.prototype = $desc;
  function VertexAttribute(vboSlot, attributeIndex, attributeOffset, attributeStride, dataType, dataCount, normalizeData) {
    this.vboSlot = vboSlot;
    this.attributeIndex = attributeIndex;
    this.attributeOffset = attributeOffset;
    this.attributeStride = attributeStride;
    this.dataType = dataType;
    this.dataCount = dataCount;
    this.normalizeData = normalizeData;
  }
  VertexAttribute.builtin$cls = "VertexAttribute";
  if (!"name" in VertexAttribute)
    VertexAttribute.name = "VertexAttribute";
  $desc = $collectedClasses.VertexAttribute;
  if ($desc instanceof Array)
    $desc = $desc[1];
  VertexAttribute.prototype = $desc;
  VertexAttribute.prototype.get$vboSlot = function() {
    return this.vboSlot;
  };
  function VertexBuffer(_deviceBuffer, _bindTarget, _bindingParam, _usage, _size, device, name, _referenceCount, _disposed) {
    this._deviceBuffer = _deviceBuffer;
    this._bindTarget = _bindTarget;
    this._bindingParam = _bindingParam;
    this._usage = _usage;
    this._size = _size;
    this.device = device;
    this.name = name;
    this._referenceCount = _referenceCount;
    this._disposed = _disposed;
  }
  VertexBuffer.builtin$cls = "VertexBuffer";
  if (!"name" in VertexBuffer)
    VertexBuffer.name = "VertexBuffer";
  $desc = $collectedClasses.VertexBuffer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  VertexBuffer.prototype = $desc;
  function VertexShader(_type, _spectre$_source, _shader, autoCompile, device, name, _referenceCount, _disposed) {
    this._type = _type;
    this._spectre$_source = _spectre$_source;
    this._shader = _shader;
    this.autoCompile = autoCompile;
    this.device = device;
    this.name = name;
    this._referenceCount = _referenceCount;
    this._disposed = _disposed;
  }
  VertexShader.builtin$cls = "VertexShader";
  if (!"name" in VertexShader)
    VertexShader.name = "VertexShader";
  $desc = $collectedClasses.VertexShader;
  if ($desc instanceof Array)
    $desc = $desc[1];
  VertexShader.prototype = $desc;
  function Viewport(_x, _y, _width, _height, _minDepth, _maxDepth) {
    this._x = _x;
    this._y = _y;
    this._width = _width;
    this._height = _height;
    this._minDepth = _minDepth;
    this._maxDepth = _maxDepth;
  }
  Viewport.builtin$cls = "Viewport";
  if (!"name" in Viewport)
    Viewport.name = "Viewport";
  $desc = $collectedClasses.Viewport;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Viewport.prototype = $desc;
  function UnmodifiableMapView(_source) {
    this._source = _source;
  }
  UnmodifiableMapView.builtin$cls = "UnmodifiableMapView";
  if (!"name" in UnmodifiableMapView)
    UnmodifiableMapView.name = "UnmodifiableMapView";
  $desc = $collectedClasses.UnmodifiableMapView;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UnmodifiableMapView.prototype = $desc;
  function Aabb3(_min, _max) {
    this._min = _min;
    this._max = _max;
  }
  Aabb3.builtin$cls = "Aabb3";
  if (!"name" in Aabb3)
    Aabb3.name = "Aabb3";
  $desc = $collectedClasses.Aabb3;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Aabb3.prototype = $desc;
  function Matrix3(storage) {
    this.storage = storage;
  }
  Matrix3.builtin$cls = "Matrix3";
  if (!"name" in Matrix3)
    Matrix3.name = "Matrix3";
  $desc = $collectedClasses.Matrix3;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Matrix3.prototype = $desc;
  Matrix3.prototype.get$storage = function() {
    return this.storage;
  };
  function BoundClosure$i2(_self, __js_helper$_target, _receiver, __js_helper$_name) {
    this._self = _self;
    this.__js_helper$_target = __js_helper$_target;
    this._receiver = _receiver;
    this.__js_helper$_name = __js_helper$_name;
  }
  BoundClosure$i2.builtin$cls = "BoundClosure$i2";
  $desc = $collectedClasses.BoundClosure$i2;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BoundClosure$i2.prototype = $desc;
  function Matrix4(storage) {
    this.storage = storage;
  }
  Matrix4.builtin$cls = "Matrix4";
  if (!"name" in Matrix4)
    Matrix4.name = "Matrix4";
  $desc = $collectedClasses.Matrix4;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Matrix4.prototype = $desc;
  Matrix4.prototype.get$storage = function() {
    return this.storage;
  };
  function Vector3(storage) {
    this.storage = storage;
  }
  Vector3.builtin$cls = "Vector3";
  if (!"name" in Vector3)
    Vector3.name = "Vector3";
  $desc = $collectedClasses.Vector3;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Vector3.prototype = $desc;
  Vector3.prototype.get$storage = function() {
    return this.storage;
  };
  function Vector4(storage) {
    this.storage = storage;
  }
  Vector4.builtin$cls = "Vector4";
  if (!"name" in Vector4)
    Vector4.name = "Vector4";
  $desc = $collectedClasses.Vector4;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Vector4.prototype = $desc;
  Vector4.prototype.get$storage = function() {
    return this.storage;
  };
  function Closure$2(call$2, $name) {
    this.call$2 = call$2;
    this.$name = $name;
  }
  Closure$2.builtin$cls = "Closure$2";
  $desc = $collectedClasses.Closure$2;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Closure$2.prototype = $desc;
  function Closure$0(call$0, $name) {
    this.call$0 = call$0;
    this.$name = $name;
  }
  Closure$0.builtin$cls = "Closure$0";
  $desc = $collectedClasses.Closure$0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Closure$0.prototype = $desc;
  function Closure$7(call$7, $name) {
    this.call$7 = call$7;
    this.$name = $name;
  }
  Closure$7.builtin$cls = "Closure$7";
  $desc = $collectedClasses.Closure$7;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Closure$7.prototype = $desc;
  function Closure$1(call$1, $name) {
    this.call$1 = call$1;
    this.$name = $name;
  }
  Closure$1.builtin$cls = "Closure$1";
  $desc = $collectedClasses.Closure$1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Closure$1.prototype = $desc;
  function Closure$21(call$2, $name) {
    this.call$2 = call$2;
    this.$name = $name;
  }
  Closure$21.builtin$cls = "Closure$21";
  $desc = $collectedClasses.Closure$21;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Closure$21.prototype = $desc;
  return [HtmlElement, _EntryArray, AbstractWorker, AesCbcParams, AesKeyGenParams, Algorithm, AnchorElement, AnimationEvent, ApplicationCache, AreaElement, AudioElement, AutocompleteErrorEvent, BRElement, BarProp, BaseElement, BeforeLoadEvent, BeforeUnloadEvent, Blob, BodyElement, ButtonElement, CDataSection, Canvas2DContextAttributes, CanvasElement, CanvasGradient, CanvasPattern, CanvasRenderingContext, CanvasRenderingContext2D, CharacterData, CloseEvent, Comment, Composition, CompositionEvent, ConsoleBase, ContentElement, Coordinates, Crypto, CryptoKey, Css, CssCharsetRule, CssFilterRule, CssFontFaceLoadEvent, CssFontFaceRule, CssHostRule, CssImportRule, CssKeyframeRule, CssKeyframesRule, CssMediaRule, CssPageRule, CssRegionRule, CssRule, CssStyleDeclaration, CssStyleRule, CssStyleSheet, CssSupportsRule, CssVariablesMap, CssViewportRule, CustomEvent, DListElement, DataListElement, DataTransfer, DataTransferItem, DataTransferItemList, DedicatedWorkerGlobalScope, DetailsElement, DeviceAcceleration, DeviceMotionEvent, DeviceOrientationEvent, DeviceRotationRate, DialogElement, DirectoryEntry, DirectoryReader, DivElement, Document, DocumentFragment, DocumentType, DomError, DomException, DomImplementation, DomParser, DomSettableTokenList, DomStringList, DomTokenList, Element, EmbedElement, Entry, ErrorEvent, Event, EventSource, EventTarget, FieldSetElement, File, FileEntry, FileError, FileList, FileReader, FileStream, FileSystem, FileWriter, FocusEvent, FontFace, FontFaceSet, FormData, FormElement, Gamepad, Geolocation, Geoposition, HRElement, HashChangeEvent, HeadElement, HeadingElement, History, HmacKeyParams, HmacParams, HtmlCollection, HtmlDocument, HtmlFormControlsCollection, HtmlHtmlElement, HtmlOptionsCollection, HttpRequest, HttpRequestEventTarget, HttpRequestUpload, IFrameElement, ImageBitmap, ImageData, ImageElement, InputElement, InputMethodContext, KeyPair, KeyboardEvent, KeygenElement, LIElement, LabelElement, LegendElement, LinkElement, Location, MapElement, MediaController, MediaElement, MediaError, MediaKeyError, MediaKeyEvent, MediaKeyMessageEvent, MediaKeyNeededEvent, MediaKeySession, MediaKeys, MediaList, MediaQueryList, MediaSource, MediaStream, MediaStreamEvent, MediaStreamTrack, MediaStreamTrackEvent, MemoryInfo, MenuElement, MessageChannel, MessageEvent, MessagePort, MetaElement, Metadata, MeterElement, MidiAccess, MidiAccessPromise, MidiConnectionEvent, MidiInput, MidiMessageEvent, MidiOutput, MidiPort, MimeType, MimeTypeArray, ModElement, MouseEvent, MutationObserver, MutationRecord, NamedFlow, NamedFlowCollection, Navigator, NavigatorUserMediaError, Node, NodeFilter, NodeIterator, NodeList, Notification, OListElement, ObjectElement, OptGroupElement, OptionElement, OutputElement, OverflowEvent, PageTransitionEvent, ParagraphElement, ParamElement, Path, Performance, PerformanceEntry, PerformanceMark, PerformanceMeasure, PerformanceNavigation, PerformanceResourceTiming, PerformanceTiming, Plugin, PluginArray, PopStateEvent, PositionError, PreElement, ProcessingInstruction, ProgressElement, ProgressEvent, Promise, QuoteElement, Range, ResourceProgressEvent, RsaKeyGenParams, RsaSsaParams, RtcDataChannel, RtcDataChannelEvent, RtcDtmfSender, RtcDtmfToneChangeEvent, RtcIceCandidate, RtcIceCandidateEvent, RtcPeerConnection, RtcSessionDescription, RtcStatsReport, RtcStatsResponse, Screen, ScriptElement, SecurityPolicy, SecurityPolicyViolationEvent, SelectElement, Selection, ServiceWorker, ShadowElement, ShadowRoot, SharedWorkerGlobalScope, SourceBuffer, SourceBufferList, SourceElement, SourceInfo, SpanElement, SpeechGrammar, SpeechGrammarList, SpeechInputEvent, SpeechInputResult, SpeechRecognition, SpeechRecognitionAlternative, SpeechRecognitionError, SpeechRecognitionEvent, SpeechRecognitionResult, SpeechSynthesis, SpeechSynthesisEvent, SpeechSynthesisUtterance, SpeechSynthesisVoice, Storage, StorageEvent, StorageInfo, StorageQuota, StyleElement, StyleMedia, StyleSheet, TableCaptionElement, TableCellElement, TableColElement, TableElement, TableRowElement, TableSectionElement, TemplateElement, Text, TextAreaElement, TextEvent, TextMetrics, TextTrack, TextTrackCue, TextTrackCueList, TextTrackList, TimeRanges, TitleElement, Touch, TouchEvent, TouchList, TrackElement, TrackEvent, TransitionEvent, TreeWalker, UIEvent, UListElement, UnknownElement, Url, ValidityState, VideoElement, WebSocket, WheelEvent, Window, Worker, WorkerConsole, WorkerCrypto, WorkerGlobalScope, WorkerPerformance, XPathEvaluator, XPathExpression, XPathNSResolver, XPathResult, XmlSerializer, XsltProcessor, _Attr, _CSSPrimitiveValue, _CSSUnknownRule, _CSSValue, _ClientRect, _ClientRectList, _Counter, _CssRuleList, _CssValueList, _DOMFileSystemSync, _DatabaseSync, _DirectoryEntrySync, _DirectoryReaderSync, _DomPoint, _Entity, _EntrySync, _FileEntrySync, _FileReaderSync, _FileWriterSync, _GamepadList, _HTMLAllCollection, _HTMLAppletElement, _HTMLBaseFontElement, _HTMLDirectoryElement, _HTMLFontElement, _HTMLFrameElement, _HTMLFrameSetElement, _HTMLMarqueeElement, _MutationEvent, _NamedNodeMap, _Notation, _NotificationCenter, _PagePopupController, _RGBColor, _Rect, _SharedWorker, _SpeechInputResultList, _SpeechRecognitionResultList, _StyleSheetList, _SubtleCrypto, _WebKitCSSFilterValue, _WebKitCSSMatrix, _WebKitCSSMixFunctionValue, _WebKitCSSTransformValue, _WebKitMediaSource, _WebKitSourceBuffer, _WebKitSourceBufferList, _WorkerLocation, _WorkerNavigator, _XMLHttpRequestProgressEvent, Cursor, CursorWithValue, Database, IdbFactory, Index, KeyRange, ObjectStore, BoundClosure$i1, OpenDBRequest, Request, Transaction, VersionChangeEvent, _IDBAny, AElement, AltGlyphElement, Angle, AnimateElement, AnimateMotionElement, AnimateTransformElement, AnimatedAngle, AnimatedBoolean, AnimatedEnumeration, AnimatedInteger, AnimatedLength, AnimatedLengthList, AnimatedNumber, AnimatedNumberList, AnimatedPreserveAspectRatio, AnimatedRect, AnimatedString, AnimatedTransformList, AnimationElement, CircleElement, ClipPathElement, DefsElement, DescElement, ElementInstance, EllipseElement, FEBlendElement, FEColorMatrixElement, FEComponentTransferElement, FECompositeElement, FEConvolveMatrixElement, FEDiffuseLightingElement, FEDisplacementMapElement, FEDistantLightElement, FEFloodElement, FEFuncAElement, FEFuncBElement, FEFuncGElement, FEFuncRElement, FEGaussianBlurElement, FEImageElement, FEMergeElement, FEMergeNodeElement, FEMorphologyElement, FEOffsetElement, FEPointLightElement, FESpecularLightingElement, FESpotLightElement, FETileElement, FETurbulenceElement, FilterElement, ForeignObjectElement, GElement, GraphicsElement, ImageElement0, Length, LengthList, LineElement, LinearGradientElement, MarkerElement, MaskElement, Matrix, MetadataElement, Number, NumberList, PathElement, PathSeg, PathSegArcAbs, PathSegArcRel, PathSegClosePath, PathSegCurvetoCubicAbs, PathSegCurvetoCubicRel, PathSegCurvetoCubicSmoothAbs, PathSegCurvetoCubicSmoothRel, PathSegCurvetoQuadraticAbs, PathSegCurvetoQuadraticRel, PathSegCurvetoQuadraticSmoothAbs, PathSegCurvetoQuadraticSmoothRel, PathSegLinetoAbs, PathSegLinetoHorizontalAbs, PathSegLinetoHorizontalRel, PathSegLinetoRel, PathSegLinetoVerticalAbs, PathSegLinetoVerticalRel, PathSegList, PathSegMovetoAbs, PathSegMovetoRel, PatternElement, Point0, PointList, PolygonElement, PolylineElement, PreserveAspectRatio, RadialGradientElement, Rect, RectElement, RenderingIntent, ScriptElement0, SetElement, StopElement, StringList, StyleElement0, SvgDocument, SvgElement, SvgSvgElement, SwitchElement, SymbolElement, TSpanElement, TextContentElement, TextElement, TextPathElement, TextPositioningElement, TitleElement0, Transform, TransformList, UnitTypes, UseElement, ViewElement, ViewSpec, ZoomEvent, _ElementInstanceList, _GradientElement, _SVGAltGlyphDefElement, _SVGAltGlyphItemElement, _SVGAnimateColorElement, _SVGColor, _SVGComponentTransferFunctionElement, _SVGCursorElement, _SVGFEDropShadowElement, _SVGFontElement, _SVGFontFaceElement, _SVGFontFaceFormatElement, _SVGFontFaceNameElement, _SVGFontFaceSrcElement, _SVGFontFaceUriElement, _SVGGlyphElement, _SVGGlyphRefElement, _SVGHKernElement, _SVGMPathElement, _SVGMissingGlyphElement, _SVGPaint, _SVGVKernElement, AnalyserNode, AudioBuffer, AudioBufferSourceNode, AudioContext, AudioDestinationNode, AudioListener, AudioNode, AudioParam, AudioProcessingEvent, AudioSourceNode, BiquadFilterNode, ChannelMergerNode, ChannelSplitterNode, ConvolverNode, DelayNode, DynamicsCompressorNode, GainNode, MediaElementAudioSourceNode, MediaStreamAudioDestinationNode, MediaStreamAudioSourceNode, OfflineAudioCompletionEvent, OfflineAudioContext, OscillatorNode, PannerNode, PeriodicWave, ScriptProcessorNode, WaveShaperNode, ActiveInfo, AngleInstancedArrays, Buffer, CompressedTextureAtc, CompressedTexturePvrtc, CompressedTextureS3TC, ContextAttributes, ContextEvent, DebugRendererInfo, DebugShaders, DepthTexture, DrawBuffers, ExtFragDepth, ExtTextureFilterAnisotropic, Framebuffer, LoseContext, OesElementIndexUint, OesStandardDerivatives, OesTextureFloat, OesTextureFloatLinear, OesTextureHalfFloat, OesTextureHalfFloatLinear, OesVertexArrayObject, Program, Renderbuffer, RenderingContext, Shader, ShaderPrecisionFormat, Texture, UniformLocation, VertexArrayObject, SqlDatabase, SqlError, SqlResultSet, SqlResultSetRowList, SqlTransaction, _SQLTransactionSync, ByteBuffer, TypedData, ByteData, Float32List, Float64List, Int16List, Int32List, Int8List, Uint16List, Uint32List, Uint8ClampedList, Uint8List, JS_CONST, Interceptor, JSBool, JSNull, JavaScriptObject, PlainJavaScriptObject, UnknownJavaScriptObject, JSArray, JSMutableArray, JSFixedArray, JSExtendableArray, JSNumber, JSInt, JSDouble, JSString, startRootIsolate_closure, startRootIsolate_closure0, _Manager, _IsolateContext, _EventLoop, _EventLoop__runHelper_next, _IsolateEvent, _MainManagerStub, IsolateNatives__processWorkerMessage_closure, _BaseSendPort, _NativeJsSendPort, _NativeJsSendPort_send_closure, _NativeJsSendPort_send__closure, _WorkerSendPort, _WorkerSendPort_send_closure, ReceivePortImpl, BoundClosure$i0, _waitForPendingPorts_closure, _PendingSendPortFinder, _JsSerializer, _JsCopier, _JsDeserializer, _JsVisitedMap, _MessageTraverserVisitedMap, _MessageTraverser, BoundClosure$1, _Copier, _Copier_visitMap_closure, _Serializer, _Deserializer, TimerImpl, TimerImpl_internalCallback, TimerImpl_internalCallback0, TypeErrorDecoder, NullError, JsNoSuchMethodError, UnknownJsTypeError, unwrapException_saveStackTrace, _StackTrace, invokeClosure_closure, invokeClosure_closure0, invokeClosure_closure1, invokeClosure_closure2, invokeClosure_closure3, Closure, BoundClosure, CastErrorImplementation, TypeImpl, initHooks_closure, initHooks_closure0, initHooks_closure1, initGraphics_closure, initDbullet_closure, ListIterator, MappedIterable, EfficientLengthMappedIterable, MappedIterator, FixedLengthListMixin, _AsyncError, _BroadcastStream, _BroadcastSubscription, BoundClosure$0, _BroadcastStreamController, _SyncBroadcastStreamController, _SyncBroadcastStreamController__sendData_closure, _AsyncBroadcastStreamController, Future, Future_wait_handleError, Future_wait_closure, _Completer, _AsyncCompleter, _SyncCompleter, BoundClosure$2, _Future, _Future__addListener_closure, _Future__chainFutures_closure, _Future__chainFutures_closure0, _Future__asyncComplete_closure, _Future__asyncCompleteError_closure, _Future__propagateToListeners_closure, _Future__propagateToListeners_closure0, _Future__propagateToListeners__closure, _Future__propagateToListeners__closure0, Stream, Stream_forEach_closure, Stream_forEach__closure, Stream_forEach__closure0, Stream_forEach_closure0, Stream_length_closure, Stream_length_closure0, StreamSubscription, _StreamController, _StreamController__subscribe_closure, _StreamController__recordCancel_complete, _SyncStreamControllerDispatch, _AsyncStreamControllerDispatch, _AsyncStreamController, _StreamController__AsyncStreamControllerDispatch, _SyncStreamController, _StreamController__SyncStreamControllerDispatch, _ControllerStream, _ControllerSubscription, _EventSink, _BufferingStreamSubscription, _BufferingStreamSubscription__sendDone_sendDone, _StreamImpl, _DelayedEvent, _DelayedData, _DelayedDone, _PendingEvents, _PendingEvents_schedule_closure, _StreamImplEvents, _cancelAndError_closure, _cancelAndErrorClosure_closure, _BaseZone, _BaseZone_bindCallback_closure, _BaseZone_bindCallback_closure0, _BaseZone_bindUnaryCallback_closure, _BaseZone_bindUnaryCallback_closure0, _rootHandleUncaughtError_closure, _rootHandleUncaughtError__closure, _RootZone, _HashMap, _HashMap_values_closure, HashMapKeyIterable, HashMapKeyIterator, _LinkedHashMap, _LinkedHashMap_values_closure, LinkedHashMapCell, LinkedHashMapKeyIterable, LinkedHashMapKeyIterator, _HashSet, _IdentityHashSet, HashSetIterator, _LinkedHashSet, LinkedHashSetCell, LinkedHashSetIterator, _HashSetBase, IterableBase, ListMixin, Maps_mapToString_closure, ListQueue, _ListQueueIterator, NoSuchMethodError_toString_closure, DateTime, DateTime_toString_fourDigits, DateTime_toString_threeDigits, DateTime_toString_twoDigits, Duration, Duration_toString_sixDigits, Duration_toString_twoDigits, Error, NullThrownError, ArgumentError, RangeError, FallThroughError, UnsupportedError, UnimplementedError, StateError, ConcurrentModificationError, StackOverflowError, CyclicInitializationError, _ExceptionImplementation, Expando, Function, Iterator, Map, Null, Object, StackTrace, StringBuffer, Symbol, Interceptor_CssStyleDeclarationBase, CssStyleDeclarationBase, Interceptor_ListMixin, Interceptor_ListMixin_ImmutableListMixin, Interceptor_ListMixin0, Interceptor_ListMixin_ImmutableListMixin0, Interceptor_ListMixin1, Interceptor_ListMixin_ImmutableListMixin1, Interceptor_ListMixin2, Interceptor_ListMixin_ImmutableListMixin2, Interceptor_ListMixin3, Interceptor_ListMixin_ImmutableListMixin3, Interceptor_ListMixin4, Interceptor_ListMixin_ImmutableListMixin4, EventTarget_ListMixin, EventTarget_ListMixin_ImmutableListMixin, Interceptor_ListMixin5, Interceptor_ListMixin_ImmutableListMixin5, Storage_keys_closure, Storage_values_closure, Interceptor_ListMixin6, Interceptor_ListMixin_ImmutableListMixin6, EventTarget_ListMixin0, EventTarget_ListMixin_ImmutableListMixin0, Interceptor_ListMixin7, Interceptor_ListMixin_ImmutableListMixin7, Interceptor_ListMixin8, Interceptor_ListMixin_ImmutableListMixin8, Interceptor_ListMixin9, Interceptor_ListMixin_ImmutableListMixin9, _CSSValue_ListMixin, _CSSValue_ListMixin_ImmutableListMixin, Interceptor_ListMixin10, Interceptor_ListMixin_ImmutableListMixin10, Interceptor_ListMixin11, Interceptor_ListMixin_ImmutableListMixin11, Interceptor_ListMixin12, Interceptor_ListMixin_ImmutableListMixin12, Interceptor_ListMixin13, Interceptor_ListMixin_ImmutableListMixin13, Interceptor_ListMixin14, Interceptor_ListMixin_ImmutableListMixin14, EventStreamProvider, _EventStream, _ElementEventStreamImpl, _EventStreamSubscription, _CustomEventStreamProvider, ImmutableListMixin, FixedSizeListIterator, _LocationWrapper, _completeRequest_closure, Interceptor_ListMixin15, Interceptor_ListMixin_ImmutableListMixin15, Interceptor_ListMixin16, Interceptor_ListMixin_ImmutableListMixin16, Interceptor_ListMixin17, Interceptor_ListMixin_ImmutableListMixin17, Interceptor_ListMixin18, Interceptor_ListMixin_ImmutableListMixin18, Interceptor_ListMixin19, Interceptor_ListMixin_ImmutableListMixin19, Interceptor_ListMixin20, Interceptor_ListMixin_ImmutableListMixin20, Interceptor_ListMixin21, Interceptor_ListMixin_ImmutableListMixin21, ReceivePort, Point, _RectangleBase, Rectangle, TypedData_ListMixin, TypedData_ListMixin_FixedLengthListMixin, TypedData_ListMixin0, TypedData_ListMixin_FixedLengthListMixin0, TypedData_ListMixin1, TypedData_ListMixin_FixedLengthListMixin1, TypedData_ListMixin2, TypedData_ListMixin_FixedLengthListMixin2, TypedData_ListMixin3, TypedData_ListMixin_FixedLengthListMixin3, TypedData_ListMixin4, TypedData_ListMixin_FixedLengthListMixin4, TypedData_ListMixin5, TypedData_ListMixin_FixedLengthListMixin5, TypedData_ListMixin6, TypedData_ListMixin_FixedLengthListMixin6, TypedData_ListMixin7, TypedData_ListMixin_FixedLengthListMixin7, Int64List, Uint64List, Disposable, WebGLPhysicsPerformance, WebGLPhysicsNarrowCache, FakeBody, Matrix43, WebGLPhysicsArbiter, WebGLPhysicsCollisionObject, WebGLPhysicsContact, WebGLContactEPA, Hs, Horizon, ContactFace, WebGLPhysicsRigidBody, AabbTreeNode, AabbTree, BoundClosure$3, AabbTree_sortNodes_sortNodesRecursive, AabbTree_sortNodesNoY_sortNodesNoYRecursive, AabbTree_sortNodesHighQuality_sortNodesHighQualityRecursive, AabbTree_nthElement_medianFn, AabbTree_nthElement_insertionSortFn, WebGLPhysicsIsland, WebGLPhysicsTOIEvent, WebGLPhysicsPrivateBody, WebGLPhysicsBoxShape, WebGLPhysicsPlaneShape, WebGLPhysicsShape, WebGLPhysicsTriangleShape, WebGLGJKContactSolver, WebGLPhysicsWorld, WebGLPhysicsWorld__computeSleeping__find, WebGLPhysicsWorld__computeSleeping__unify, GameLoop, DigitalButton, DigitalButtonEvent, DigitalInput, GameLoopTimer, GameLoopGamepad, GameLoopHtml, Keyboard, GameLoopMouseEvent, Mouse, PointerLock, _GameLoopTouchEvent, GameLoopTouchPosition, GameLoopTouch, GameLoopTouchSet, GameLoopTouchSet__start_closure, GameLoopTouchSet__end_closure, GameLoopTouchSet__move_closure, GameLoopTouchSet__verifyTouchList_closure, convertDartToNative_Dictionary_closure, convertNativeToDart_AcceptStructuredClone_findSlot, convertNativeToDart_AcceptStructuredClone_readSlot, convertNativeToDart_AcceptStructuredClone_writeSlot, convertNativeToDart_AcceptStructuredClone_walk, _TypedContextAttributes, Logger, Logger_Logger_closure, Level, LogRecord, BlendState, SpectreBuffer, Camera, _DebugLineVertex, _DebugLineObject, _DebugLineCollection, _DebugDrawLineManager, DebugDrawManager, DepthState, DeviceChild, Enum__stringify_closure, Enum__isValid_closure, FragmentShader, GraphicsContext, GraphicsContext__prepareInputs_closure, GraphicsDevice, GraphicsDevice_closure, GraphicsDeviceCapabilities, GraphicsDeviceConfig, IndexBuffer, InputLayout, InputLayout__refresh_closure, SpectreMeshAttribute, SpectreMesh, SingleArrayMesh, SingleArrayIndexedMesh, RasterizerState, RenderTarget, SamplerState, SpectreShader, ShaderProgramUniform, ShaderProgramSampler, ShaderProgramAttribute, ShaderProgram, ShaderProgram_logUniforms_closure, ShaderProgram_logSamplers_closure, ShaderProgram_logAttributes_closure, ShaderProgram_forEachUniform_closure, ShaderProgram_forEachSampler_closure, ShaderProgram_forEachAttribute_closure, SpectreTexture, Texture2D, Texture2D_uploadFromURL_closure, Texture2D_uploadFromURL_closure0, VertexAttribute, VertexBuffer, VertexShader, Viewport, UnmodifiableMapView, Aabb3, Matrix3, BoundClosure$i2, Matrix4, Vector3, Vector4, Closure$2, Closure$0, Closure$7, Closure$1, Closure$21];
}
